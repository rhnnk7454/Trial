
006Queue_and-Timers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000068fc  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b4  08006acc  08006acc  00016acc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006c80  08006c80  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  08006c80  08006c80  00016c80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006c88  08006c88  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006c88  08006c88  00016c88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006c8c  08006c8c  00016c8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08006c90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00012e9c  2000001c  08006cac  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20012eb8  08006cac  00022eb8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018761  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003260  00000000  00000000  000387ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001298  00000000  00000000  0003ba10  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001120  00000000  00000000  0003cca8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00024482  00000000  00000000  0003ddc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000101db  00000000  00000000  0006224a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000dcd65  00000000  00000000  00072425  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014f18a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d10  00000000  00000000  0014f208  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000001c 	.word	0x2000001c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006ab4 	.word	0x08006ab4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000020 	.word	0x20000020
 800020c:	08006ab4 	.word	0x08006ab4

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <__aeabi_uldivmod>:
 8000234:	b953      	cbnz	r3, 800024c <__aeabi_uldivmod+0x18>
 8000236:	b94a      	cbnz	r2, 800024c <__aeabi_uldivmod+0x18>
 8000238:	2900      	cmp	r1, #0
 800023a:	bf08      	it	eq
 800023c:	2800      	cmpeq	r0, #0
 800023e:	bf1c      	itt	ne
 8000240:	f04f 31ff 	movne.w	r1, #4294967295
 8000244:	f04f 30ff 	movne.w	r0, #4294967295
 8000248:	f000 b972 	b.w	8000530 <__aeabi_idiv0>
 800024c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000250:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000254:	f000 f806 	bl	8000264 <__udivmoddi4>
 8000258:	f8dd e004 	ldr.w	lr, [sp, #4]
 800025c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000260:	b004      	add	sp, #16
 8000262:	4770      	bx	lr

08000264 <__udivmoddi4>:
 8000264:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000268:	9e08      	ldr	r6, [sp, #32]
 800026a:	4604      	mov	r4, r0
 800026c:	4688      	mov	r8, r1
 800026e:	2b00      	cmp	r3, #0
 8000270:	d14b      	bne.n	800030a <__udivmoddi4+0xa6>
 8000272:	428a      	cmp	r2, r1
 8000274:	4615      	mov	r5, r2
 8000276:	d967      	bls.n	8000348 <__udivmoddi4+0xe4>
 8000278:	fab2 f282 	clz	r2, r2
 800027c:	b14a      	cbz	r2, 8000292 <__udivmoddi4+0x2e>
 800027e:	f1c2 0720 	rsb	r7, r2, #32
 8000282:	fa01 f302 	lsl.w	r3, r1, r2
 8000286:	fa20 f707 	lsr.w	r7, r0, r7
 800028a:	4095      	lsls	r5, r2
 800028c:	ea47 0803 	orr.w	r8, r7, r3
 8000290:	4094      	lsls	r4, r2
 8000292:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000296:	0c23      	lsrs	r3, r4, #16
 8000298:	fbb8 f7fe 	udiv	r7, r8, lr
 800029c:	fa1f fc85 	uxth.w	ip, r5
 80002a0:	fb0e 8817 	mls	r8, lr, r7, r8
 80002a4:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002a8:	fb07 f10c 	mul.w	r1, r7, ip
 80002ac:	4299      	cmp	r1, r3
 80002ae:	d909      	bls.n	80002c4 <__udivmoddi4+0x60>
 80002b0:	18eb      	adds	r3, r5, r3
 80002b2:	f107 30ff 	add.w	r0, r7, #4294967295
 80002b6:	f080 811b 	bcs.w	80004f0 <__udivmoddi4+0x28c>
 80002ba:	4299      	cmp	r1, r3
 80002bc:	f240 8118 	bls.w	80004f0 <__udivmoddi4+0x28c>
 80002c0:	3f02      	subs	r7, #2
 80002c2:	442b      	add	r3, r5
 80002c4:	1a5b      	subs	r3, r3, r1
 80002c6:	b2a4      	uxth	r4, r4
 80002c8:	fbb3 f0fe 	udiv	r0, r3, lr
 80002cc:	fb0e 3310 	mls	r3, lr, r0, r3
 80002d0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d4:	fb00 fc0c 	mul.w	ip, r0, ip
 80002d8:	45a4      	cmp	ip, r4
 80002da:	d909      	bls.n	80002f0 <__udivmoddi4+0x8c>
 80002dc:	192c      	adds	r4, r5, r4
 80002de:	f100 33ff 	add.w	r3, r0, #4294967295
 80002e2:	f080 8107 	bcs.w	80004f4 <__udivmoddi4+0x290>
 80002e6:	45a4      	cmp	ip, r4
 80002e8:	f240 8104 	bls.w	80004f4 <__udivmoddi4+0x290>
 80002ec:	3802      	subs	r0, #2
 80002ee:	442c      	add	r4, r5
 80002f0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002f4:	eba4 040c 	sub.w	r4, r4, ip
 80002f8:	2700      	movs	r7, #0
 80002fa:	b11e      	cbz	r6, 8000304 <__udivmoddi4+0xa0>
 80002fc:	40d4      	lsrs	r4, r2
 80002fe:	2300      	movs	r3, #0
 8000300:	e9c6 4300 	strd	r4, r3, [r6]
 8000304:	4639      	mov	r1, r7
 8000306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030a:	428b      	cmp	r3, r1
 800030c:	d909      	bls.n	8000322 <__udivmoddi4+0xbe>
 800030e:	2e00      	cmp	r6, #0
 8000310:	f000 80eb 	beq.w	80004ea <__udivmoddi4+0x286>
 8000314:	2700      	movs	r7, #0
 8000316:	e9c6 0100 	strd	r0, r1, [r6]
 800031a:	4638      	mov	r0, r7
 800031c:	4639      	mov	r1, r7
 800031e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000322:	fab3 f783 	clz	r7, r3
 8000326:	2f00      	cmp	r7, #0
 8000328:	d147      	bne.n	80003ba <__udivmoddi4+0x156>
 800032a:	428b      	cmp	r3, r1
 800032c:	d302      	bcc.n	8000334 <__udivmoddi4+0xd0>
 800032e:	4282      	cmp	r2, r0
 8000330:	f200 80fa 	bhi.w	8000528 <__udivmoddi4+0x2c4>
 8000334:	1a84      	subs	r4, r0, r2
 8000336:	eb61 0303 	sbc.w	r3, r1, r3
 800033a:	2001      	movs	r0, #1
 800033c:	4698      	mov	r8, r3
 800033e:	2e00      	cmp	r6, #0
 8000340:	d0e0      	beq.n	8000304 <__udivmoddi4+0xa0>
 8000342:	e9c6 4800 	strd	r4, r8, [r6]
 8000346:	e7dd      	b.n	8000304 <__udivmoddi4+0xa0>
 8000348:	b902      	cbnz	r2, 800034c <__udivmoddi4+0xe8>
 800034a:	deff      	udf	#255	; 0xff
 800034c:	fab2 f282 	clz	r2, r2
 8000350:	2a00      	cmp	r2, #0
 8000352:	f040 808f 	bne.w	8000474 <__udivmoddi4+0x210>
 8000356:	1b49      	subs	r1, r1, r5
 8000358:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800035c:	fa1f f885 	uxth.w	r8, r5
 8000360:	2701      	movs	r7, #1
 8000362:	fbb1 fcfe 	udiv	ip, r1, lr
 8000366:	0c23      	lsrs	r3, r4, #16
 8000368:	fb0e 111c 	mls	r1, lr, ip, r1
 800036c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000370:	fb08 f10c 	mul.w	r1, r8, ip
 8000374:	4299      	cmp	r1, r3
 8000376:	d907      	bls.n	8000388 <__udivmoddi4+0x124>
 8000378:	18eb      	adds	r3, r5, r3
 800037a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800037e:	d202      	bcs.n	8000386 <__udivmoddi4+0x122>
 8000380:	4299      	cmp	r1, r3
 8000382:	f200 80cd 	bhi.w	8000520 <__udivmoddi4+0x2bc>
 8000386:	4684      	mov	ip, r0
 8000388:	1a59      	subs	r1, r3, r1
 800038a:	b2a3      	uxth	r3, r4
 800038c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000390:	fb0e 1410 	mls	r4, lr, r0, r1
 8000394:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000398:	fb08 f800 	mul.w	r8, r8, r0
 800039c:	45a0      	cmp	r8, r4
 800039e:	d907      	bls.n	80003b0 <__udivmoddi4+0x14c>
 80003a0:	192c      	adds	r4, r5, r4
 80003a2:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a6:	d202      	bcs.n	80003ae <__udivmoddi4+0x14a>
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	f200 80b6 	bhi.w	800051a <__udivmoddi4+0x2b6>
 80003ae:	4618      	mov	r0, r3
 80003b0:	eba4 0408 	sub.w	r4, r4, r8
 80003b4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b8:	e79f      	b.n	80002fa <__udivmoddi4+0x96>
 80003ba:	f1c7 0c20 	rsb	ip, r7, #32
 80003be:	40bb      	lsls	r3, r7
 80003c0:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003c4:	ea4e 0e03 	orr.w	lr, lr, r3
 80003c8:	fa01 f407 	lsl.w	r4, r1, r7
 80003cc:	fa20 f50c 	lsr.w	r5, r0, ip
 80003d0:	fa21 f30c 	lsr.w	r3, r1, ip
 80003d4:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003d8:	4325      	orrs	r5, r4
 80003da:	fbb3 f9f8 	udiv	r9, r3, r8
 80003de:	0c2c      	lsrs	r4, r5, #16
 80003e0:	fb08 3319 	mls	r3, r8, r9, r3
 80003e4:	fa1f fa8e 	uxth.w	sl, lr
 80003e8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003ec:	fb09 f40a 	mul.w	r4, r9, sl
 80003f0:	429c      	cmp	r4, r3
 80003f2:	fa02 f207 	lsl.w	r2, r2, r7
 80003f6:	fa00 f107 	lsl.w	r1, r0, r7
 80003fa:	d90b      	bls.n	8000414 <__udivmoddi4+0x1b0>
 80003fc:	eb1e 0303 	adds.w	r3, lr, r3
 8000400:	f109 30ff 	add.w	r0, r9, #4294967295
 8000404:	f080 8087 	bcs.w	8000516 <__udivmoddi4+0x2b2>
 8000408:	429c      	cmp	r4, r3
 800040a:	f240 8084 	bls.w	8000516 <__udivmoddi4+0x2b2>
 800040e:	f1a9 0902 	sub.w	r9, r9, #2
 8000412:	4473      	add	r3, lr
 8000414:	1b1b      	subs	r3, r3, r4
 8000416:	b2ad      	uxth	r5, r5
 8000418:	fbb3 f0f8 	udiv	r0, r3, r8
 800041c:	fb08 3310 	mls	r3, r8, r0, r3
 8000420:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000424:	fb00 fa0a 	mul.w	sl, r0, sl
 8000428:	45a2      	cmp	sl, r4
 800042a:	d908      	bls.n	800043e <__udivmoddi4+0x1da>
 800042c:	eb1e 0404 	adds.w	r4, lr, r4
 8000430:	f100 33ff 	add.w	r3, r0, #4294967295
 8000434:	d26b      	bcs.n	800050e <__udivmoddi4+0x2aa>
 8000436:	45a2      	cmp	sl, r4
 8000438:	d969      	bls.n	800050e <__udivmoddi4+0x2aa>
 800043a:	3802      	subs	r0, #2
 800043c:	4474      	add	r4, lr
 800043e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000442:	fba0 8902 	umull	r8, r9, r0, r2
 8000446:	eba4 040a 	sub.w	r4, r4, sl
 800044a:	454c      	cmp	r4, r9
 800044c:	46c2      	mov	sl, r8
 800044e:	464b      	mov	r3, r9
 8000450:	d354      	bcc.n	80004fc <__udivmoddi4+0x298>
 8000452:	d051      	beq.n	80004f8 <__udivmoddi4+0x294>
 8000454:	2e00      	cmp	r6, #0
 8000456:	d069      	beq.n	800052c <__udivmoddi4+0x2c8>
 8000458:	ebb1 050a 	subs.w	r5, r1, sl
 800045c:	eb64 0403 	sbc.w	r4, r4, r3
 8000460:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000464:	40fd      	lsrs	r5, r7
 8000466:	40fc      	lsrs	r4, r7
 8000468:	ea4c 0505 	orr.w	r5, ip, r5
 800046c:	e9c6 5400 	strd	r5, r4, [r6]
 8000470:	2700      	movs	r7, #0
 8000472:	e747      	b.n	8000304 <__udivmoddi4+0xa0>
 8000474:	f1c2 0320 	rsb	r3, r2, #32
 8000478:	fa20 f703 	lsr.w	r7, r0, r3
 800047c:	4095      	lsls	r5, r2
 800047e:	fa01 f002 	lsl.w	r0, r1, r2
 8000482:	fa21 f303 	lsr.w	r3, r1, r3
 8000486:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800048a:	4338      	orrs	r0, r7
 800048c:	0c01      	lsrs	r1, r0, #16
 800048e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000492:	fa1f f885 	uxth.w	r8, r5
 8000496:	fb0e 3317 	mls	r3, lr, r7, r3
 800049a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049e:	fb07 f308 	mul.w	r3, r7, r8
 80004a2:	428b      	cmp	r3, r1
 80004a4:	fa04 f402 	lsl.w	r4, r4, r2
 80004a8:	d907      	bls.n	80004ba <__udivmoddi4+0x256>
 80004aa:	1869      	adds	r1, r5, r1
 80004ac:	f107 3cff 	add.w	ip, r7, #4294967295
 80004b0:	d22f      	bcs.n	8000512 <__udivmoddi4+0x2ae>
 80004b2:	428b      	cmp	r3, r1
 80004b4:	d92d      	bls.n	8000512 <__udivmoddi4+0x2ae>
 80004b6:	3f02      	subs	r7, #2
 80004b8:	4429      	add	r1, r5
 80004ba:	1acb      	subs	r3, r1, r3
 80004bc:	b281      	uxth	r1, r0
 80004be:	fbb3 f0fe 	udiv	r0, r3, lr
 80004c2:	fb0e 3310 	mls	r3, lr, r0, r3
 80004c6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ca:	fb00 f308 	mul.w	r3, r0, r8
 80004ce:	428b      	cmp	r3, r1
 80004d0:	d907      	bls.n	80004e2 <__udivmoddi4+0x27e>
 80004d2:	1869      	adds	r1, r5, r1
 80004d4:	f100 3cff 	add.w	ip, r0, #4294967295
 80004d8:	d217      	bcs.n	800050a <__udivmoddi4+0x2a6>
 80004da:	428b      	cmp	r3, r1
 80004dc:	d915      	bls.n	800050a <__udivmoddi4+0x2a6>
 80004de:	3802      	subs	r0, #2
 80004e0:	4429      	add	r1, r5
 80004e2:	1ac9      	subs	r1, r1, r3
 80004e4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004e8:	e73b      	b.n	8000362 <__udivmoddi4+0xfe>
 80004ea:	4637      	mov	r7, r6
 80004ec:	4630      	mov	r0, r6
 80004ee:	e709      	b.n	8000304 <__udivmoddi4+0xa0>
 80004f0:	4607      	mov	r7, r0
 80004f2:	e6e7      	b.n	80002c4 <__udivmoddi4+0x60>
 80004f4:	4618      	mov	r0, r3
 80004f6:	e6fb      	b.n	80002f0 <__udivmoddi4+0x8c>
 80004f8:	4541      	cmp	r1, r8
 80004fa:	d2ab      	bcs.n	8000454 <__udivmoddi4+0x1f0>
 80004fc:	ebb8 0a02 	subs.w	sl, r8, r2
 8000500:	eb69 020e 	sbc.w	r2, r9, lr
 8000504:	3801      	subs	r0, #1
 8000506:	4613      	mov	r3, r2
 8000508:	e7a4      	b.n	8000454 <__udivmoddi4+0x1f0>
 800050a:	4660      	mov	r0, ip
 800050c:	e7e9      	b.n	80004e2 <__udivmoddi4+0x27e>
 800050e:	4618      	mov	r0, r3
 8000510:	e795      	b.n	800043e <__udivmoddi4+0x1da>
 8000512:	4667      	mov	r7, ip
 8000514:	e7d1      	b.n	80004ba <__udivmoddi4+0x256>
 8000516:	4681      	mov	r9, r0
 8000518:	e77c      	b.n	8000414 <__udivmoddi4+0x1b0>
 800051a:	3802      	subs	r0, #2
 800051c:	442c      	add	r4, r5
 800051e:	e747      	b.n	80003b0 <__udivmoddi4+0x14c>
 8000520:	f1ac 0c02 	sub.w	ip, ip, #2
 8000524:	442b      	add	r3, r5
 8000526:	e72f      	b.n	8000388 <__udivmoddi4+0x124>
 8000528:	4638      	mov	r0, r7
 800052a:	e708      	b.n	800033e <__udivmoddi4+0xda>
 800052c:	4637      	mov	r7, r6
 800052e:	e6e9      	b.n	8000304 <__udivmoddi4+0xa0>

08000530 <__aeabi_idiv0>:
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop

08000534 <led_effect_stop>:
 *      Author: rohan
 */

#include "main.h"

void led_effect_stop(void){
 8000534:	b580      	push	{r7, lr}
 8000536:	b084      	sub	sp, #16
 8000538:	af02      	add	r7, sp, #8

	for(int i=0;i<4;i++){
 800053a:	2300      	movs	r3, #0
 800053c:	607b      	str	r3, [r7, #4]
 800053e:	e00e      	b.n	800055e <led_effect_stop+0x2a>
		xTimerStop(handle_led_timer[i], portMAX_DELAY);
 8000540:	4a0a      	ldr	r2, [pc, #40]	; (800056c <led_effect_stop+0x38>)
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000548:	f04f 33ff 	mov.w	r3, #4294967295
 800054c:	9300      	str	r3, [sp, #0]
 800054e:	2300      	movs	r3, #0
 8000550:	2200      	movs	r2, #0
 8000552:	2103      	movs	r1, #3
 8000554:	f005 fb5e 	bl	8005c14 <xTimerGenericCommand>
	for(int i=0;i<4;i++){
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	3301      	adds	r3, #1
 800055c:	607b      	str	r3, [r7, #4]
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	2b03      	cmp	r3, #3
 8000562:	dded      	ble.n	8000540 <led_effect_stop+0xc>
	}


}
 8000564:	bf00      	nop
 8000566:	3708      	adds	r7, #8
 8000568:	46bd      	mov	sp, r7
 800056a:	bd80      	pop	{r7, pc}
 800056c:	20012da4 	.word	0x20012da4

08000570 <led_effect>:

void led_effect(int n){
 8000570:	b590      	push	{r4, r7, lr}
 8000572:	b085      	sub	sp, #20
 8000574:	af02      	add	r7, sp, #8
 8000576:	6078      	str	r0, [r7, #4]

	led_effect_stop();
 8000578:	f7ff ffdc 	bl	8000534 <led_effect_stop>
	xTimerStart(handle_led_timer[n-1], portMAX_DELAY);
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	3b01      	subs	r3, #1
 8000580:	4a08      	ldr	r2, [pc, #32]	; (80005a4 <led_effect+0x34>)
 8000582:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8000586:	f004 fc5b 	bl	8004e40 <xTaskGetTickCount>
 800058a:	4602      	mov	r2, r0
 800058c:	f04f 33ff 	mov.w	r3, #4294967295
 8000590:	9300      	str	r3, [sp, #0]
 8000592:	2300      	movs	r3, #0
 8000594:	2101      	movs	r1, #1
 8000596:	4620      	mov	r0, r4
 8000598:	f005 fb3c 	bl	8005c14 <xTimerGenericCommand>

}
 800059c:	bf00      	nop
 800059e:	370c      	adds	r7, #12
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd90      	pop	{r4, r7, pc}
 80005a4:	20012da4 	.word	0x20012da4

080005a8 <LED_effect>:

void LED_effect(){
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0

	static int flag = 1;

	(flag ^= 1) ? HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET) : HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80005ac:	4b0b      	ldr	r3, [pc, #44]	; (80005dc <LED_effect+0x34>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	f083 0301 	eor.w	r3, r3, #1
 80005b4:	4a09      	ldr	r2, [pc, #36]	; (80005dc <LED_effect+0x34>)
 80005b6:	6013      	str	r3, [r2, #0]
 80005b8:	4b08      	ldr	r3, [pc, #32]	; (80005dc <LED_effect+0x34>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d005      	beq.n	80005cc <LED_effect+0x24>
 80005c0:	2200      	movs	r2, #0
 80005c2:	2120      	movs	r1, #32
 80005c4:	4806      	ldr	r0, [pc, #24]	; (80005e0 <LED_effect+0x38>)
 80005c6:	f001 f8c7 	bl	8001758 <HAL_GPIO_WritePin>

}
 80005ca:	e004      	b.n	80005d6 <LED_effect+0x2e>
	(flag ^= 1) ? HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET) : HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80005cc:	2201      	movs	r2, #1
 80005ce:	2120      	movs	r1, #32
 80005d0:	4803      	ldr	r0, [pc, #12]	; (80005e0 <LED_effect+0x38>)
 80005d2:	f001 f8c1 	bl	8001758 <HAL_GPIO_WritePin>
}
 80005d6:	bf00      	nop
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	bf00      	nop
 80005dc:	20000000 	.word	0x20000000
 80005e0:	40020000 	.word	0x40020000

080005e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b08c      	sub	sp, #48	; 0x30
 80005e8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ea:	f000 fddd 	bl	80011a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ee:	f000 f905 	bl	80007fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005f2:	f000 f9e5 	bl	80009c0 <MX_GPIO_Init>
  MX_RTC_Init();
 80005f6:	f000 f993 	bl	8000920 <MX_RTC_Init>
  MX_USART2_UART_Init();
 80005fa:	f000 f9b7 	bl	800096c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  	status = xTaskCreate(menu_task, "menu_task", 250, NULL, 2, &handle_menu_task);
 80005fe:	4b67      	ldr	r3, [pc, #412]	; (800079c <main+0x1b8>)
 8000600:	9301      	str	r3, [sp, #4]
 8000602:	2302      	movs	r3, #2
 8000604:	9300      	str	r3, [sp, #0]
 8000606:	2300      	movs	r3, #0
 8000608:	22fa      	movs	r2, #250	; 0xfa
 800060a:	4965      	ldr	r1, [pc, #404]	; (80007a0 <main+0x1bc>)
 800060c:	4865      	ldr	r0, [pc, #404]	; (80007a4 <main+0x1c0>)
 800060e:	f004 f9d9 	bl	80049c4 <xTaskCreate>
 8000612:	6238      	str	r0, [r7, #32]
	configASSERT(status == pdPASS);
 8000614:	6a3b      	ldr	r3, [r7, #32]
 8000616:	2b01      	cmp	r3, #1
 8000618:	d009      	beq.n	800062e <main+0x4a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 800061a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800061e:	f383 8811 	msr	BASEPRI, r3
 8000622:	f3bf 8f6f 	isb	sy
 8000626:	f3bf 8f4f 	dsb	sy
 800062a:	61fb      	str	r3, [r7, #28]
 800062c:	e7fe      	b.n	800062c <main+0x48>

	status = xTaskCreate(cmd_handler_task, "cmd_task", 250, NULL, 2, &handle_cmd_task);
 800062e:	4b5e      	ldr	r3, [pc, #376]	; (80007a8 <main+0x1c4>)
 8000630:	9301      	str	r3, [sp, #4]
 8000632:	2302      	movs	r3, #2
 8000634:	9300      	str	r3, [sp, #0]
 8000636:	2300      	movs	r3, #0
 8000638:	22fa      	movs	r2, #250	; 0xfa
 800063a:	495c      	ldr	r1, [pc, #368]	; (80007ac <main+0x1c8>)
 800063c:	485c      	ldr	r0, [pc, #368]	; (80007b0 <main+0x1cc>)
 800063e:	f004 f9c1 	bl	80049c4 <xTaskCreate>
 8000642:	6238      	str	r0, [r7, #32]
	configASSERT(status == pdPASS);
 8000644:	6a3b      	ldr	r3, [r7, #32]
 8000646:	2b01      	cmp	r3, #1
 8000648:	d009      	beq.n	800065e <main+0x7a>
 800064a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800064e:	f383 8811 	msr	BASEPRI, r3
 8000652:	f3bf 8f6f 	isb	sy
 8000656:	f3bf 8f4f 	dsb	sy
 800065a:	61bb      	str	r3, [r7, #24]
 800065c:	e7fe      	b.n	800065c <main+0x78>

	status = xTaskCreate(print_task, "print_task", 250, NULL, 2, &handle_print_task);
 800065e:	4b55      	ldr	r3, [pc, #340]	; (80007b4 <main+0x1d0>)
 8000660:	9301      	str	r3, [sp, #4]
 8000662:	2302      	movs	r3, #2
 8000664:	9300      	str	r3, [sp, #0]
 8000666:	2300      	movs	r3, #0
 8000668:	22fa      	movs	r2, #250	; 0xfa
 800066a:	4953      	ldr	r1, [pc, #332]	; (80007b8 <main+0x1d4>)
 800066c:	4853      	ldr	r0, [pc, #332]	; (80007bc <main+0x1d8>)
 800066e:	f004 f9a9 	bl	80049c4 <xTaskCreate>
 8000672:	6238      	str	r0, [r7, #32]
	configASSERT(status == pdPASS);
 8000674:	6a3b      	ldr	r3, [r7, #32]
 8000676:	2b01      	cmp	r3, #1
 8000678:	d009      	beq.n	800068e <main+0xaa>
 800067a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800067e:	f383 8811 	msr	BASEPRI, r3
 8000682:	f3bf 8f6f 	isb	sy
 8000686:	f3bf 8f4f 	dsb	sy
 800068a:	617b      	str	r3, [r7, #20]
 800068c:	e7fe      	b.n	800068c <main+0xa8>

	status = xTaskCreate(led_task, "led_task", 250, NULL, 2, &handle_led_task);
 800068e:	4b4c      	ldr	r3, [pc, #304]	; (80007c0 <main+0x1dc>)
 8000690:	9301      	str	r3, [sp, #4]
 8000692:	2302      	movs	r3, #2
 8000694:	9300      	str	r3, [sp, #0]
 8000696:	2300      	movs	r3, #0
 8000698:	22fa      	movs	r2, #250	; 0xfa
 800069a:	494a      	ldr	r1, [pc, #296]	; (80007c4 <main+0x1e0>)
 800069c:	484a      	ldr	r0, [pc, #296]	; (80007c8 <main+0x1e4>)
 800069e:	f004 f991 	bl	80049c4 <xTaskCreate>
 80006a2:	6238      	str	r0, [r7, #32]
	configASSERT(status == pdPASS);
 80006a4:	6a3b      	ldr	r3, [r7, #32]
 80006a6:	2b01      	cmp	r3, #1
 80006a8:	d009      	beq.n	80006be <main+0xda>
 80006aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80006ae:	f383 8811 	msr	BASEPRI, r3
 80006b2:	f3bf 8f6f 	isb	sy
 80006b6:	f3bf 8f4f 	dsb	sy
 80006ba:	613b      	str	r3, [r7, #16]
 80006bc:	e7fe      	b.n	80006bc <main+0xd8>

	status = xTaskCreate(rtc_task, "rtc_task", 250, NULL, 2, &handle_rtc_task);
 80006be:	4b43      	ldr	r3, [pc, #268]	; (80007cc <main+0x1e8>)
 80006c0:	9301      	str	r3, [sp, #4]
 80006c2:	2302      	movs	r3, #2
 80006c4:	9300      	str	r3, [sp, #0]
 80006c6:	2300      	movs	r3, #0
 80006c8:	22fa      	movs	r2, #250	; 0xfa
 80006ca:	4941      	ldr	r1, [pc, #260]	; (80007d0 <main+0x1ec>)
 80006cc:	4841      	ldr	r0, [pc, #260]	; (80007d4 <main+0x1f0>)
 80006ce:	f004 f979 	bl	80049c4 <xTaskCreate>
 80006d2:	6238      	str	r0, [r7, #32]
	configASSERT(status == pdPASS);
 80006d4:	6a3b      	ldr	r3, [r7, #32]
 80006d6:	2b01      	cmp	r3, #1
 80006d8:	d009      	beq.n	80006ee <main+0x10a>
 80006da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80006de:	f383 8811 	msr	BASEPRI, r3
 80006e2:	f3bf 8f6f 	isb	sy
 80006e6:	f3bf 8f4f 	dsb	sy
 80006ea:	60fb      	str	r3, [r7, #12]
 80006ec:	e7fe      	b.n	80006ec <main+0x108>

	q_data = xQueueCreate(10, sizeof(char));
 80006ee:	2200      	movs	r2, #0
 80006f0:	2101      	movs	r1, #1
 80006f2:	200a      	movs	r0, #10
 80006f4:	f003 fc30 	bl	8003f58 <xQueueGenericCreate>
 80006f8:	4602      	mov	r2, r0
 80006fa:	4b37      	ldr	r3, [pc, #220]	; (80007d8 <main+0x1f4>)
 80006fc:	601a      	str	r2, [r3, #0]
	configASSERT(q_data != NULL);
 80006fe:	4b36      	ldr	r3, [pc, #216]	; (80007d8 <main+0x1f4>)
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	2b00      	cmp	r3, #0
 8000704:	d109      	bne.n	800071a <main+0x136>
 8000706:	f04f 0350 	mov.w	r3, #80	; 0x50
 800070a:	f383 8811 	msr	BASEPRI, r3
 800070e:	f3bf 8f6f 	isb	sy
 8000712:	f3bf 8f4f 	dsb	sy
 8000716:	60bb      	str	r3, [r7, #8]
 8000718:	e7fe      	b.n	8000718 <main+0x134>

	q_print = xQueueCreate(10, sizeof(size_t));
 800071a:	2200      	movs	r2, #0
 800071c:	2104      	movs	r1, #4
 800071e:	200a      	movs	r0, #10
 8000720:	f003 fc1a 	bl	8003f58 <xQueueGenericCreate>
 8000724:	4602      	mov	r2, r0
 8000726:	4b2d      	ldr	r3, [pc, #180]	; (80007dc <main+0x1f8>)
 8000728:	601a      	str	r2, [r3, #0]
	configASSERT(q_print != NULL);
 800072a:	4b2c      	ldr	r3, [pc, #176]	; (80007dc <main+0x1f8>)
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	2b00      	cmp	r3, #0
 8000730:	d109      	bne.n	8000746 <main+0x162>
 8000732:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000736:	f383 8811 	msr	BASEPRI, r3
 800073a:	f3bf 8f6f 	isb	sy
 800073e:	f3bf 8f4f 	dsb	sy
 8000742:	607b      	str	r3, [r7, #4]
 8000744:	e7fe      	b.n	8000744 <main+0x160>

	for(int i=0;i<4;i++)
 8000746:	2300      	movs	r3, #0
 8000748:	627b      	str	r3, [r7, #36]	; 0x24
 800074a:	e01b      	b.n	8000784 <main+0x1a0>
		handle_led_timer[i] = xTimerCreate("led_timer", pdMS_TO_TICKS(500+i*500), pdTRUE, (void*)(i+1), led_effect_callback);
 800074c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800074e:	3301      	adds	r3, #1
 8000750:	4a23      	ldr	r2, [pc, #140]	; (80007e0 <main+0x1fc>)
 8000752:	fb02 f303 	mul.w	r3, r2, r3
 8000756:	461a      	mov	r2, r3
 8000758:	4b22      	ldr	r3, [pc, #136]	; (80007e4 <main+0x200>)
 800075a:	fba3 2302 	umull	r2, r3, r3, r2
 800075e:	0999      	lsrs	r1, r3, #6
 8000760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000762:	3301      	adds	r3, #1
 8000764:	461a      	mov	r2, r3
 8000766:	4b20      	ldr	r3, [pc, #128]	; (80007e8 <main+0x204>)
 8000768:	9300      	str	r3, [sp, #0]
 800076a:	4613      	mov	r3, r2
 800076c:	2201      	movs	r2, #1
 800076e:	481f      	ldr	r0, [pc, #124]	; (80007ec <main+0x208>)
 8000770:	f005 f9f4 	bl	8005b5c <xTimerCreate>
 8000774:	4601      	mov	r1, r0
 8000776:	4a1e      	ldr	r2, [pc, #120]	; (80007f0 <main+0x20c>)
 8000778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800077a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i=0;i<4;i++)
 800077e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000780:	3301      	adds	r3, #1
 8000782:	627b      	str	r3, [r7, #36]	; 0x24
 8000784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000786:	2b03      	cmp	r3, #3
 8000788:	dde0      	ble.n	800074c <main+0x168>

	HAL_UART_Receive_IT(&huart2, (uint8_t*)&user_data, 1);
 800078a:	2201      	movs	r2, #1
 800078c:	4919      	ldr	r1, [pc, #100]	; (80007f4 <main+0x210>)
 800078e:	481a      	ldr	r0, [pc, #104]	; (80007f8 <main+0x214>)
 8000790:	f002 fc74 	bl	800307c <HAL_UART_Receive_IT>

	vTaskStartScheduler();
 8000794:	f004 fa5a 	bl	8004c4c <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000798:	e7fe      	b.n	8000798 <main+0x1b4>
 800079a:	bf00      	nop
 800079c:	20012dc0 	.word	0x20012dc0
 80007a0:	08006acc 	.word	0x08006acc
 80007a4:	08000dd5 	.word	0x08000dd5
 80007a8:	20012db8 	.word	0x20012db8
 80007ac:	08006ad8 	.word	0x08006ad8
 80007b0:	08000eb1 	.word	0x08000eb1
 80007b4:	20012de8 	.word	0x20012de8
 80007b8:	08006ae4 	.word	0x08006ae4
 80007bc:	08000fdd 	.word	0x08000fdd
 80007c0:	20012dec 	.word	0x20012dec
 80007c4:	08006af0 	.word	0x08006af0
 80007c8:	08001029 	.word	0x08001029
 80007cc:	20012db4 	.word	0x20012db4
 80007d0:	08006afc 	.word	0x08006afc
 80007d4:	0800101d 	.word	0x0800101d
 80007d8:	20012dbc 	.word	0x20012dbc
 80007dc:	20012dc4 	.word	0x20012dc4
 80007e0:	0007a120 	.word	0x0007a120
 80007e4:	10624dd3 	.word	0x10624dd3
 80007e8:	08000aa1 	.word	0x08000aa1
 80007ec:	08006b08 	.word	0x08006b08
 80007f0:	20012da4 	.word	0x20012da4
 80007f4:	20012df0 	.word	0x20012df0
 80007f8:	20012df4 	.word	0x20012df4

080007fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b0ac      	sub	sp, #176	; 0xb0
 8000800:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000802:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000806:	2234      	movs	r2, #52	; 0x34
 8000808:	2100      	movs	r1, #0
 800080a:	4618      	mov	r0, r3
 800080c:	f006 f949 	bl	8006aa2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000810:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000814:	2200      	movs	r2, #0
 8000816:	601a      	str	r2, [r3, #0]
 8000818:	605a      	str	r2, [r3, #4]
 800081a:	609a      	str	r2, [r3, #8]
 800081c:	60da      	str	r2, [r3, #12]
 800081e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000820:	f107 030c 	add.w	r3, r7, #12
 8000824:	225c      	movs	r2, #92	; 0x5c
 8000826:	2100      	movs	r1, #0
 8000828:	4618      	mov	r0, r3
 800082a:	f006 f93a 	bl	8006aa2 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800082e:	2300      	movs	r3, #0
 8000830:	60bb      	str	r3, [r7, #8]
 8000832:	4b39      	ldr	r3, [pc, #228]	; (8000918 <SystemClock_Config+0x11c>)
 8000834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000836:	4a38      	ldr	r2, [pc, #224]	; (8000918 <SystemClock_Config+0x11c>)
 8000838:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800083c:	6413      	str	r3, [r2, #64]	; 0x40
 800083e:	4b36      	ldr	r3, [pc, #216]	; (8000918 <SystemClock_Config+0x11c>)
 8000840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000842:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000846:	60bb      	str	r3, [r7, #8]
 8000848:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800084a:	2300      	movs	r3, #0
 800084c:	607b      	str	r3, [r7, #4]
 800084e:	4b33      	ldr	r3, [pc, #204]	; (800091c <SystemClock_Config+0x120>)
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000856:	4a31      	ldr	r2, [pc, #196]	; (800091c <SystemClock_Config+0x120>)
 8000858:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800085c:	6013      	str	r3, [r2, #0]
 800085e:	4b2f      	ldr	r3, [pc, #188]	; (800091c <SystemClock_Config+0x120>)
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000866:	607b      	str	r3, [r7, #4]
 8000868:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800086a:	230a      	movs	r3, #10
 800086c:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.LSEState = RCC_LSE_OFF;
 800086e:	2300      	movs	r3, #0
 8000870:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000874:	2301      	movs	r3, #1
 8000876:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800087a:	2310      	movs	r3, #16
 800087c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000880:	2301      	movs	r3, #1
 8000882:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000886:	2302      	movs	r3, #2
 8000888:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800088c:	2300      	movs	r3, #0
 800088e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000892:	2310      	movs	r3, #16
 8000894:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000898:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800089c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80008a0:	2304      	movs	r3, #4
 80008a2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80008a6:	2302      	movs	r3, #2
 80008a8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008ac:	2302      	movs	r3, #2
 80008ae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008b2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80008b6:	4618      	mov	r0, r3
 80008b8:	f001 fd7e 	bl	80023b8 <HAL_RCC_OscConfig>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d001      	beq.n	80008c6 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80008c2:	f000 f953 	bl	8000b6c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008c6:	230f      	movs	r3, #15
 80008c8:	66bb      	str	r3, [r7, #104]	; 0x68
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008ca:	2302      	movs	r3, #2
 80008cc:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008ce:	2300      	movs	r3, #0
 80008d0:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008d6:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008d8:	2300      	movs	r3, #0
 80008da:	67bb      	str	r3, [r7, #120]	; 0x78

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008dc:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80008e0:	2102      	movs	r1, #2
 80008e2:	4618      	mov	r0, r3
 80008e4:	f000 ff52 	bl	800178c <HAL_RCC_ClockConfig>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 80008ee:	f000 f93d 	bl	8000b6c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80008f2:	2320      	movs	r3, #32
 80008f4:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80008f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80008fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80008fc:	f107 030c 	add.w	r3, r7, #12
 8000900:	4618      	mov	r0, r3
 8000902:	f001 f88f 	bl	8001a24 <HAL_RCCEx_PeriphCLKConfig>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d001      	beq.n	8000910 <SystemClock_Config+0x114>
  {
    Error_Handler();
 800090c:	f000 f92e 	bl	8000b6c <Error_Handler>
  }
}
 8000910:	bf00      	nop
 8000912:	37b0      	adds	r7, #176	; 0xb0
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}
 8000918:	40023800 	.word	0x40023800
 800091c:	40007000 	.word	0x40007000

08000920 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000924:	4b0f      	ldr	r3, [pc, #60]	; (8000964 <MX_RTC_Init+0x44>)
 8000926:	4a10      	ldr	r2, [pc, #64]	; (8000968 <MX_RTC_Init+0x48>)
 8000928:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 800092a:	4b0e      	ldr	r3, [pc, #56]	; (8000964 <MX_RTC_Init+0x44>)
 800092c:	2240      	movs	r2, #64	; 0x40
 800092e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000930:	4b0c      	ldr	r3, [pc, #48]	; (8000964 <MX_RTC_Init+0x44>)
 8000932:	227f      	movs	r2, #127	; 0x7f
 8000934:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000936:	4b0b      	ldr	r3, [pc, #44]	; (8000964 <MX_RTC_Init+0x44>)
 8000938:	22ff      	movs	r2, #255	; 0xff
 800093a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800093c:	4b09      	ldr	r3, [pc, #36]	; (8000964 <MX_RTC_Init+0x44>)
 800093e:	2200      	movs	r2, #0
 8000940:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000942:	4b08      	ldr	r3, [pc, #32]	; (8000964 <MX_RTC_Init+0x44>)
 8000944:	2200      	movs	r2, #0
 8000946:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000948:	4b06      	ldr	r3, [pc, #24]	; (8000964 <MX_RTC_Init+0x44>)
 800094a:	2200      	movs	r2, #0
 800094c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800094e:	4805      	ldr	r0, [pc, #20]	; (8000964 <MX_RTC_Init+0x44>)
 8000950:	f001 ff8c 	bl	800286c <HAL_RTC_Init>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d001      	beq.n	800095e <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 800095a:	f000 f907 	bl	8000b6c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800095e:	bf00      	nop
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	20012dc8 	.word	0x20012dc8
 8000968:	40002800 	.word	0x40002800

0800096c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000970:	4b11      	ldr	r3, [pc, #68]	; (80009b8 <MX_USART2_UART_Init+0x4c>)
 8000972:	4a12      	ldr	r2, [pc, #72]	; (80009bc <MX_USART2_UART_Init+0x50>)
 8000974:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000976:	4b10      	ldr	r3, [pc, #64]	; (80009b8 <MX_USART2_UART_Init+0x4c>)
 8000978:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800097c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800097e:	4b0e      	ldr	r3, [pc, #56]	; (80009b8 <MX_USART2_UART_Init+0x4c>)
 8000980:	2200      	movs	r2, #0
 8000982:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000984:	4b0c      	ldr	r3, [pc, #48]	; (80009b8 <MX_USART2_UART_Init+0x4c>)
 8000986:	2200      	movs	r2, #0
 8000988:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800098a:	4b0b      	ldr	r3, [pc, #44]	; (80009b8 <MX_USART2_UART_Init+0x4c>)
 800098c:	2200      	movs	r2, #0
 800098e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000990:	4b09      	ldr	r3, [pc, #36]	; (80009b8 <MX_USART2_UART_Init+0x4c>)
 8000992:	220c      	movs	r2, #12
 8000994:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000996:	4b08      	ldr	r3, [pc, #32]	; (80009b8 <MX_USART2_UART_Init+0x4c>)
 8000998:	2200      	movs	r2, #0
 800099a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800099c:	4b06      	ldr	r3, [pc, #24]	; (80009b8 <MX_USART2_UART_Init+0x4c>)
 800099e:	2200      	movs	r2, #0
 80009a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009a2:	4805      	ldr	r0, [pc, #20]	; (80009b8 <MX_USART2_UART_Init+0x4c>)
 80009a4:	f002 fa84 	bl	8002eb0 <HAL_UART_Init>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d001      	beq.n	80009b2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80009ae:	f000 f8dd 	bl	8000b6c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009b2:	bf00      	nop
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	20012df4 	.word	0x20012df4
 80009bc:	40004400 	.word	0x40004400

080009c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b08a      	sub	sp, #40	; 0x28
 80009c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c6:	f107 0314 	add.w	r3, r7, #20
 80009ca:	2200      	movs	r2, #0
 80009cc:	601a      	str	r2, [r3, #0]
 80009ce:	605a      	str	r2, [r3, #4]
 80009d0:	609a      	str	r2, [r3, #8]
 80009d2:	60da      	str	r2, [r3, #12]
 80009d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009d6:	2300      	movs	r3, #0
 80009d8:	613b      	str	r3, [r7, #16]
 80009da:	4b2d      	ldr	r3, [pc, #180]	; (8000a90 <MX_GPIO_Init+0xd0>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009de:	4a2c      	ldr	r2, [pc, #176]	; (8000a90 <MX_GPIO_Init+0xd0>)
 80009e0:	f043 0304 	orr.w	r3, r3, #4
 80009e4:	6313      	str	r3, [r2, #48]	; 0x30
 80009e6:	4b2a      	ldr	r3, [pc, #168]	; (8000a90 <MX_GPIO_Init+0xd0>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ea:	f003 0304 	and.w	r3, r3, #4
 80009ee:	613b      	str	r3, [r7, #16]
 80009f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009f2:	2300      	movs	r3, #0
 80009f4:	60fb      	str	r3, [r7, #12]
 80009f6:	4b26      	ldr	r3, [pc, #152]	; (8000a90 <MX_GPIO_Init+0xd0>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fa:	4a25      	ldr	r2, [pc, #148]	; (8000a90 <MX_GPIO_Init+0xd0>)
 80009fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a00:	6313      	str	r3, [r2, #48]	; 0x30
 8000a02:	4b23      	ldr	r3, [pc, #140]	; (8000a90 <MX_GPIO_Init+0xd0>)
 8000a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a0a:	60fb      	str	r3, [r7, #12]
 8000a0c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a0e:	2300      	movs	r3, #0
 8000a10:	60bb      	str	r3, [r7, #8]
 8000a12:	4b1f      	ldr	r3, [pc, #124]	; (8000a90 <MX_GPIO_Init+0xd0>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a16:	4a1e      	ldr	r2, [pc, #120]	; (8000a90 <MX_GPIO_Init+0xd0>)
 8000a18:	f043 0301 	orr.w	r3, r3, #1
 8000a1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a1e:	4b1c      	ldr	r3, [pc, #112]	; (8000a90 <MX_GPIO_Init+0xd0>)
 8000a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a22:	f003 0301 	and.w	r3, r3, #1
 8000a26:	60bb      	str	r3, [r7, #8]
 8000a28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	607b      	str	r3, [r7, #4]
 8000a2e:	4b18      	ldr	r3, [pc, #96]	; (8000a90 <MX_GPIO_Init+0xd0>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a32:	4a17      	ldr	r2, [pc, #92]	; (8000a90 <MX_GPIO_Init+0xd0>)
 8000a34:	f043 0302 	orr.w	r3, r3, #2
 8000a38:	6313      	str	r3, [r2, #48]	; 0x30
 8000a3a:	4b15      	ldr	r3, [pc, #84]	; (8000a90 <MX_GPIO_Init+0xd0>)
 8000a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3e:	f003 0302 	and.w	r3, r3, #2
 8000a42:	607b      	str	r3, [r7, #4]
 8000a44:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Buzzer_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000a46:	2200      	movs	r2, #0
 8000a48:	2121      	movs	r1, #33	; 0x21
 8000a4a:	4812      	ldr	r0, [pc, #72]	; (8000a94 <MX_GPIO_Init+0xd4>)
 8000a4c:	f000 fe84 	bl	8001758 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a50:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a56:	4b10      	ldr	r3, [pc, #64]	; (8000a98 <MX_GPIO_Init+0xd8>)
 8000a58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a5e:	f107 0314 	add.w	r3, r7, #20
 8000a62:	4619      	mov	r1, r3
 8000a64:	480d      	ldr	r0, [pc, #52]	; (8000a9c <MX_GPIO_Init+0xdc>)
 8000a66:	f000 fce5 	bl	8001434 <HAL_GPIO_Init>

  /*Configure GPIO pins : Buzzer_Pin LD2_Pin */
  GPIO_InitStruct.Pin = Buzzer_Pin|LD2_Pin;
 8000a6a:	2321      	movs	r3, #33	; 0x21
 8000a6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a6e:	2301      	movs	r3, #1
 8000a70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a72:	2300      	movs	r3, #0
 8000a74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a76:	2300      	movs	r3, #0
 8000a78:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a7a:	f107 0314 	add.w	r3, r7, #20
 8000a7e:	4619      	mov	r1, r3
 8000a80:	4804      	ldr	r0, [pc, #16]	; (8000a94 <MX_GPIO_Init+0xd4>)
 8000a82:	f000 fcd7 	bl	8001434 <HAL_GPIO_Init>

}
 8000a86:	bf00      	nop
 8000a88:	3728      	adds	r7, #40	; 0x28
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	40023800 	.word	0x40023800
 8000a94:	40020000 	.word	0x40020000
 8000a98:	10210000 	.word	0x10210000
 8000a9c:	40020800 	.word	0x40020800

08000aa0 <led_effect_callback>:

/* USER CODE BEGIN 4 */

void led_effect_callback(TimerHandle_t xTimer){
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b082      	sub	sp, #8
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
			LED_effect4();
			break;
	}
	*/

	LED_effect();
 8000aa8:	f7ff fd7e 	bl	80005a8 <LED_effect>



}
 8000aac:	bf00      	nop
 8000aae:	3708      	adds	r7, #8
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}

08000ab4 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b084      	sub	sp, #16
 8000ab8:	af02      	add	r7, sp, #8
 8000aba:	6078      	str	r0, [r7, #4]

	if(!xQueueIsQueueFullFromISR(q_data)){
 8000abc:	4b1d      	ldr	r3, [pc, #116]	; (8000b34 <HAL_UART_RxCpltCallback+0x80>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	f003 fefd 	bl	80048c0 <xQueueIsQueueFullFromISR>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d107      	bne.n	8000adc <HAL_UART_RxCpltCallback+0x28>

		xQueueSendFromISR(q_data, (void*)&user_data, NULL);
 8000acc:	4b19      	ldr	r3, [pc, #100]	; (8000b34 <HAL_UART_RxCpltCallback+0x80>)
 8000ace:	6818      	ldr	r0, [r3, #0]
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	4918      	ldr	r1, [pc, #96]	; (8000b38 <HAL_UART_RxCpltCallback+0x84>)
 8000ad6:	f003 fbb9 	bl	800424c <xQueueGenericSendFromISR>
 8000ada:	e012      	b.n	8000b02 <HAL_UART_RxCpltCallback+0x4e>

	}else{

		if(user_data == '\n'){
 8000adc:	4b16      	ldr	r3, [pc, #88]	; (8000b38 <HAL_UART_RxCpltCallback+0x84>)
 8000ade:	781b      	ldrb	r3, [r3, #0]
 8000ae0:	b2db      	uxtb	r3, r3
 8000ae2:	2b0a      	cmp	r3, #10
 8000ae4:	d10d      	bne.n	8000b02 <HAL_UART_RxCpltCallback+0x4e>
			xQueueReceiveFromISR(q_data, (void*)&dummy, NULL);
 8000ae6:	4b13      	ldr	r3, [pc, #76]	; (8000b34 <HAL_UART_RxCpltCallback+0x80>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	2200      	movs	r2, #0
 8000aec:	4913      	ldr	r1, [pc, #76]	; (8000b3c <HAL_UART_RxCpltCallback+0x88>)
 8000aee:	4618      	mov	r0, r3
 8000af0:	f003 fd2e 	bl	8004550 <xQueueReceiveFromISR>
			xQueueSendFromISR(q_data, (void*)&user_data, NULL);
 8000af4:	4b0f      	ldr	r3, [pc, #60]	; (8000b34 <HAL_UART_RxCpltCallback+0x80>)
 8000af6:	6818      	ldr	r0, [r3, #0]
 8000af8:	2300      	movs	r3, #0
 8000afa:	2200      	movs	r2, #0
 8000afc:	490e      	ldr	r1, [pc, #56]	; (8000b38 <HAL_UART_RxCpltCallback+0x84>)
 8000afe:	f003 fba5 	bl	800424c <xQueueGenericSendFromISR>
		}

	}

	if(user_data == '\n'){
 8000b02:	4b0d      	ldr	r3, [pc, #52]	; (8000b38 <HAL_UART_RxCpltCallback+0x84>)
 8000b04:	781b      	ldrb	r3, [r3, #0]
 8000b06:	b2db      	uxtb	r3, r3
 8000b08:	2b0a      	cmp	r3, #10
 8000b0a:	d10a      	bne.n	8000b22 <HAL_UART_RxCpltCallback+0x6e>
		xTaskNotifyFromISR(handle_cmd_task, 0, eNoAction, NULL);
 8000b0c:	4b0c      	ldr	r3, [pc, #48]	; (8000b40 <HAL_UART_RxCpltCallback+0x8c>)
 8000b0e:	6818      	ldr	r0, [r3, #0]
 8000b10:	2300      	movs	r3, #0
 8000b12:	9301      	str	r3, [sp, #4]
 8000b14:	2300      	movs	r3, #0
 8000b16:	9300      	str	r3, [sp, #0]
 8000b18:	2300      	movs	r3, #0
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	2100      	movs	r1, #0
 8000b1e:	f004 fe87 	bl	8005830 <xTaskGenericNotifyFromISR>
	}

	HAL_UART_Receive_IT(&huart2, (uint8_t*)&user_data, 1);
 8000b22:	2201      	movs	r2, #1
 8000b24:	4904      	ldr	r1, [pc, #16]	; (8000b38 <HAL_UART_RxCpltCallback+0x84>)
 8000b26:	4807      	ldr	r0, [pc, #28]	; (8000b44 <HAL_UART_RxCpltCallback+0x90>)
 8000b28:	f002 faa8 	bl	800307c <HAL_UART_Receive_IT>
}
 8000b2c:	bf00      	nop
 8000b2e:	3708      	adds	r7, #8
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	20012dbc 	.word	0x20012dbc
 8000b38:	20012df0 	.word	0x20012df0
 8000b3c:	20012df1 	.word	0x20012df1
 8000b40:	20012db8 	.word	0x20012db8
 8000b44:	20012df4 	.word	0x20012df4

08000b48 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	4a04      	ldr	r2, [pc, #16]	; (8000b68 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b56:	4293      	cmp	r3, r2
 8000b58:	d101      	bne.n	8000b5e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b5a:	f000 fb47 	bl	80011ec <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b5e:	bf00      	nop
 8000b60:	3708      	adds	r7, #8
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	40001000 	.word	0x40001000

08000b6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000b70:	bf00      	nop
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr
	...

08000b7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	b083      	sub	sp, #12
 8000b80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b82:	2300      	movs	r3, #0
 8000b84:	607b      	str	r3, [r7, #4]
 8000b86:	4b10      	ldr	r3, [pc, #64]	; (8000bc8 <HAL_MspInit+0x4c>)
 8000b88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b8a:	4a0f      	ldr	r2, [pc, #60]	; (8000bc8 <HAL_MspInit+0x4c>)
 8000b8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b90:	6453      	str	r3, [r2, #68]	; 0x44
 8000b92:	4b0d      	ldr	r3, [pc, #52]	; (8000bc8 <HAL_MspInit+0x4c>)
 8000b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b9a:	607b      	str	r3, [r7, #4]
 8000b9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	603b      	str	r3, [r7, #0]
 8000ba2:	4b09      	ldr	r3, [pc, #36]	; (8000bc8 <HAL_MspInit+0x4c>)
 8000ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ba6:	4a08      	ldr	r2, [pc, #32]	; (8000bc8 <HAL_MspInit+0x4c>)
 8000ba8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bac:	6413      	str	r3, [r2, #64]	; 0x40
 8000bae:	4b06      	ldr	r3, [pc, #24]	; (8000bc8 <HAL_MspInit+0x4c>)
 8000bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bb6:	603b      	str	r3, [r7, #0]
 8000bb8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bba:	bf00      	nop
 8000bbc:	370c      	adds	r7, #12
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop
 8000bc8:	40023800 	.word	0x40023800

08000bcc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b083      	sub	sp, #12
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	4a05      	ldr	r2, [pc, #20]	; (8000bf0 <HAL_RTC_MspInit+0x24>)
 8000bda:	4293      	cmp	r3, r2
 8000bdc:	d102      	bne.n	8000be4 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000bde:	4b05      	ldr	r3, [pc, #20]	; (8000bf4 <HAL_RTC_MspInit+0x28>)
 8000be0:	2201      	movs	r2, #1
 8000be2:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000be4:	bf00      	nop
 8000be6:	370c      	adds	r7, #12
 8000be8:	46bd      	mov	sp, r7
 8000bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bee:	4770      	bx	lr
 8000bf0:	40002800 	.word	0x40002800
 8000bf4:	42470e3c 	.word	0x42470e3c

08000bf8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b08a      	sub	sp, #40	; 0x28
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c00:	f107 0314 	add.w	r3, r7, #20
 8000c04:	2200      	movs	r2, #0
 8000c06:	601a      	str	r2, [r3, #0]
 8000c08:	605a      	str	r2, [r3, #4]
 8000c0a:	609a      	str	r2, [r3, #8]
 8000c0c:	60da      	str	r2, [r3, #12]
 8000c0e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	4a1d      	ldr	r2, [pc, #116]	; (8000c8c <HAL_UART_MspInit+0x94>)
 8000c16:	4293      	cmp	r3, r2
 8000c18:	d133      	bne.n	8000c82 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	613b      	str	r3, [r7, #16]
 8000c1e:	4b1c      	ldr	r3, [pc, #112]	; (8000c90 <HAL_UART_MspInit+0x98>)
 8000c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c22:	4a1b      	ldr	r2, [pc, #108]	; (8000c90 <HAL_UART_MspInit+0x98>)
 8000c24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c28:	6413      	str	r3, [r2, #64]	; 0x40
 8000c2a:	4b19      	ldr	r3, [pc, #100]	; (8000c90 <HAL_UART_MspInit+0x98>)
 8000c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c32:	613b      	str	r3, [r7, #16]
 8000c34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c36:	2300      	movs	r3, #0
 8000c38:	60fb      	str	r3, [r7, #12]
 8000c3a:	4b15      	ldr	r3, [pc, #84]	; (8000c90 <HAL_UART_MspInit+0x98>)
 8000c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3e:	4a14      	ldr	r2, [pc, #80]	; (8000c90 <HAL_UART_MspInit+0x98>)
 8000c40:	f043 0301 	orr.w	r3, r3, #1
 8000c44:	6313      	str	r3, [r2, #48]	; 0x30
 8000c46:	4b12      	ldr	r3, [pc, #72]	; (8000c90 <HAL_UART_MspInit+0x98>)
 8000c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4a:	f003 0301 	and.w	r3, r3, #1
 8000c4e:	60fb      	str	r3, [r7, #12]
 8000c50:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000c52:	230c      	movs	r3, #12
 8000c54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c56:	2302      	movs	r3, #2
 8000c58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c5e:	2303      	movs	r3, #3
 8000c60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c62:	2307      	movs	r3, #7
 8000c64:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c66:	f107 0314 	add.w	r3, r7, #20
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	4809      	ldr	r0, [pc, #36]	; (8000c94 <HAL_UART_MspInit+0x9c>)
 8000c6e:	f000 fbe1 	bl	8001434 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 6, 0);
 8000c72:	2200      	movs	r2, #0
 8000c74:	2106      	movs	r1, #6
 8000c76:	2026      	movs	r0, #38	; 0x26
 8000c78:	f000 fb90 	bl	800139c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000c7c:	2026      	movs	r0, #38	; 0x26
 8000c7e:	f000 fba9 	bl	80013d4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c82:	bf00      	nop
 8000c84:	3728      	adds	r7, #40	; 0x28
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	40004400 	.word	0x40004400
 8000c90:	40023800 	.word	0x40023800
 8000c94:	40020000 	.word	0x40020000

08000c98 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b08c      	sub	sp, #48	; 0x30
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000ca8:	2200      	movs	r2, #0
 8000caa:	6879      	ldr	r1, [r7, #4]
 8000cac:	2036      	movs	r0, #54	; 0x36
 8000cae:	f000 fb75 	bl	800139c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000cb2:	2036      	movs	r0, #54	; 0x36
 8000cb4:	f000 fb8e 	bl	80013d4 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000cb8:	2300      	movs	r3, #0
 8000cba:	60fb      	str	r3, [r7, #12]
 8000cbc:	4b1f      	ldr	r3, [pc, #124]	; (8000d3c <HAL_InitTick+0xa4>)
 8000cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cc0:	4a1e      	ldr	r2, [pc, #120]	; (8000d3c <HAL_InitTick+0xa4>)
 8000cc2:	f043 0310 	orr.w	r3, r3, #16
 8000cc6:	6413      	str	r3, [r2, #64]	; 0x40
 8000cc8:	4b1c      	ldr	r3, [pc, #112]	; (8000d3c <HAL_InitTick+0xa4>)
 8000cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ccc:	f003 0310 	and.w	r3, r3, #16
 8000cd0:	60fb      	str	r3, [r7, #12]
 8000cd2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000cd4:	f107 0210 	add.w	r2, r7, #16
 8000cd8:	f107 0314 	add.w	r3, r7, #20
 8000cdc:	4611      	mov	r1, r2
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f000 fe6e 	bl	80019c0 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000ce4:	f000 fe44 	bl	8001970 <HAL_RCC_GetPCLK1Freq>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	005b      	lsls	r3, r3, #1
 8000cec:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000cee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cf0:	4a13      	ldr	r2, [pc, #76]	; (8000d40 <HAL_InitTick+0xa8>)
 8000cf2:	fba2 2303 	umull	r2, r3, r2, r3
 8000cf6:	0c9b      	lsrs	r3, r3, #18
 8000cf8:	3b01      	subs	r3, #1
 8000cfa:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000cfc:	4b11      	ldr	r3, [pc, #68]	; (8000d44 <HAL_InitTick+0xac>)
 8000cfe:	4a12      	ldr	r2, [pc, #72]	; (8000d48 <HAL_InitTick+0xb0>)
 8000d00:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8000d02:	4b10      	ldr	r3, [pc, #64]	; (8000d44 <HAL_InitTick+0xac>)
 8000d04:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d08:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000d0a:	4a0e      	ldr	r2, [pc, #56]	; (8000d44 <HAL_InitTick+0xac>)
 8000d0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d0e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000d10:	4b0c      	ldr	r3, [pc, #48]	; (8000d44 <HAL_InitTick+0xac>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d16:	4b0b      	ldr	r3, [pc, #44]	; (8000d44 <HAL_InitTick+0xac>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000d1c:	4809      	ldr	r0, [pc, #36]	; (8000d44 <HAL_InitTick+0xac>)
 8000d1e:	f001 fe8a 	bl	8002a36 <HAL_TIM_Base_Init>
 8000d22:	4603      	mov	r3, r0
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d104      	bne.n	8000d32 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000d28:	4806      	ldr	r0, [pc, #24]	; (8000d44 <HAL_InitTick+0xac>)
 8000d2a:	f001 feb9 	bl	8002aa0 <HAL_TIM_Base_Start_IT>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	e000      	b.n	8000d34 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000d32:	2301      	movs	r3, #1
}
 8000d34:	4618      	mov	r0, r3
 8000d36:	3730      	adds	r7, #48	; 0x30
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	40023800 	.word	0x40023800
 8000d40:	431bde83 	.word	0x431bde83
 8000d44:	20012e34 	.word	0x20012e34
 8000d48:	40001000 	.word	0x40001000

08000d4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000d50:	bf00      	nop
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr

08000d5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d5a:	b480      	push	{r7}
 8000d5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d5e:	e7fe      	b.n	8000d5e <HardFault_Handler+0x4>

08000d60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d64:	e7fe      	b.n	8000d64 <MemManage_Handler+0x4>

08000d66 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d66:	b480      	push	{r7}
 8000d68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d6a:	e7fe      	b.n	8000d6a <BusFault_Handler+0x4>

08000d6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d70:	e7fe      	b.n	8000d70 <UsageFault_Handler+0x4>

08000d72 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d72:	b480      	push	{r7}
 8000d74:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d76:	bf00      	nop
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7e:	4770      	bx	lr

08000d80 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000d84:	4802      	ldr	r0, [pc, #8]	; (8000d90 <USART2_IRQHandler+0x10>)
 8000d86:	f002 f9cf 	bl	8003128 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000d8a:	bf00      	nop
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	20012df4 	.word	0x20012df4

08000d94 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000d98:	4802      	ldr	r0, [pc, #8]	; (8000da4 <TIM6_DAC_IRQHandler+0x10>)
 8000d9a:	f001 fea5 	bl	8002ae8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000d9e:	bf00      	nop
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	20012e34 	.word	0x20012e34

08000da8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000dac:	4b08      	ldr	r3, [pc, #32]	; (8000dd0 <SystemInit+0x28>)
 8000dae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000db2:	4a07      	ldr	r2, [pc, #28]	; (8000dd0 <SystemInit+0x28>)
 8000db4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000db8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000dbc:	4b04      	ldr	r3, [pc, #16]	; (8000dd0 <SystemInit+0x28>)
 8000dbe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000dc2:	609a      	str	r2, [r3, #8]
#endif
}
 8000dc4:	bf00      	nop
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr
 8000dce:	bf00      	nop
 8000dd0:	e000ed00 	.word	0xe000ed00

08000dd4 <menu_task>:
int extract_command(command_t *cmd);
void process_command(command_t *cmd);

const char* msg_inv = "///Message invalid///\n";

void menu_task(void *param){
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b088      	sub	sp, #32
 8000dd8:	af02      	add	r7, sp, #8
 8000dda:	6078      	str	r0, [r7, #4]
	uint32_t cmd_addr;
	command_t *cmd;

	int option;

	const char* menu = "=====================\n"
 8000ddc:	4b2e      	ldr	r3, [pc, #184]	; (8000e98 <menu_task+0xc4>)
 8000dde:	60bb      	str	r3, [r7, #8]
						"Enter your choice here: ";



	while(1){
		xQueueSend(q_print, &menu, portMAX_DELAY);
 8000de0:	4b2e      	ldr	r3, [pc, #184]	; (8000e9c <menu_task+0xc8>)
 8000de2:	6818      	ldr	r0, [r3, #0]
 8000de4:	f107 0108 	add.w	r1, r7, #8
 8000de8:	2300      	movs	r3, #0
 8000dea:	f04f 32ff 	mov.w	r2, #4294967295
 8000dee:	f003 f933 	bl	8004058 <xQueueGenericSend>

		xTaskNotifyWait(0,0, &cmd_addr, portMAX_DELAY);
 8000df2:	f107 020c 	add.w	r2, r7, #12
 8000df6:	f04f 33ff 	mov.w	r3, #4294967295
 8000dfa:	9300      	str	r3, [sp, #0]
 8000dfc:	4613      	mov	r3, r2
 8000dfe:	2200      	movs	r2, #0
 8000e00:	2100      	movs	r1, #0
 8000e02:	2000      	movs	r0, #0
 8000e04:	f004 fbba 	bl	800557c <xTaskGenericNotifyWait>

		cmd = (command_t*)cmd_addr;
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	617b      	str	r3, [r7, #20]

		if(cmd->len == 1){
 8000e0c:	697b      	ldr	r3, [r7, #20]
 8000e0e:	7a9b      	ldrb	r3, [r3, #10]
 8000e10:	2b01      	cmp	r3, #1
 8000e12:	d12d      	bne.n	8000e70 <menu_task+0x9c>

			option = cmd->payload[0] - 48;
 8000e14:	697b      	ldr	r3, [r7, #20]
 8000e16:	781b      	ldrb	r3, [r3, #0]
 8000e18:	3b30      	subs	r3, #48	; 0x30
 8000e1a:	613b      	str	r3, [r7, #16]
			switch(option){
 8000e1c:	693b      	ldr	r3, [r7, #16]
 8000e1e:	2b01      	cmp	r3, #1
 8000e20:	d010      	beq.n	8000e44 <menu_task+0x70>
 8000e22:	2b02      	cmp	r3, #2
 8000e24:	d02d      	beq.n	8000e82 <menu_task+0xae>
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d119      	bne.n	8000e5e <menu_task+0x8a>

				case 0:
					curr_state = sLedEffect;
 8000e2a:	4b1d      	ldr	r3, [pc, #116]	; (8000ea0 <menu_task+0xcc>)
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	701a      	strb	r2, [r3, #0]
					xTaskNotify(handle_led_task, 0, eNoAction);
 8000e30:	4b1c      	ldr	r3, [pc, #112]	; (8000ea4 <menu_task+0xd0>)
 8000e32:	6818      	ldr	r0, [r3, #0]
 8000e34:	2300      	movs	r3, #0
 8000e36:	9300      	str	r3, [sp, #0]
 8000e38:	2300      	movs	r3, #0
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	2100      	movs	r1, #0
 8000e3e:	f004 fc1b 	bl	8005678 <xTaskGenericNotify>
					break;
 8000e42:	e01f      	b.n	8000e84 <menu_task+0xb0>
				case 1:
					curr_state = sRtcMenu;
 8000e44:	4b16      	ldr	r3, [pc, #88]	; (8000ea0 <menu_task+0xcc>)
 8000e46:	2202      	movs	r2, #2
 8000e48:	701a      	strb	r2, [r3, #0]
					xTaskNotify(handle_rtc_task, 0, eNoAction);
 8000e4a:	4b17      	ldr	r3, [pc, #92]	; (8000ea8 <menu_task+0xd4>)
 8000e4c:	6818      	ldr	r0, [r3, #0]
 8000e4e:	2300      	movs	r3, #0
 8000e50:	9300      	str	r3, [sp, #0]
 8000e52:	2300      	movs	r3, #0
 8000e54:	2200      	movs	r2, #0
 8000e56:	2100      	movs	r1, #0
 8000e58:	f004 fc0e 	bl	8005678 <xTaskGenericNotify>
					break;
 8000e5c:	e012      	b.n	8000e84 <menu_task+0xb0>
				case 2: //Exit implementation
					break;
				default:
					xQueueSend(q_print, &msg_inv,portMAX_DELAY);
 8000e5e:	4b0f      	ldr	r3, [pc, #60]	; (8000e9c <menu_task+0xc8>)
 8000e60:	6818      	ldr	r0, [r3, #0]
 8000e62:	2300      	movs	r3, #0
 8000e64:	f04f 32ff 	mov.w	r2, #4294967295
 8000e68:	4910      	ldr	r1, [pc, #64]	; (8000eac <menu_task+0xd8>)
 8000e6a:	f003 f8f5 	bl	8004058 <xQueueGenericSend>
					continue;
 8000e6e:	e012      	b.n	8000e96 <menu_task+0xc2>

			}
		}else{

			xQueueSend(q_print, &msg_inv, portMAX_DELAY);
 8000e70:	4b0a      	ldr	r3, [pc, #40]	; (8000e9c <menu_task+0xc8>)
 8000e72:	6818      	ldr	r0, [r3, #0]
 8000e74:	2300      	movs	r3, #0
 8000e76:	f04f 32ff 	mov.w	r2, #4294967295
 8000e7a:	490c      	ldr	r1, [pc, #48]	; (8000eac <menu_task+0xd8>)
 8000e7c:	f003 f8ec 	bl	8004058 <xQueueGenericSend>
			continue;
 8000e80:	e009      	b.n	8000e96 <menu_task+0xc2>
					break;
 8000e82:	bf00      	nop
		}

		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 8000e84:	f04f 33ff 	mov.w	r3, #4294967295
 8000e88:	9300      	str	r3, [sp, #0]
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	2100      	movs	r1, #0
 8000e90:	2000      	movs	r0, #0
 8000e92:	f004 fb73 	bl	800557c <xTaskGenericNotifyWait>
		xQueueSend(q_print, &menu, portMAX_DELAY);
 8000e96:	e7a3      	b.n	8000de0 <menu_task+0xc>
 8000e98:	08006b2c 	.word	0x08006b2c
 8000e9c:	20012dc4 	.word	0x20012dc4
 8000ea0:	20000038 	.word	0x20000038
 8000ea4:	20012dec 	.word	0x20012dec
 8000ea8:	20012db4 	.word	0x20012db4
 8000eac:	20000008 	.word	0x20000008

08000eb0 <cmd_handler_task>:



	}
}
void cmd_handler_task(void *param){
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b088      	sub	sp, #32
 8000eb4:	af02      	add	r7, sp, #8
 8000eb6:	6078      	str	r0, [r7, #4]

	BaseType_t ret;
	command_t cmd;
	while(1){

		ret = xTaskNotifyWait(0,0,NULL, portMAX_DELAY);
 8000eb8:	f04f 33ff 	mov.w	r3, #4294967295
 8000ebc:	9300      	str	r3, [sp, #0]
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	2100      	movs	r1, #0
 8000ec4:	2000      	movs	r0, #0
 8000ec6:	f004 fb59 	bl	800557c <xTaskGenericNotifyWait>
 8000eca:	6178      	str	r0, [r7, #20]
		if(ret == pdTRUE){
 8000ecc:	697b      	ldr	r3, [r7, #20]
 8000ece:	2b01      	cmp	r3, #1
 8000ed0:	d1f2      	bne.n	8000eb8 <cmd_handler_task+0x8>
			process_command(&cmd);
 8000ed2:	f107 0308 	add.w	r3, r7, #8
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f000 f802 	bl	8000ee0 <process_command>
		ret = xTaskNotifyWait(0,0,NULL, portMAX_DELAY);
 8000edc:	e7ec      	b.n	8000eb8 <cmd_handler_task+0x8>
	...

08000ee0 <process_command>:
		}

	}
}

void process_command(command_t *cmd){
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b084      	sub	sp, #16
 8000ee4:	af02      	add	r7, sp, #8
 8000ee6:	6078      	str	r0, [r7, #4]

	extract_command(cmd);
 8000ee8:	6878      	ldr	r0, [r7, #4]
 8000eea:	f000 f83d 	bl	8000f68 <extract_command>

	switch(curr_state){
 8000eee:	4b1a      	ldr	r3, [pc, #104]	; (8000f58 <process_command+0x78>)
 8000ef0:	781b      	ldrb	r3, [r3, #0]
 8000ef2:	2b05      	cmp	r3, #5
 8000ef4:	d82c      	bhi.n	8000f50 <process_command+0x70>
 8000ef6:	a201      	add	r2, pc, #4	; (adr r2, 8000efc <process_command+0x1c>)
 8000ef8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000efc:	08000f15 	.word	0x08000f15
 8000f00:	08000f29 	.word	0x08000f29
 8000f04:	08000f3d 	.word	0x08000f3d
 8000f08:	08000f3d 	.word	0x08000f3d
 8000f0c:	08000f3d 	.word	0x08000f3d
 8000f10:	08000f3d 	.word	0x08000f3d

	case sMainMenu:
		xTaskNotify(handle_menu_task, (uint32_t)cmd, eSetValueWithOverwrite);
 8000f14:	4b11      	ldr	r3, [pc, #68]	; (8000f5c <process_command+0x7c>)
 8000f16:	6818      	ldr	r0, [r3, #0]
 8000f18:	687a      	ldr	r2, [r7, #4]
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	9300      	str	r3, [sp, #0]
 8000f1e:	2303      	movs	r3, #3
 8000f20:	2100      	movs	r1, #0
 8000f22:	f004 fba9 	bl	8005678 <xTaskGenericNotify>
	break;
 8000f26:	e013      	b.n	8000f50 <process_command+0x70>
	case sLedEffect:
		xTaskNotify(handle_led_task, (uint32_t)cmd, eSetValueWithOverwrite);
 8000f28:	4b0d      	ldr	r3, [pc, #52]	; (8000f60 <process_command+0x80>)
 8000f2a:	6818      	ldr	r0, [r3, #0]
 8000f2c:	687a      	ldr	r2, [r7, #4]
 8000f2e:	2300      	movs	r3, #0
 8000f30:	9300      	str	r3, [sp, #0]
 8000f32:	2303      	movs	r3, #3
 8000f34:	2100      	movs	r1, #0
 8000f36:	f004 fb9f 	bl	8005678 <xTaskGenericNotify>
	break;
 8000f3a:	e009      	b.n	8000f50 <process_command+0x70>
	case sRtcMenu:
	case sRtcTimeConfig:
	case sRtcDateConfig:
	case sRtcReport:
		xTaskNotify(handle_rtc_task, (uint32_t)cmd, eSetValueWithOverwrite);
 8000f3c:	4b09      	ldr	r3, [pc, #36]	; (8000f64 <process_command+0x84>)
 8000f3e:	6818      	ldr	r0, [r3, #0]
 8000f40:	687a      	ldr	r2, [r7, #4]
 8000f42:	2300      	movs	r3, #0
 8000f44:	9300      	str	r3, [sp, #0]
 8000f46:	2303      	movs	r3, #3
 8000f48:	2100      	movs	r1, #0
 8000f4a:	f004 fb95 	bl	8005678 <xTaskGenericNotify>
	break;
 8000f4e:	bf00      	nop

	}



}
 8000f50:	bf00      	nop
 8000f52:	3708      	adds	r7, #8
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	20000038 	.word	0x20000038
 8000f5c:	20012dc0 	.word	0x20012dc0
 8000f60:	20012dec 	.word	0x20012dec
 8000f64:	20012db4 	.word	0x20012db4

08000f68 <extract_command>:

int extract_command(command_t *cmd){
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b086      	sub	sp, #24
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]

	uint8_t item;
	BaseType_t status;

	status = uxQueueMessagesWaiting(q_data);
 8000f70:	4b19      	ldr	r3, [pc, #100]	; (8000fd8 <extract_command+0x70>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4618      	mov	r0, r3
 8000f76:	f003 fb76 	bl	8004666 <uxQueueMessagesWaiting>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	613b      	str	r3, [r7, #16]
	if(!status) return -1;
 8000f7e:	693b      	ldr	r3, [r7, #16]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d102      	bne.n	8000f8a <extract_command+0x22>
 8000f84:	f04f 33ff 	mov.w	r3, #4294967295
 8000f88:	e022      	b.n	8000fd0 <extract_command+0x68>
	uint8_t i=0;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	75fb      	strb	r3, [r7, #23]

	do{
		status = xQueueReceive(q_data, &item, 0);
 8000f8e:	4b12      	ldr	r3, [pc, #72]	; (8000fd8 <extract_command+0x70>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	f107 010f 	add.w	r1, r7, #15
 8000f96:	2200      	movs	r2, #0
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f003 f9fd 	bl	8004398 <xQueueReceive>
 8000f9e:	6138      	str	r0, [r7, #16]
		if(status == pdTRUE) cmd->payload[i++] = item;
 8000fa0:	693b      	ldr	r3, [r7, #16]
 8000fa2:	2b01      	cmp	r3, #1
 8000fa4:	d106      	bne.n	8000fb4 <extract_command+0x4c>
 8000fa6:	7dfb      	ldrb	r3, [r7, #23]
 8000fa8:	1c5a      	adds	r2, r3, #1
 8000faa:	75fa      	strb	r2, [r7, #23]
 8000fac:	461a      	mov	r2, r3
 8000fae:	7bf9      	ldrb	r1, [r7, #15]
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	5499      	strb	r1, [r3, r2]
	}while(item != '\n');
 8000fb4:	7bfb      	ldrb	r3, [r7, #15]
 8000fb6:	2b0a      	cmp	r3, #10
 8000fb8:	d1e9      	bne.n	8000f8e <extract_command+0x26>

	cmd->payload[i-1] = '\0';
 8000fba:	7dfb      	ldrb	r3, [r7, #23]
 8000fbc:	3b01      	subs	r3, #1
 8000fbe:	687a      	ldr	r2, [r7, #4]
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	54d1      	strb	r1, [r2, r3]
	cmd->len = i-1;
 8000fc4:	7dfb      	ldrb	r3, [r7, #23]
 8000fc6:	3b01      	subs	r3, #1
 8000fc8:	b2da      	uxtb	r2, r3
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	729a      	strb	r2, [r3, #10]

	return 0;
 8000fce:	2300      	movs	r3, #0

}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	3718      	adds	r7, #24
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	20012dbc 	.word	0x20012dbc

08000fdc <print_task>:

void print_task(void *param){
 8000fdc:	b590      	push	{r4, r7, lr}
 8000fde:	b085      	sub	sp, #20
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]

	uint32_t *msg;
	while(1){
		xQueueReceive(q_print, &msg, portMAX_DELAY);
 8000fe4:	4b0b      	ldr	r3, [pc, #44]	; (8001014 <print_task+0x38>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	f107 010c 	add.w	r1, r7, #12
 8000fec:	f04f 32ff 	mov.w	r2, #4294967295
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f003 f9d1 	bl	8004398 <xQueueReceive>
		HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen((char*)msg),HAL_MAX_DELAY);
 8000ff6:	68fc      	ldr	r4, [r7, #12]
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f7ff f912 	bl	8000224 <strlen>
 8001000:	4603      	mov	r3, r0
 8001002:	b29a      	uxth	r2, r3
 8001004:	f04f 33ff 	mov.w	r3, #4294967295
 8001008:	4621      	mov	r1, r4
 800100a:	4803      	ldr	r0, [pc, #12]	; (8001018 <print_task+0x3c>)
 800100c:	f001 ff9d 	bl	8002f4a <HAL_UART_Transmit>
		xQueueReceive(q_print, &msg, portMAX_DELAY);
 8001010:	e7e8      	b.n	8000fe4 <print_task+0x8>
 8001012:	bf00      	nop
 8001014:	20012dc4 	.word	0x20012dc4
 8001018:	20012df4 	.word	0x20012df4

0800101c <rtc_task>:

	}
}
void rtc_task(void *param){
 800101c:	b480      	push	{r7}
 800101e:	b083      	sub	sp, #12
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]

	while(1){
 8001024:	e7fe      	b.n	8001024 <rtc_task+0x8>
	...

08001028 <led_task>:

	}
}
void led_task(void *param){
 8001028:	b580      	push	{r7, lr}
 800102a:	b088      	sub	sp, #32
 800102c:	af02      	add	r7, sp, #8
 800102e:	6078      	str	r0, [r7, #4]
	uint32_t cmd_addr;
	command_t *cmd;

	const char *msg_led = "===========================\n"
 8001030:	4b3e      	ldr	r3, [pc, #248]	; (800112c <led_task+0x104>)
 8001032:	60fb      	str	r3, [r7, #12]
							"|   LED EFFECT    		|\n"
						  "===========================\n"
							"(none,e1,e2,e3,e4|\n"
							"Enter your choice here: ";
	while(1){
		xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 8001034:	f04f 33ff 	mov.w	r3, #4294967295
 8001038:	9300      	str	r3, [sp, #0]
 800103a:	2300      	movs	r3, #0
 800103c:	2200      	movs	r2, #0
 800103e:	2100      	movs	r1, #0
 8001040:	2000      	movs	r0, #0
 8001042:	f004 fa9b 	bl	800557c <xTaskGenericNotifyWait>

		xQueueSend(q_print, &msg_led, portMAX_DELAY);
 8001046:	4b3a      	ldr	r3, [pc, #232]	; (8001130 <led_task+0x108>)
 8001048:	6818      	ldr	r0, [r3, #0]
 800104a:	f107 010c 	add.w	r1, r7, #12
 800104e:	2300      	movs	r3, #0
 8001050:	f04f 32ff 	mov.w	r2, #4294967295
 8001054:	f003 f800 	bl	8004058 <xQueueGenericSend>

		xTaskNotifyWait(0,0,&cmd_addr,portMAX_DELAY);
 8001058:	f107 0210 	add.w	r2, r7, #16
 800105c:	f04f 33ff 	mov.w	r3, #4294967295
 8001060:	9300      	str	r3, [sp, #0]
 8001062:	4613      	mov	r3, r2
 8001064:	2200      	movs	r2, #0
 8001066:	2100      	movs	r1, #0
 8001068:	2000      	movs	r0, #0
 800106a:	f004 fa87 	bl	800557c <xTaskGenericNotifyWait>
		cmd=(command_t*)cmd_addr;
 800106e:	693b      	ldr	r3, [r7, #16]
 8001070:	617b      	str	r3, [r7, #20]

		if(cmd->len <=4){
 8001072:	697b      	ldr	r3, [r7, #20]
 8001074:	7a9b      	ldrb	r3, [r3, #10]
 8001076:	2b04      	cmp	r3, #4
 8001078:	d843      	bhi.n	8001102 <led_task+0xda>

			if(!strcmp((char*)cmd->payload, "none"))
 800107a:	697b      	ldr	r3, [r7, #20]
 800107c:	492d      	ldr	r1, [pc, #180]	; (8001134 <led_task+0x10c>)
 800107e:	4618      	mov	r0, r3
 8001080:	f7ff f8c6 	bl	8000210 <strcmp>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d102      	bne.n	8001090 <led_task+0x68>
				led_effect_stop();
 800108a:	f7ff fa53 	bl	8000534 <led_effect_stop>
 800108e:	e040      	b.n	8001112 <led_task+0xea>
			else if(!strcmp((char*)cmd->payload, "e1"))
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	4929      	ldr	r1, [pc, #164]	; (8001138 <led_task+0x110>)
 8001094:	4618      	mov	r0, r3
 8001096:	f7ff f8bb 	bl	8000210 <strcmp>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d103      	bne.n	80010a8 <led_task+0x80>
				led_effect(1);
 80010a0:	2001      	movs	r0, #1
 80010a2:	f7ff fa65 	bl	8000570 <led_effect>
 80010a6:	e034      	b.n	8001112 <led_task+0xea>
			else if(!strcmp((char*)cmd->payload, "e2"))
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	4924      	ldr	r1, [pc, #144]	; (800113c <led_task+0x114>)
 80010ac:	4618      	mov	r0, r3
 80010ae:	f7ff f8af 	bl	8000210 <strcmp>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d103      	bne.n	80010c0 <led_task+0x98>
				led_effect(2);
 80010b8:	2002      	movs	r0, #2
 80010ba:	f7ff fa59 	bl	8000570 <led_effect>
 80010be:	e028      	b.n	8001112 <led_task+0xea>
			else if(!strcmp((char*)cmd->payload, "e3"))
 80010c0:	697b      	ldr	r3, [r7, #20]
 80010c2:	491f      	ldr	r1, [pc, #124]	; (8001140 <led_task+0x118>)
 80010c4:	4618      	mov	r0, r3
 80010c6:	f7ff f8a3 	bl	8000210 <strcmp>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d103      	bne.n	80010d8 <led_task+0xb0>
				led_effect(3);
 80010d0:	2003      	movs	r0, #3
 80010d2:	f7ff fa4d 	bl	8000570 <led_effect>
 80010d6:	e01c      	b.n	8001112 <led_task+0xea>
			else if(!strcmp((char*)cmd->payload, "e4"))
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	491a      	ldr	r1, [pc, #104]	; (8001144 <led_task+0x11c>)
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff f897 	bl	8000210 <strcmp>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d103      	bne.n	80010f0 <led_task+0xc8>
				led_effect(4);
 80010e8:	2004      	movs	r0, #4
 80010ea:	f7ff fa41 	bl	8000570 <led_effect>
 80010ee:	e010      	b.n	8001112 <led_task+0xea>
			else
				xQueueSend(q_print, &msg_inv, portMAX_DELAY);
 80010f0:	4b0f      	ldr	r3, [pc, #60]	; (8001130 <led_task+0x108>)
 80010f2:	6818      	ldr	r0, [r3, #0]
 80010f4:	2300      	movs	r3, #0
 80010f6:	f04f 32ff 	mov.w	r2, #4294967295
 80010fa:	4913      	ldr	r1, [pc, #76]	; (8001148 <led_task+0x120>)
 80010fc:	f002 ffac 	bl	8004058 <xQueueGenericSend>
 8001100:	e007      	b.n	8001112 <led_task+0xea>

		}else
			xQueueSend(q_print, &msg_inv, portMAX_DELAY);
 8001102:	4b0b      	ldr	r3, [pc, #44]	; (8001130 <led_task+0x108>)
 8001104:	6818      	ldr	r0, [r3, #0]
 8001106:	2300      	movs	r3, #0
 8001108:	f04f 32ff 	mov.w	r2, #4294967295
 800110c:	490e      	ldr	r1, [pc, #56]	; (8001148 <led_task+0x120>)
 800110e:	f002 ffa3 	bl	8004058 <xQueueGenericSend>

		curr_state = sMainMenu;
 8001112:	4b0e      	ldr	r3, [pc, #56]	; (800114c <led_task+0x124>)
 8001114:	2200      	movs	r2, #0
 8001116:	701a      	strb	r2, [r3, #0]

		xTaskNotify(handle_menu_task,0,eNoAction);
 8001118:	4b0d      	ldr	r3, [pc, #52]	; (8001150 <led_task+0x128>)
 800111a:	6818      	ldr	r0, [r3, #0]
 800111c:	2300      	movs	r3, #0
 800111e:	9300      	str	r3, [sp, #0]
 8001120:	2300      	movs	r3, #0
 8001122:	2200      	movs	r2, #0
 8001124:	2100      	movs	r1, #0
 8001126:	f004 faa7 	bl	8005678 <xTaskGenericNotify>
		xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 800112a:	e783      	b.n	8001034 <led_task+0xc>
 800112c:	08006bbc 	.word	0x08006bbc
 8001130:	20012dc4 	.word	0x20012dc4
 8001134:	08006c38 	.word	0x08006c38
 8001138:	08006c40 	.word	0x08006c40
 800113c:	08006c44 	.word	0x08006c44
 8001140:	08006c48 	.word	0x08006c48
 8001144:	08006c4c 	.word	0x08006c4c
 8001148:	20000008 	.word	0x20000008
 800114c:	20000038 	.word	0x20000038
 8001150:	20012dc0 	.word	0x20012dc0

08001154 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001154:	f8df d034 	ldr.w	sp, [pc, #52]	; 800118c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001158:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800115a:	e003      	b.n	8001164 <LoopCopyDataInit>

0800115c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800115c:	4b0c      	ldr	r3, [pc, #48]	; (8001190 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800115e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001160:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001162:	3104      	adds	r1, #4

08001164 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001164:	480b      	ldr	r0, [pc, #44]	; (8001194 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001166:	4b0c      	ldr	r3, [pc, #48]	; (8001198 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001168:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800116a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800116c:	d3f6      	bcc.n	800115c <CopyDataInit>
  ldr  r2, =_sbss
 800116e:	4a0b      	ldr	r2, [pc, #44]	; (800119c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001170:	e002      	b.n	8001178 <LoopFillZerobss>

08001172 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001172:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001174:	f842 3b04 	str.w	r3, [r2], #4

08001178 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001178:	4b09      	ldr	r3, [pc, #36]	; (80011a0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800117a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800117c:	d3f9      	bcc.n	8001172 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800117e:	f7ff fe13 	bl	8000da8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001182:	f005 fc5f 	bl	8006a44 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001186:	f7ff fa2d 	bl	80005e4 <main>
  bx  lr    
 800118a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800118c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001190:	08006c90 	.word	0x08006c90
  ldr  r0, =_sdata
 8001194:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001198:	2000001c 	.word	0x2000001c
  ldr  r2, =_sbss
 800119c:	2000001c 	.word	0x2000001c
  ldr  r3, = _ebss
 80011a0:	20012eb8 	.word	0x20012eb8

080011a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011a4:	e7fe      	b.n	80011a4 <ADC_IRQHandler>
	...

080011a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80011ac:	4b0e      	ldr	r3, [pc, #56]	; (80011e8 <HAL_Init+0x40>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4a0d      	ldr	r2, [pc, #52]	; (80011e8 <HAL_Init+0x40>)
 80011b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011b6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80011b8:	4b0b      	ldr	r3, [pc, #44]	; (80011e8 <HAL_Init+0x40>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4a0a      	ldr	r2, [pc, #40]	; (80011e8 <HAL_Init+0x40>)
 80011be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80011c2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011c4:	4b08      	ldr	r3, [pc, #32]	; (80011e8 <HAL_Init+0x40>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4a07      	ldr	r2, [pc, #28]	; (80011e8 <HAL_Init+0x40>)
 80011ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011d0:	2003      	movs	r0, #3
 80011d2:	f000 f8d8 	bl	8001386 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011d6:	2000      	movs	r0, #0
 80011d8:	f7ff fd5e 	bl	8000c98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011dc:	f7ff fcce 	bl	8000b7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011e0:	2300      	movs	r3, #0
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	40023c00 	.word	0x40023c00

080011ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011f0:	4b06      	ldr	r3, [pc, #24]	; (800120c <HAL_IncTick+0x20>)
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	461a      	mov	r2, r3
 80011f6:	4b06      	ldr	r3, [pc, #24]	; (8001210 <HAL_IncTick+0x24>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	4413      	add	r3, r2
 80011fc:	4a04      	ldr	r2, [pc, #16]	; (8001210 <HAL_IncTick+0x24>)
 80011fe:	6013      	str	r3, [r2, #0]
}
 8001200:	bf00      	nop
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr
 800120a:	bf00      	nop
 800120c:	20000010 	.word	0x20000010
 8001210:	20012e74 	.word	0x20012e74

08001214 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
  return uwTick;
 8001218:	4b03      	ldr	r3, [pc, #12]	; (8001228 <HAL_GetTick+0x14>)
 800121a:	681b      	ldr	r3, [r3, #0]
}
 800121c:	4618      	mov	r0, r3
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr
 8001226:	bf00      	nop
 8001228:	20012e74 	.word	0x20012e74

0800122c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800122c:	b480      	push	{r7}
 800122e:	b085      	sub	sp, #20
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	f003 0307 	and.w	r3, r3, #7
 800123a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800123c:	4b0c      	ldr	r3, [pc, #48]	; (8001270 <__NVIC_SetPriorityGrouping+0x44>)
 800123e:	68db      	ldr	r3, [r3, #12]
 8001240:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001242:	68ba      	ldr	r2, [r7, #8]
 8001244:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001248:	4013      	ands	r3, r2
 800124a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001250:	68bb      	ldr	r3, [r7, #8]
 8001252:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001254:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001258:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800125c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800125e:	4a04      	ldr	r2, [pc, #16]	; (8001270 <__NVIC_SetPriorityGrouping+0x44>)
 8001260:	68bb      	ldr	r3, [r7, #8]
 8001262:	60d3      	str	r3, [r2, #12]
}
 8001264:	bf00      	nop
 8001266:	3714      	adds	r7, #20
 8001268:	46bd      	mov	sp, r7
 800126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126e:	4770      	bx	lr
 8001270:	e000ed00 	.word	0xe000ed00

08001274 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001278:	4b04      	ldr	r3, [pc, #16]	; (800128c <__NVIC_GetPriorityGrouping+0x18>)
 800127a:	68db      	ldr	r3, [r3, #12]
 800127c:	0a1b      	lsrs	r3, r3, #8
 800127e:	f003 0307 	and.w	r3, r3, #7
}
 8001282:	4618      	mov	r0, r3
 8001284:	46bd      	mov	sp, r7
 8001286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128a:	4770      	bx	lr
 800128c:	e000ed00 	.word	0xe000ed00

08001290 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001290:	b480      	push	{r7}
 8001292:	b083      	sub	sp, #12
 8001294:	af00      	add	r7, sp, #0
 8001296:	4603      	mov	r3, r0
 8001298:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800129a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	db0b      	blt.n	80012ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012a2:	79fb      	ldrb	r3, [r7, #7]
 80012a4:	f003 021f 	and.w	r2, r3, #31
 80012a8:	4907      	ldr	r1, [pc, #28]	; (80012c8 <__NVIC_EnableIRQ+0x38>)
 80012aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ae:	095b      	lsrs	r3, r3, #5
 80012b0:	2001      	movs	r0, #1
 80012b2:	fa00 f202 	lsl.w	r2, r0, r2
 80012b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80012ba:	bf00      	nop
 80012bc:	370c      	adds	r7, #12
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr
 80012c6:	bf00      	nop
 80012c8:	e000e100 	.word	0xe000e100

080012cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b083      	sub	sp, #12
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	4603      	mov	r3, r0
 80012d4:	6039      	str	r1, [r7, #0]
 80012d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	db0a      	blt.n	80012f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	b2da      	uxtb	r2, r3
 80012e4:	490c      	ldr	r1, [pc, #48]	; (8001318 <__NVIC_SetPriority+0x4c>)
 80012e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ea:	0112      	lsls	r2, r2, #4
 80012ec:	b2d2      	uxtb	r2, r2
 80012ee:	440b      	add	r3, r1
 80012f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012f4:	e00a      	b.n	800130c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	b2da      	uxtb	r2, r3
 80012fa:	4908      	ldr	r1, [pc, #32]	; (800131c <__NVIC_SetPriority+0x50>)
 80012fc:	79fb      	ldrb	r3, [r7, #7]
 80012fe:	f003 030f 	and.w	r3, r3, #15
 8001302:	3b04      	subs	r3, #4
 8001304:	0112      	lsls	r2, r2, #4
 8001306:	b2d2      	uxtb	r2, r2
 8001308:	440b      	add	r3, r1
 800130a:	761a      	strb	r2, [r3, #24]
}
 800130c:	bf00      	nop
 800130e:	370c      	adds	r7, #12
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr
 8001318:	e000e100 	.word	0xe000e100
 800131c:	e000ed00 	.word	0xe000ed00

08001320 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001320:	b480      	push	{r7}
 8001322:	b089      	sub	sp, #36	; 0x24
 8001324:	af00      	add	r7, sp, #0
 8001326:	60f8      	str	r0, [r7, #12]
 8001328:	60b9      	str	r1, [r7, #8]
 800132a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	f003 0307 	and.w	r3, r3, #7
 8001332:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001334:	69fb      	ldr	r3, [r7, #28]
 8001336:	f1c3 0307 	rsb	r3, r3, #7
 800133a:	2b04      	cmp	r3, #4
 800133c:	bf28      	it	cs
 800133e:	2304      	movcs	r3, #4
 8001340:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001342:	69fb      	ldr	r3, [r7, #28]
 8001344:	3304      	adds	r3, #4
 8001346:	2b06      	cmp	r3, #6
 8001348:	d902      	bls.n	8001350 <NVIC_EncodePriority+0x30>
 800134a:	69fb      	ldr	r3, [r7, #28]
 800134c:	3b03      	subs	r3, #3
 800134e:	e000      	b.n	8001352 <NVIC_EncodePriority+0x32>
 8001350:	2300      	movs	r3, #0
 8001352:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001354:	f04f 32ff 	mov.w	r2, #4294967295
 8001358:	69bb      	ldr	r3, [r7, #24]
 800135a:	fa02 f303 	lsl.w	r3, r2, r3
 800135e:	43da      	mvns	r2, r3
 8001360:	68bb      	ldr	r3, [r7, #8]
 8001362:	401a      	ands	r2, r3
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001368:	f04f 31ff 	mov.w	r1, #4294967295
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	fa01 f303 	lsl.w	r3, r1, r3
 8001372:	43d9      	mvns	r1, r3
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001378:	4313      	orrs	r3, r2
         );
}
 800137a:	4618      	mov	r0, r3
 800137c:	3724      	adds	r7, #36	; 0x24
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr

08001386 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001386:	b580      	push	{r7, lr}
 8001388:	b082      	sub	sp, #8
 800138a:	af00      	add	r7, sp, #0
 800138c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800138e:	6878      	ldr	r0, [r7, #4]
 8001390:	f7ff ff4c 	bl	800122c <__NVIC_SetPriorityGrouping>
}
 8001394:	bf00      	nop
 8001396:	3708      	adds	r7, #8
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}

0800139c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800139c:	b580      	push	{r7, lr}
 800139e:	b086      	sub	sp, #24
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	4603      	mov	r3, r0
 80013a4:	60b9      	str	r1, [r7, #8]
 80013a6:	607a      	str	r2, [r7, #4]
 80013a8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013aa:	2300      	movs	r3, #0
 80013ac:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013ae:	f7ff ff61 	bl	8001274 <__NVIC_GetPriorityGrouping>
 80013b2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013b4:	687a      	ldr	r2, [r7, #4]
 80013b6:	68b9      	ldr	r1, [r7, #8]
 80013b8:	6978      	ldr	r0, [r7, #20]
 80013ba:	f7ff ffb1 	bl	8001320 <NVIC_EncodePriority>
 80013be:	4602      	mov	r2, r0
 80013c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013c4:	4611      	mov	r1, r2
 80013c6:	4618      	mov	r0, r3
 80013c8:	f7ff ff80 	bl	80012cc <__NVIC_SetPriority>
}
 80013cc:	bf00      	nop
 80013ce:	3718      	adds	r7, #24
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}

080013d4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0
 80013da:	4603      	mov	r3, r0
 80013dc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013e2:	4618      	mov	r0, r3
 80013e4:	f7ff ff54 	bl	8001290 <__NVIC_EnableIRQ>
}
 80013e8:	bf00      	nop
 80013ea:	3708      	adds	r7, #8
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}

080013f0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b083      	sub	sp, #12
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80013fe:	b2db      	uxtb	r3, r3
 8001400:	2b02      	cmp	r3, #2
 8001402:	d004      	beq.n	800140e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2280      	movs	r2, #128	; 0x80
 8001408:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800140a:	2301      	movs	r3, #1
 800140c:	e00c      	b.n	8001428 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	2205      	movs	r2, #5
 8001412:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	681a      	ldr	r2, [r3, #0]
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f022 0201 	bic.w	r2, r2, #1
 8001424:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001426:	2300      	movs	r3, #0
}
 8001428:	4618      	mov	r0, r3
 800142a:	370c      	adds	r7, #12
 800142c:	46bd      	mov	sp, r7
 800142e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001432:	4770      	bx	lr

08001434 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001434:	b480      	push	{r7}
 8001436:	b089      	sub	sp, #36	; 0x24
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
 800143c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800143e:	2300      	movs	r3, #0
 8001440:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001442:	2300      	movs	r3, #0
 8001444:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001446:	2300      	movs	r3, #0
 8001448:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800144a:	2300      	movs	r3, #0
 800144c:	61fb      	str	r3, [r7, #28]
 800144e:	e165      	b.n	800171c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001450:	2201      	movs	r2, #1
 8001452:	69fb      	ldr	r3, [r7, #28]
 8001454:	fa02 f303 	lsl.w	r3, r2, r3
 8001458:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	697a      	ldr	r2, [r7, #20]
 8001460:	4013      	ands	r3, r2
 8001462:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001464:	693a      	ldr	r2, [r7, #16]
 8001466:	697b      	ldr	r3, [r7, #20]
 8001468:	429a      	cmp	r2, r3
 800146a:	f040 8154 	bne.w	8001716 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	2b01      	cmp	r3, #1
 8001474:	d00b      	beq.n	800148e <HAL_GPIO_Init+0x5a>
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	2b02      	cmp	r3, #2
 800147c:	d007      	beq.n	800148e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001482:	2b11      	cmp	r3, #17
 8001484:	d003      	beq.n	800148e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	2b12      	cmp	r3, #18
 800148c:	d130      	bne.n	80014f0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	689b      	ldr	r3, [r3, #8]
 8001492:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001494:	69fb      	ldr	r3, [r7, #28]
 8001496:	005b      	lsls	r3, r3, #1
 8001498:	2203      	movs	r2, #3
 800149a:	fa02 f303 	lsl.w	r3, r2, r3
 800149e:	43db      	mvns	r3, r3
 80014a0:	69ba      	ldr	r2, [r7, #24]
 80014a2:	4013      	ands	r3, r2
 80014a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	68da      	ldr	r2, [r3, #12]
 80014aa:	69fb      	ldr	r3, [r7, #28]
 80014ac:	005b      	lsls	r3, r3, #1
 80014ae:	fa02 f303 	lsl.w	r3, r2, r3
 80014b2:	69ba      	ldr	r2, [r7, #24]
 80014b4:	4313      	orrs	r3, r2
 80014b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	69ba      	ldr	r2, [r7, #24]
 80014bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80014c4:	2201      	movs	r2, #1
 80014c6:	69fb      	ldr	r3, [r7, #28]
 80014c8:	fa02 f303 	lsl.w	r3, r2, r3
 80014cc:	43db      	mvns	r3, r3
 80014ce:	69ba      	ldr	r2, [r7, #24]
 80014d0:	4013      	ands	r3, r2
 80014d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	091b      	lsrs	r3, r3, #4
 80014da:	f003 0201 	and.w	r2, r3, #1
 80014de:	69fb      	ldr	r3, [r7, #28]
 80014e0:	fa02 f303 	lsl.w	r3, r2, r3
 80014e4:	69ba      	ldr	r2, [r7, #24]
 80014e6:	4313      	orrs	r3, r2
 80014e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	69ba      	ldr	r2, [r7, #24]
 80014ee:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	68db      	ldr	r3, [r3, #12]
 80014f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80014f6:	69fb      	ldr	r3, [r7, #28]
 80014f8:	005b      	lsls	r3, r3, #1
 80014fa:	2203      	movs	r2, #3
 80014fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001500:	43db      	mvns	r3, r3
 8001502:	69ba      	ldr	r2, [r7, #24]
 8001504:	4013      	ands	r3, r2
 8001506:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	689a      	ldr	r2, [r3, #8]
 800150c:	69fb      	ldr	r3, [r7, #28]
 800150e:	005b      	lsls	r3, r3, #1
 8001510:	fa02 f303 	lsl.w	r3, r2, r3
 8001514:	69ba      	ldr	r2, [r7, #24]
 8001516:	4313      	orrs	r3, r2
 8001518:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	69ba      	ldr	r2, [r7, #24]
 800151e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	2b02      	cmp	r3, #2
 8001526:	d003      	beq.n	8001530 <HAL_GPIO_Init+0xfc>
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	2b12      	cmp	r3, #18
 800152e:	d123      	bne.n	8001578 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001530:	69fb      	ldr	r3, [r7, #28]
 8001532:	08da      	lsrs	r2, r3, #3
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	3208      	adds	r2, #8
 8001538:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800153c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800153e:	69fb      	ldr	r3, [r7, #28]
 8001540:	f003 0307 	and.w	r3, r3, #7
 8001544:	009b      	lsls	r3, r3, #2
 8001546:	220f      	movs	r2, #15
 8001548:	fa02 f303 	lsl.w	r3, r2, r3
 800154c:	43db      	mvns	r3, r3
 800154e:	69ba      	ldr	r2, [r7, #24]
 8001550:	4013      	ands	r3, r2
 8001552:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	691a      	ldr	r2, [r3, #16]
 8001558:	69fb      	ldr	r3, [r7, #28]
 800155a:	f003 0307 	and.w	r3, r3, #7
 800155e:	009b      	lsls	r3, r3, #2
 8001560:	fa02 f303 	lsl.w	r3, r2, r3
 8001564:	69ba      	ldr	r2, [r7, #24]
 8001566:	4313      	orrs	r3, r2
 8001568:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800156a:	69fb      	ldr	r3, [r7, #28]
 800156c:	08da      	lsrs	r2, r3, #3
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	3208      	adds	r2, #8
 8001572:	69b9      	ldr	r1, [r7, #24]
 8001574:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800157e:	69fb      	ldr	r3, [r7, #28]
 8001580:	005b      	lsls	r3, r3, #1
 8001582:	2203      	movs	r2, #3
 8001584:	fa02 f303 	lsl.w	r3, r2, r3
 8001588:	43db      	mvns	r3, r3
 800158a:	69ba      	ldr	r2, [r7, #24]
 800158c:	4013      	ands	r3, r2
 800158e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	f003 0203 	and.w	r2, r3, #3
 8001598:	69fb      	ldr	r3, [r7, #28]
 800159a:	005b      	lsls	r3, r3, #1
 800159c:	fa02 f303 	lsl.w	r3, r2, r3
 80015a0:	69ba      	ldr	r2, [r7, #24]
 80015a2:	4313      	orrs	r3, r2
 80015a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	69ba      	ldr	r2, [r7, #24]
 80015aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	f000 80ae 	beq.w	8001716 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015ba:	2300      	movs	r3, #0
 80015bc:	60fb      	str	r3, [r7, #12]
 80015be:	4b5c      	ldr	r3, [pc, #368]	; (8001730 <HAL_GPIO_Init+0x2fc>)
 80015c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015c2:	4a5b      	ldr	r2, [pc, #364]	; (8001730 <HAL_GPIO_Init+0x2fc>)
 80015c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015c8:	6453      	str	r3, [r2, #68]	; 0x44
 80015ca:	4b59      	ldr	r3, [pc, #356]	; (8001730 <HAL_GPIO_Init+0x2fc>)
 80015cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015d2:	60fb      	str	r3, [r7, #12]
 80015d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80015d6:	4a57      	ldr	r2, [pc, #348]	; (8001734 <HAL_GPIO_Init+0x300>)
 80015d8:	69fb      	ldr	r3, [r7, #28]
 80015da:	089b      	lsrs	r3, r3, #2
 80015dc:	3302      	adds	r3, #2
 80015de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80015e4:	69fb      	ldr	r3, [r7, #28]
 80015e6:	f003 0303 	and.w	r3, r3, #3
 80015ea:	009b      	lsls	r3, r3, #2
 80015ec:	220f      	movs	r2, #15
 80015ee:	fa02 f303 	lsl.w	r3, r2, r3
 80015f2:	43db      	mvns	r3, r3
 80015f4:	69ba      	ldr	r2, [r7, #24]
 80015f6:	4013      	ands	r3, r2
 80015f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	4a4e      	ldr	r2, [pc, #312]	; (8001738 <HAL_GPIO_Init+0x304>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d025      	beq.n	800164e <HAL_GPIO_Init+0x21a>
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	4a4d      	ldr	r2, [pc, #308]	; (800173c <HAL_GPIO_Init+0x308>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d01f      	beq.n	800164a <HAL_GPIO_Init+0x216>
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	4a4c      	ldr	r2, [pc, #304]	; (8001740 <HAL_GPIO_Init+0x30c>)
 800160e:	4293      	cmp	r3, r2
 8001610:	d019      	beq.n	8001646 <HAL_GPIO_Init+0x212>
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	4a4b      	ldr	r2, [pc, #300]	; (8001744 <HAL_GPIO_Init+0x310>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d013      	beq.n	8001642 <HAL_GPIO_Init+0x20e>
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	4a4a      	ldr	r2, [pc, #296]	; (8001748 <HAL_GPIO_Init+0x314>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d00d      	beq.n	800163e <HAL_GPIO_Init+0x20a>
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	4a49      	ldr	r2, [pc, #292]	; (800174c <HAL_GPIO_Init+0x318>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d007      	beq.n	800163a <HAL_GPIO_Init+0x206>
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	4a48      	ldr	r2, [pc, #288]	; (8001750 <HAL_GPIO_Init+0x31c>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d101      	bne.n	8001636 <HAL_GPIO_Init+0x202>
 8001632:	2306      	movs	r3, #6
 8001634:	e00c      	b.n	8001650 <HAL_GPIO_Init+0x21c>
 8001636:	2307      	movs	r3, #7
 8001638:	e00a      	b.n	8001650 <HAL_GPIO_Init+0x21c>
 800163a:	2305      	movs	r3, #5
 800163c:	e008      	b.n	8001650 <HAL_GPIO_Init+0x21c>
 800163e:	2304      	movs	r3, #4
 8001640:	e006      	b.n	8001650 <HAL_GPIO_Init+0x21c>
 8001642:	2303      	movs	r3, #3
 8001644:	e004      	b.n	8001650 <HAL_GPIO_Init+0x21c>
 8001646:	2302      	movs	r3, #2
 8001648:	e002      	b.n	8001650 <HAL_GPIO_Init+0x21c>
 800164a:	2301      	movs	r3, #1
 800164c:	e000      	b.n	8001650 <HAL_GPIO_Init+0x21c>
 800164e:	2300      	movs	r3, #0
 8001650:	69fa      	ldr	r2, [r7, #28]
 8001652:	f002 0203 	and.w	r2, r2, #3
 8001656:	0092      	lsls	r2, r2, #2
 8001658:	4093      	lsls	r3, r2
 800165a:	69ba      	ldr	r2, [r7, #24]
 800165c:	4313      	orrs	r3, r2
 800165e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001660:	4934      	ldr	r1, [pc, #208]	; (8001734 <HAL_GPIO_Init+0x300>)
 8001662:	69fb      	ldr	r3, [r7, #28]
 8001664:	089b      	lsrs	r3, r3, #2
 8001666:	3302      	adds	r3, #2
 8001668:	69ba      	ldr	r2, [r7, #24]
 800166a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800166e:	4b39      	ldr	r3, [pc, #228]	; (8001754 <HAL_GPIO_Init+0x320>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001674:	693b      	ldr	r3, [r7, #16]
 8001676:	43db      	mvns	r3, r3
 8001678:	69ba      	ldr	r2, [r7, #24]
 800167a:	4013      	ands	r3, r2
 800167c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001686:	2b00      	cmp	r3, #0
 8001688:	d003      	beq.n	8001692 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800168a:	69ba      	ldr	r2, [r7, #24]
 800168c:	693b      	ldr	r3, [r7, #16]
 800168e:	4313      	orrs	r3, r2
 8001690:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001692:	4a30      	ldr	r2, [pc, #192]	; (8001754 <HAL_GPIO_Init+0x320>)
 8001694:	69bb      	ldr	r3, [r7, #24]
 8001696:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001698:	4b2e      	ldr	r3, [pc, #184]	; (8001754 <HAL_GPIO_Init+0x320>)
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	43db      	mvns	r3, r3
 80016a2:	69ba      	ldr	r2, [r7, #24]
 80016a4:	4013      	ands	r3, r2
 80016a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d003      	beq.n	80016bc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80016b4:	69ba      	ldr	r2, [r7, #24]
 80016b6:	693b      	ldr	r3, [r7, #16]
 80016b8:	4313      	orrs	r3, r2
 80016ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80016bc:	4a25      	ldr	r2, [pc, #148]	; (8001754 <HAL_GPIO_Init+0x320>)
 80016be:	69bb      	ldr	r3, [r7, #24]
 80016c0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80016c2:	4b24      	ldr	r3, [pc, #144]	; (8001754 <HAL_GPIO_Init+0x320>)
 80016c4:	689b      	ldr	r3, [r3, #8]
 80016c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016c8:	693b      	ldr	r3, [r7, #16]
 80016ca:	43db      	mvns	r3, r3
 80016cc:	69ba      	ldr	r2, [r7, #24]
 80016ce:	4013      	ands	r3, r2
 80016d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d003      	beq.n	80016e6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80016de:	69ba      	ldr	r2, [r7, #24]
 80016e0:	693b      	ldr	r3, [r7, #16]
 80016e2:	4313      	orrs	r3, r2
 80016e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80016e6:	4a1b      	ldr	r2, [pc, #108]	; (8001754 <HAL_GPIO_Init+0x320>)
 80016e8:	69bb      	ldr	r3, [r7, #24]
 80016ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80016ec:	4b19      	ldr	r3, [pc, #100]	; (8001754 <HAL_GPIO_Init+0x320>)
 80016ee:	68db      	ldr	r3, [r3, #12]
 80016f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016f2:	693b      	ldr	r3, [r7, #16]
 80016f4:	43db      	mvns	r3, r3
 80016f6:	69ba      	ldr	r2, [r7, #24]
 80016f8:	4013      	ands	r3, r2
 80016fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001704:	2b00      	cmp	r3, #0
 8001706:	d003      	beq.n	8001710 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001708:	69ba      	ldr	r2, [r7, #24]
 800170a:	693b      	ldr	r3, [r7, #16]
 800170c:	4313      	orrs	r3, r2
 800170e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001710:	4a10      	ldr	r2, [pc, #64]	; (8001754 <HAL_GPIO_Init+0x320>)
 8001712:	69bb      	ldr	r3, [r7, #24]
 8001714:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001716:	69fb      	ldr	r3, [r7, #28]
 8001718:	3301      	adds	r3, #1
 800171a:	61fb      	str	r3, [r7, #28]
 800171c:	69fb      	ldr	r3, [r7, #28]
 800171e:	2b0f      	cmp	r3, #15
 8001720:	f67f ae96 	bls.w	8001450 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001724:	bf00      	nop
 8001726:	3724      	adds	r7, #36	; 0x24
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr
 8001730:	40023800 	.word	0x40023800
 8001734:	40013800 	.word	0x40013800
 8001738:	40020000 	.word	0x40020000
 800173c:	40020400 	.word	0x40020400
 8001740:	40020800 	.word	0x40020800
 8001744:	40020c00 	.word	0x40020c00
 8001748:	40021000 	.word	0x40021000
 800174c:	40021400 	.word	0x40021400
 8001750:	40021800 	.word	0x40021800
 8001754:	40013c00 	.word	0x40013c00

08001758 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
 8001760:	460b      	mov	r3, r1
 8001762:	807b      	strh	r3, [r7, #2]
 8001764:	4613      	mov	r3, r2
 8001766:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001768:	787b      	ldrb	r3, [r7, #1]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d003      	beq.n	8001776 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800176e:	887a      	ldrh	r2, [r7, #2]
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001774:	e003      	b.n	800177e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001776:	887b      	ldrh	r3, [r7, #2]
 8001778:	041a      	lsls	r2, r3, #16
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	619a      	str	r2, [r3, #24]
}
 800177e:	bf00      	nop
 8001780:	370c      	adds	r7, #12
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr
	...

0800178c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b084      	sub	sp, #16
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
 8001794:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d101      	bne.n	80017a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800179c:	2301      	movs	r3, #1
 800179e:	e0cc      	b.n	800193a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80017a0:	4b68      	ldr	r3, [pc, #416]	; (8001944 <HAL_RCC_ClockConfig+0x1b8>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f003 030f 	and.w	r3, r3, #15
 80017a8:	683a      	ldr	r2, [r7, #0]
 80017aa:	429a      	cmp	r2, r3
 80017ac:	d90c      	bls.n	80017c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017ae:	4b65      	ldr	r3, [pc, #404]	; (8001944 <HAL_RCC_ClockConfig+0x1b8>)
 80017b0:	683a      	ldr	r2, [r7, #0]
 80017b2:	b2d2      	uxtb	r2, r2
 80017b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017b6:	4b63      	ldr	r3, [pc, #396]	; (8001944 <HAL_RCC_ClockConfig+0x1b8>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f003 030f 	and.w	r3, r3, #15
 80017be:	683a      	ldr	r2, [r7, #0]
 80017c0:	429a      	cmp	r2, r3
 80017c2:	d001      	beq.n	80017c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80017c4:	2301      	movs	r3, #1
 80017c6:	e0b8      	b.n	800193a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f003 0302 	and.w	r3, r3, #2
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d020      	beq.n	8001816 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f003 0304 	and.w	r3, r3, #4
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d005      	beq.n	80017ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017e0:	4b59      	ldr	r3, [pc, #356]	; (8001948 <HAL_RCC_ClockConfig+0x1bc>)
 80017e2:	689b      	ldr	r3, [r3, #8]
 80017e4:	4a58      	ldr	r2, [pc, #352]	; (8001948 <HAL_RCC_ClockConfig+0x1bc>)
 80017e6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80017ea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f003 0308 	and.w	r3, r3, #8
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d005      	beq.n	8001804 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017f8:	4b53      	ldr	r3, [pc, #332]	; (8001948 <HAL_RCC_ClockConfig+0x1bc>)
 80017fa:	689b      	ldr	r3, [r3, #8]
 80017fc:	4a52      	ldr	r2, [pc, #328]	; (8001948 <HAL_RCC_ClockConfig+0x1bc>)
 80017fe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001802:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001804:	4b50      	ldr	r3, [pc, #320]	; (8001948 <HAL_RCC_ClockConfig+0x1bc>)
 8001806:	689b      	ldr	r3, [r3, #8]
 8001808:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	689b      	ldr	r3, [r3, #8]
 8001810:	494d      	ldr	r1, [pc, #308]	; (8001948 <HAL_RCC_ClockConfig+0x1bc>)
 8001812:	4313      	orrs	r3, r2
 8001814:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f003 0301 	and.w	r3, r3, #1
 800181e:	2b00      	cmp	r3, #0
 8001820:	d044      	beq.n	80018ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	2b01      	cmp	r3, #1
 8001828:	d107      	bne.n	800183a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800182a:	4b47      	ldr	r3, [pc, #284]	; (8001948 <HAL_RCC_ClockConfig+0x1bc>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001832:	2b00      	cmp	r3, #0
 8001834:	d119      	bne.n	800186a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001836:	2301      	movs	r3, #1
 8001838:	e07f      	b.n	800193a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	2b02      	cmp	r3, #2
 8001840:	d003      	beq.n	800184a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001846:	2b03      	cmp	r3, #3
 8001848:	d107      	bne.n	800185a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800184a:	4b3f      	ldr	r3, [pc, #252]	; (8001948 <HAL_RCC_ClockConfig+0x1bc>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001852:	2b00      	cmp	r3, #0
 8001854:	d109      	bne.n	800186a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001856:	2301      	movs	r3, #1
 8001858:	e06f      	b.n	800193a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800185a:	4b3b      	ldr	r3, [pc, #236]	; (8001948 <HAL_RCC_ClockConfig+0x1bc>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f003 0302 	and.w	r3, r3, #2
 8001862:	2b00      	cmp	r3, #0
 8001864:	d101      	bne.n	800186a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001866:	2301      	movs	r3, #1
 8001868:	e067      	b.n	800193a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800186a:	4b37      	ldr	r3, [pc, #220]	; (8001948 <HAL_RCC_ClockConfig+0x1bc>)
 800186c:	689b      	ldr	r3, [r3, #8]
 800186e:	f023 0203 	bic.w	r2, r3, #3
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	4934      	ldr	r1, [pc, #208]	; (8001948 <HAL_RCC_ClockConfig+0x1bc>)
 8001878:	4313      	orrs	r3, r2
 800187a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800187c:	f7ff fcca 	bl	8001214 <HAL_GetTick>
 8001880:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001882:	e00a      	b.n	800189a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001884:	f7ff fcc6 	bl	8001214 <HAL_GetTick>
 8001888:	4602      	mov	r2, r0
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	1ad3      	subs	r3, r2, r3
 800188e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001892:	4293      	cmp	r3, r2
 8001894:	d901      	bls.n	800189a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001896:	2303      	movs	r3, #3
 8001898:	e04f      	b.n	800193a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800189a:	4b2b      	ldr	r3, [pc, #172]	; (8001948 <HAL_RCC_ClockConfig+0x1bc>)
 800189c:	689b      	ldr	r3, [r3, #8]
 800189e:	f003 020c 	and.w	r2, r3, #12
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	009b      	lsls	r3, r3, #2
 80018a8:	429a      	cmp	r2, r3
 80018aa:	d1eb      	bne.n	8001884 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80018ac:	4b25      	ldr	r3, [pc, #148]	; (8001944 <HAL_RCC_ClockConfig+0x1b8>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f003 030f 	and.w	r3, r3, #15
 80018b4:	683a      	ldr	r2, [r7, #0]
 80018b6:	429a      	cmp	r2, r3
 80018b8:	d20c      	bcs.n	80018d4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018ba:	4b22      	ldr	r3, [pc, #136]	; (8001944 <HAL_RCC_ClockConfig+0x1b8>)
 80018bc:	683a      	ldr	r2, [r7, #0]
 80018be:	b2d2      	uxtb	r2, r2
 80018c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018c2:	4b20      	ldr	r3, [pc, #128]	; (8001944 <HAL_RCC_ClockConfig+0x1b8>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f003 030f 	and.w	r3, r3, #15
 80018ca:	683a      	ldr	r2, [r7, #0]
 80018cc:	429a      	cmp	r2, r3
 80018ce:	d001      	beq.n	80018d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80018d0:	2301      	movs	r3, #1
 80018d2:	e032      	b.n	800193a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f003 0304 	and.w	r3, r3, #4
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d008      	beq.n	80018f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018e0:	4b19      	ldr	r3, [pc, #100]	; (8001948 <HAL_RCC_ClockConfig+0x1bc>)
 80018e2:	689b      	ldr	r3, [r3, #8]
 80018e4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	68db      	ldr	r3, [r3, #12]
 80018ec:	4916      	ldr	r1, [pc, #88]	; (8001948 <HAL_RCC_ClockConfig+0x1bc>)
 80018ee:	4313      	orrs	r3, r2
 80018f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f003 0308 	and.w	r3, r3, #8
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d009      	beq.n	8001912 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018fe:	4b12      	ldr	r3, [pc, #72]	; (8001948 <HAL_RCC_ClockConfig+0x1bc>)
 8001900:	689b      	ldr	r3, [r3, #8]
 8001902:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	691b      	ldr	r3, [r3, #16]
 800190a:	00db      	lsls	r3, r3, #3
 800190c:	490e      	ldr	r1, [pc, #56]	; (8001948 <HAL_RCC_ClockConfig+0x1bc>)
 800190e:	4313      	orrs	r3, r2
 8001910:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001912:	f000 fbb1 	bl	8002078 <HAL_RCC_GetSysClockFreq>
 8001916:	4601      	mov	r1, r0
 8001918:	4b0b      	ldr	r3, [pc, #44]	; (8001948 <HAL_RCC_ClockConfig+0x1bc>)
 800191a:	689b      	ldr	r3, [r3, #8]
 800191c:	091b      	lsrs	r3, r3, #4
 800191e:	f003 030f 	and.w	r3, r3, #15
 8001922:	4a0a      	ldr	r2, [pc, #40]	; (800194c <HAL_RCC_ClockConfig+0x1c0>)
 8001924:	5cd3      	ldrb	r3, [r2, r3]
 8001926:	fa21 f303 	lsr.w	r3, r1, r3
 800192a:	4a09      	ldr	r2, [pc, #36]	; (8001950 <HAL_RCC_ClockConfig+0x1c4>)
 800192c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800192e:	4b09      	ldr	r3, [pc, #36]	; (8001954 <HAL_RCC_ClockConfig+0x1c8>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4618      	mov	r0, r3
 8001934:	f7ff f9b0 	bl	8000c98 <HAL_InitTick>

  return HAL_OK;
 8001938:	2300      	movs	r3, #0
}
 800193a:	4618      	mov	r0, r3
 800193c:	3710      	adds	r7, #16
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	40023c00 	.word	0x40023c00
 8001948:	40023800 	.word	0x40023800
 800194c:	08006c68 	.word	0x08006c68
 8001950:	20000004 	.word	0x20000004
 8001954:	2000000c 	.word	0x2000000c

08001958 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800195c:	4b03      	ldr	r3, [pc, #12]	; (800196c <HAL_RCC_GetHCLKFreq+0x14>)
 800195e:	681b      	ldr	r3, [r3, #0]
}
 8001960:	4618      	mov	r0, r3
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr
 800196a:	bf00      	nop
 800196c:	20000004 	.word	0x20000004

08001970 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001974:	f7ff fff0 	bl	8001958 <HAL_RCC_GetHCLKFreq>
 8001978:	4601      	mov	r1, r0
 800197a:	4b05      	ldr	r3, [pc, #20]	; (8001990 <HAL_RCC_GetPCLK1Freq+0x20>)
 800197c:	689b      	ldr	r3, [r3, #8]
 800197e:	0a9b      	lsrs	r3, r3, #10
 8001980:	f003 0307 	and.w	r3, r3, #7
 8001984:	4a03      	ldr	r2, [pc, #12]	; (8001994 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001986:	5cd3      	ldrb	r3, [r2, r3]
 8001988:	fa21 f303 	lsr.w	r3, r1, r3
}
 800198c:	4618      	mov	r0, r3
 800198e:	bd80      	pop	{r7, pc}
 8001990:	40023800 	.word	0x40023800
 8001994:	08006c78 	.word	0x08006c78

08001998 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800199c:	f7ff ffdc 	bl	8001958 <HAL_RCC_GetHCLKFreq>
 80019a0:	4601      	mov	r1, r0
 80019a2:	4b05      	ldr	r3, [pc, #20]	; (80019b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80019a4:	689b      	ldr	r3, [r3, #8]
 80019a6:	0b5b      	lsrs	r3, r3, #13
 80019a8:	f003 0307 	and.w	r3, r3, #7
 80019ac:	4a03      	ldr	r2, [pc, #12]	; (80019bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80019ae:	5cd3      	ldrb	r3, [r2, r3]
 80019b0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	40023800 	.word	0x40023800
 80019bc:	08006c78 	.word	0x08006c78

080019c0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b083      	sub	sp, #12
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
 80019c8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	220f      	movs	r2, #15
 80019ce:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80019d0:	4b12      	ldr	r3, [pc, #72]	; (8001a1c <HAL_RCC_GetClockConfig+0x5c>)
 80019d2:	689b      	ldr	r3, [r3, #8]
 80019d4:	f003 0203 	and.w	r2, r3, #3
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80019dc:	4b0f      	ldr	r3, [pc, #60]	; (8001a1c <HAL_RCC_GetClockConfig+0x5c>)
 80019de:	689b      	ldr	r3, [r3, #8]
 80019e0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80019e8:	4b0c      	ldr	r3, [pc, #48]	; (8001a1c <HAL_RCC_GetClockConfig+0x5c>)
 80019ea:	689b      	ldr	r3, [r3, #8]
 80019ec:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80019f4:	4b09      	ldr	r3, [pc, #36]	; (8001a1c <HAL_RCC_GetClockConfig+0x5c>)
 80019f6:	689b      	ldr	r3, [r3, #8]
 80019f8:	08db      	lsrs	r3, r3, #3
 80019fa:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001a02:	4b07      	ldr	r3, [pc, #28]	; (8001a20 <HAL_RCC_GetClockConfig+0x60>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f003 020f 	and.w	r2, r3, #15
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	601a      	str	r2, [r3, #0]
}
 8001a0e:	bf00      	nop
 8001a10:	370c      	adds	r7, #12
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr
 8001a1a:	bf00      	nop
 8001a1c:	40023800 	.word	0x40023800
 8001a20:	40023c00 	.word	0x40023c00

08001a24 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b08c      	sub	sp, #48	; 0x30
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8001a30:	2300      	movs	r3, #0
 8001a32:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8001a34:	2300      	movs	r3, #0
 8001a36:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8001a40:	2300      	movs	r3, #0
 8001a42:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8001a44:	2300      	movs	r3, #0
 8001a46:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f003 0301 	and.w	r3, r3, #1
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d010      	beq.n	8001a7e <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8001a5c:	4b6f      	ldr	r3, [pc, #444]	; (8001c1c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001a5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001a62:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a6a:	496c      	ldr	r1, [pc, #432]	; (8001c1c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001a6c:	4313      	orrs	r3, r2
 8001a6e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d101      	bne.n	8001a7e <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f003 0302 	and.w	r3, r3, #2
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d010      	beq.n	8001aac <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8001a8a:	4b64      	ldr	r3, [pc, #400]	; (8001c1c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001a8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001a90:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a98:	4960      	ldr	r1, [pc, #384]	; (8001c1c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d101      	bne.n	8001aac <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f003 0304 	and.w	r3, r3, #4
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d017      	beq.n	8001ae8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001ab8:	4b58      	ldr	r3, [pc, #352]	; (8001c1c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001aba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001abe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac6:	4955      	ldr	r1, [pc, #340]	; (8001c1c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001ad6:	d101      	bne.n	8001adc <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d101      	bne.n	8001ae8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f003 0308 	and.w	r3, r3, #8
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d017      	beq.n	8001b24 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001af4:	4b49      	ldr	r3, [pc, #292]	; (8001c1c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001af6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001afa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b02:	4946      	ldr	r1, [pc, #280]	; (8001c1c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001b04:	4313      	orrs	r3, r2
 8001b06:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b0e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b12:	d101      	bne.n	8001b18 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8001b14:	2301      	movs	r3, #1
 8001b16:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d101      	bne.n	8001b24 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8001b20:	2301      	movs	r3, #1
 8001b22:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f003 0320 	and.w	r3, r3, #32
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	f000 808a 	beq.w	8001c46 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001b32:	2300      	movs	r3, #0
 8001b34:	60bb      	str	r3, [r7, #8]
 8001b36:	4b39      	ldr	r3, [pc, #228]	; (8001c1c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b3a:	4a38      	ldr	r2, [pc, #224]	; (8001c1c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001b3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b40:	6413      	str	r3, [r2, #64]	; 0x40
 8001b42:	4b36      	ldr	r3, [pc, #216]	; (8001c1c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b4a:	60bb      	str	r3, [r7, #8]
 8001b4c:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001b4e:	4b34      	ldr	r3, [pc, #208]	; (8001c20 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4a33      	ldr	r2, [pc, #204]	; (8001c20 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001b54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b58:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001b5a:	f7ff fb5b 	bl	8001214 <HAL_GetTick>
 8001b5e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001b60:	e008      	b.n	8001b74 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001b62:	f7ff fb57 	bl	8001214 <HAL_GetTick>
 8001b66:	4602      	mov	r2, r0
 8001b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b6a:	1ad3      	subs	r3, r2, r3
 8001b6c:	2b02      	cmp	r3, #2
 8001b6e:	d901      	bls.n	8001b74 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8001b70:	2303      	movs	r3, #3
 8001b72:	e278      	b.n	8002066 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001b74:	4b2a      	ldr	r3, [pc, #168]	; (8001c20 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d0f0      	beq.n	8001b62 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001b80:	4b26      	ldr	r3, [pc, #152]	; (8001c1c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001b82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b84:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b88:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001b8a:	6a3b      	ldr	r3, [r7, #32]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d02f      	beq.n	8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b94:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b98:	6a3a      	ldr	r2, [r7, #32]
 8001b9a:	429a      	cmp	r2, r3
 8001b9c:	d028      	beq.n	8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001b9e:	4b1f      	ldr	r3, [pc, #124]	; (8001c1c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001ba0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ba2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ba6:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001ba8:	4b1e      	ldr	r3, [pc, #120]	; (8001c24 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8001baa:	2201      	movs	r2, #1
 8001bac:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001bae:	4b1d      	ldr	r3, [pc, #116]	; (8001c24 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8001bb4:	4a19      	ldr	r2, [pc, #100]	; (8001c1c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001bb6:	6a3b      	ldr	r3, [r7, #32]
 8001bb8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001bba:	4b18      	ldr	r3, [pc, #96]	; (8001c1c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001bbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bbe:	f003 0301 	and.w	r3, r3, #1
 8001bc2:	2b01      	cmp	r3, #1
 8001bc4:	d114      	bne.n	8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8001bc6:	f7ff fb25 	bl	8001214 <HAL_GetTick>
 8001bca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bcc:	e00a      	b.n	8001be4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bce:	f7ff fb21 	bl	8001214 <HAL_GetTick>
 8001bd2:	4602      	mov	r2, r0
 8001bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd6:	1ad3      	subs	r3, r2, r3
 8001bd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d901      	bls.n	8001be4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8001be0:	2303      	movs	r3, #3
 8001be2:	e240      	b.n	8002066 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001be4:	4b0d      	ldr	r3, [pc, #52]	; (8001c1c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001be6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001be8:	f003 0302 	and.w	r3, r3, #2
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d0ee      	beq.n	8001bce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001bf8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001bfc:	d114      	bne.n	8001c28 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8001bfe:	4b07      	ldr	r3, [pc, #28]	; (8001c1c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001c00:	689b      	ldr	r3, [r3, #8]
 8001c02:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c0a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001c0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c12:	4902      	ldr	r1, [pc, #8]	; (8001c1c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001c14:	4313      	orrs	r3, r2
 8001c16:	608b      	str	r3, [r1, #8]
 8001c18:	e00c      	b.n	8001c34 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8001c1a:	bf00      	nop
 8001c1c:	40023800 	.word	0x40023800
 8001c20:	40007000 	.word	0x40007000
 8001c24:	42470e40 	.word	0x42470e40
 8001c28:	4b4a      	ldr	r3, [pc, #296]	; (8001d54 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001c2a:	689b      	ldr	r3, [r3, #8]
 8001c2c:	4a49      	ldr	r2, [pc, #292]	; (8001d54 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001c2e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001c32:	6093      	str	r3, [r2, #8]
 8001c34:	4b47      	ldr	r3, [pc, #284]	; (8001d54 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001c36:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c40:	4944      	ldr	r1, [pc, #272]	; (8001d54 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001c42:	4313      	orrs	r3, r2
 8001c44:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f003 0310 	and.w	r3, r3, #16
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d004      	beq.n	8001c5c <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8001c58:	4b3f      	ldr	r3, [pc, #252]	; (8001d58 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8001c5a:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d00a      	beq.n	8001c7e <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8001c68:	4b3a      	ldr	r3, [pc, #232]	; (8001d54 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001c6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c6e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c76:	4937      	ldr	r1, [pc, #220]	; (8001d54 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001c78:	4313      	orrs	r3, r2
 8001c7a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d00a      	beq.n	8001ca0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001c8a:	4b32      	ldr	r3, [pc, #200]	; (8001d54 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001c8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c90:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c98:	492e      	ldr	r1, [pc, #184]	; (8001d54 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d011      	beq.n	8001cd0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001cac:	4b29      	ldr	r3, [pc, #164]	; (8001d54 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001cae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cb2:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cba:	4926      	ldr	r1, [pc, #152]	; (8001d54 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cc6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001cca:	d101      	bne.n	8001cd0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d00a      	beq.n	8001cf2 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8001cdc:	4b1d      	ldr	r3, [pc, #116]	; (8001d54 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001cde:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ce2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cea:	491a      	ldr	r1, [pc, #104]	; (8001d54 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001cec:	4313      	orrs	r3, r2
 8001cee:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d011      	beq.n	8001d22 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8001cfe:	4b15      	ldr	r3, [pc, #84]	; (8001d54 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001d00:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d04:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d0c:	4911      	ldr	r1, [pc, #68]	; (8001d54 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d18:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001d1c:	d101      	bne.n	8001d22 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8001d22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d24:	2b01      	cmp	r3, #1
 8001d26:	d005      	beq.n	8001d34 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001d30:	f040 80ff 	bne.w	8001f32 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001d34:	4b09      	ldr	r3, [pc, #36]	; (8001d5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001d3a:	f7ff fa6b 	bl	8001214 <HAL_GetTick>
 8001d3e:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001d40:	e00e      	b.n	8001d60 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001d42:	f7ff fa67 	bl	8001214 <HAL_GetTick>
 8001d46:	4602      	mov	r2, r0
 8001d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d4a:	1ad3      	subs	r3, r2, r3
 8001d4c:	2b02      	cmp	r3, #2
 8001d4e:	d907      	bls.n	8001d60 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001d50:	2303      	movs	r3, #3
 8001d52:	e188      	b.n	8002066 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8001d54:	40023800 	.word	0x40023800
 8001d58:	424711e0 	.word	0x424711e0
 8001d5c:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001d60:	4b7e      	ldr	r3, [pc, #504]	; (8001f5c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d1ea      	bne.n	8001d42 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f003 0301 	and.w	r3, r3, #1
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d003      	beq.n	8001d80 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d009      	beq.n	8001d94 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d028      	beq.n	8001dde <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d124      	bne.n	8001dde <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001d94:	4b71      	ldr	r3, [pc, #452]	; (8001f5c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001d96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001d9a:	0c1b      	lsrs	r3, r3, #16
 8001d9c:	f003 0303 	and.w	r3, r3, #3
 8001da0:	3301      	adds	r3, #1
 8001da2:	005b      	lsls	r3, r3, #1
 8001da4:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001da6:	4b6d      	ldr	r3, [pc, #436]	; (8001f5c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001da8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001dac:	0e1b      	lsrs	r3, r3, #24
 8001dae:	f003 030f 	and.w	r3, r3, #15
 8001db2:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	685a      	ldr	r2, [r3, #4]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	689b      	ldr	r3, [r3, #8]
 8001dbc:	019b      	lsls	r3, r3, #6
 8001dbe:	431a      	orrs	r2, r3
 8001dc0:	69fb      	ldr	r3, [r7, #28]
 8001dc2:	085b      	lsrs	r3, r3, #1
 8001dc4:	3b01      	subs	r3, #1
 8001dc6:	041b      	lsls	r3, r3, #16
 8001dc8:	431a      	orrs	r2, r3
 8001dca:	69bb      	ldr	r3, [r7, #24]
 8001dcc:	061b      	lsls	r3, r3, #24
 8001dce:	431a      	orrs	r2, r3
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	695b      	ldr	r3, [r3, #20]
 8001dd4:	071b      	lsls	r3, r3, #28
 8001dd6:	4961      	ldr	r1, [pc, #388]	; (8001f5c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f003 0304 	and.w	r3, r3, #4
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d004      	beq.n	8001df4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001df2:	d00a      	beq.n	8001e0a <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d035      	beq.n	8001e6c <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e04:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e08:	d130      	bne.n	8001e6c <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001e0a:	4b54      	ldr	r3, [pc, #336]	; (8001f5c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001e0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001e10:	0c1b      	lsrs	r3, r3, #16
 8001e12:	f003 0303 	and.w	r3, r3, #3
 8001e16:	3301      	adds	r3, #1
 8001e18:	005b      	lsls	r3, r3, #1
 8001e1a:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001e1c:	4b4f      	ldr	r3, [pc, #316]	; (8001f5c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001e1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001e22:	0f1b      	lsrs	r3, r3, #28
 8001e24:	f003 0307 	and.w	r3, r3, #7
 8001e28:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	685a      	ldr	r2, [r3, #4]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	689b      	ldr	r3, [r3, #8]
 8001e32:	019b      	lsls	r3, r3, #6
 8001e34:	431a      	orrs	r2, r3
 8001e36:	69fb      	ldr	r3, [r7, #28]
 8001e38:	085b      	lsrs	r3, r3, #1
 8001e3a:	3b01      	subs	r3, #1
 8001e3c:	041b      	lsls	r3, r3, #16
 8001e3e:	431a      	orrs	r2, r3
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	691b      	ldr	r3, [r3, #16]
 8001e44:	061b      	lsls	r3, r3, #24
 8001e46:	431a      	orrs	r2, r3
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	071b      	lsls	r3, r3, #28
 8001e4c:	4943      	ldr	r1, [pc, #268]	; (8001f5c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8001e54:	4b41      	ldr	r3, [pc, #260]	; (8001f5c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001e56:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001e5a:	f023 021f 	bic.w	r2, r3, #31
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e62:	3b01      	subs	r3, #1
 8001e64:	493d      	ldr	r1, [pc, #244]	; (8001f5c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001e66:	4313      	orrs	r3, r2
 8001e68:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d029      	beq.n	8001ecc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e7c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001e80:	d124      	bne.n	8001ecc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001e82:	4b36      	ldr	r3, [pc, #216]	; (8001f5c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001e84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001e88:	0c1b      	lsrs	r3, r3, #16
 8001e8a:	f003 0303 	and.w	r3, r3, #3
 8001e8e:	3301      	adds	r3, #1
 8001e90:	005b      	lsls	r3, r3, #1
 8001e92:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001e94:	4b31      	ldr	r3, [pc, #196]	; (8001f5c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001e96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001e9a:	0f1b      	lsrs	r3, r3, #28
 8001e9c:	f003 0307 	and.w	r3, r3, #7
 8001ea0:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	685a      	ldr	r2, [r3, #4]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	689b      	ldr	r3, [r3, #8]
 8001eaa:	019b      	lsls	r3, r3, #6
 8001eac:	431a      	orrs	r2, r3
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	68db      	ldr	r3, [r3, #12]
 8001eb2:	085b      	lsrs	r3, r3, #1
 8001eb4:	3b01      	subs	r3, #1
 8001eb6:	041b      	lsls	r3, r3, #16
 8001eb8:	431a      	orrs	r2, r3
 8001eba:	69bb      	ldr	r3, [r7, #24]
 8001ebc:	061b      	lsls	r3, r3, #24
 8001ebe:	431a      	orrs	r2, r3
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	071b      	lsls	r3, r3, #28
 8001ec4:	4925      	ldr	r1, [pc, #148]	; (8001f5c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d016      	beq.n	8001f06 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	685a      	ldr	r2, [r3, #4]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	019b      	lsls	r3, r3, #6
 8001ee2:	431a      	orrs	r2, r3
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	68db      	ldr	r3, [r3, #12]
 8001ee8:	085b      	lsrs	r3, r3, #1
 8001eea:	3b01      	subs	r3, #1
 8001eec:	041b      	lsls	r3, r3, #16
 8001eee:	431a      	orrs	r2, r3
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	691b      	ldr	r3, [r3, #16]
 8001ef4:	061b      	lsls	r3, r3, #24
 8001ef6:	431a      	orrs	r2, r3
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	695b      	ldr	r3, [r3, #20]
 8001efc:	071b      	lsls	r3, r3, #28
 8001efe:	4917      	ldr	r1, [pc, #92]	; (8001f5c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001f00:	4313      	orrs	r3, r2
 8001f02:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8001f06:	4b16      	ldr	r3, [pc, #88]	; (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8001f08:	2201      	movs	r2, #1
 8001f0a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001f0c:	f7ff f982 	bl	8001214 <HAL_GetTick>
 8001f10:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001f12:	e008      	b.n	8001f26 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001f14:	f7ff f97e 	bl	8001214 <HAL_GetTick>
 8001f18:	4602      	mov	r2, r0
 8001f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f1c:	1ad3      	subs	r3, r2, r3
 8001f1e:	2b02      	cmp	r3, #2
 8001f20:	d901      	bls.n	8001f26 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001f22:	2303      	movs	r3, #3
 8001f24:	e09f      	b.n	8002066 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001f26:	4b0d      	ldr	r3, [pc, #52]	; (8001f5c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d0f0      	beq.n	8001f14 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8001f32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f34:	2b01      	cmp	r3, #1
 8001f36:	f040 8095 	bne.w	8002064 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8001f3a:	4b0a      	ldr	r3, [pc, #40]	; (8001f64 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001f40:	f7ff f968 	bl	8001214 <HAL_GetTick>
 8001f44:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001f46:	e00f      	b.n	8001f68 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8001f48:	f7ff f964 	bl	8001214 <HAL_GetTick>
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f50:	1ad3      	subs	r3, r2, r3
 8001f52:	2b02      	cmp	r3, #2
 8001f54:	d908      	bls.n	8001f68 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001f56:	2303      	movs	r3, #3
 8001f58:	e085      	b.n	8002066 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8001f5a:	bf00      	nop
 8001f5c:	40023800 	.word	0x40023800
 8001f60:	42470068 	.word	0x42470068
 8001f64:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001f68:	4b41      	ldr	r3, [pc, #260]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001f70:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001f74:	d0e8      	beq.n	8001f48 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f003 0304 	and.w	r3, r3, #4
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d003      	beq.n	8001f8a <HAL_RCCEx_PeriphCLKConfig+0x566>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d009      	beq.n	8001f9e <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d02b      	beq.n	8001fee <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d127      	bne.n	8001fee <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8001f9e:	4b34      	ldr	r3, [pc, #208]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001fa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fa4:	0c1b      	lsrs	r3, r3, #16
 8001fa6:	f003 0303 	and.w	r3, r3, #3
 8001faa:	3301      	adds	r3, #1
 8001fac:	005b      	lsls	r3, r3, #1
 8001fae:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	699a      	ldr	r2, [r3, #24]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	69db      	ldr	r3, [r3, #28]
 8001fb8:	019b      	lsls	r3, r3, #6
 8001fba:	431a      	orrs	r2, r3
 8001fbc:	693b      	ldr	r3, [r7, #16]
 8001fbe:	085b      	lsrs	r3, r3, #1
 8001fc0:	3b01      	subs	r3, #1
 8001fc2:	041b      	lsls	r3, r3, #16
 8001fc4:	431a      	orrs	r2, r3
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fca:	061b      	lsls	r3, r3, #24
 8001fcc:	4928      	ldr	r1, [pc, #160]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8001fd4:	4b26      	ldr	r3, [pc, #152]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001fd6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001fda:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fe2:	3b01      	subs	r3, #1
 8001fe4:	021b      	lsls	r3, r3, #8
 8001fe6:	4922      	ldr	r1, [pc, #136]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d01d      	beq.n	8002036 <HAL_RCCEx_PeriphCLKConfig+0x612>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ffe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002002:	d118      	bne.n	8002036 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002004:	4b1a      	ldr	r3, [pc, #104]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002006:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800200a:	0e1b      	lsrs	r3, r3, #24
 800200c:	f003 030f 	and.w	r3, r3, #15
 8002010:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	699a      	ldr	r2, [r3, #24]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	69db      	ldr	r3, [r3, #28]
 800201a:	019b      	lsls	r3, r3, #6
 800201c:	431a      	orrs	r2, r3
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6a1b      	ldr	r3, [r3, #32]
 8002022:	085b      	lsrs	r3, r3, #1
 8002024:	3b01      	subs	r3, #1
 8002026:	041b      	lsls	r3, r3, #16
 8002028:	431a      	orrs	r2, r3
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	061b      	lsls	r3, r3, #24
 800202e:	4910      	ldr	r1, [pc, #64]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002030:	4313      	orrs	r3, r2
 8002032:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002036:	4b0f      	ldr	r3, [pc, #60]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8002038:	2201      	movs	r2, #1
 800203a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800203c:	f7ff f8ea 	bl	8001214 <HAL_GetTick>
 8002040:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002042:	e008      	b.n	8002056 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002044:	f7ff f8e6 	bl	8001214 <HAL_GetTick>
 8002048:	4602      	mov	r2, r0
 800204a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800204c:	1ad3      	subs	r3, r2, r3
 800204e:	2b02      	cmp	r3, #2
 8002050:	d901      	bls.n	8002056 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002052:	2303      	movs	r3, #3
 8002054:	e007      	b.n	8002066 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002056:	4b06      	ldr	r3, [pc, #24]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800205e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002062:	d1ef      	bne.n	8002044 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8002064:	2300      	movs	r3, #0
}
 8002066:	4618      	mov	r0, r3
 8002068:	3730      	adds	r7, #48	; 0x30
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	40023800 	.word	0x40023800
 8002074:	42470070 	.word	0x42470070

08002078 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002078:	b5f0      	push	{r4, r5, r6, r7, lr}
 800207a:	b087      	sub	sp, #28
 800207c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800207e:	2300      	movs	r3, #0
 8002080:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 8002082:	2300      	movs	r3, #0
 8002084:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 8002086:	2300      	movs	r3, #0
 8002088:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 800208a:	2300      	movs	r3, #0
 800208c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800208e:	2300      	movs	r3, #0
 8002090:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002092:	4bc6      	ldr	r3, [pc, #792]	; (80023ac <HAL_RCC_GetSysClockFreq+0x334>)
 8002094:	689b      	ldr	r3, [r3, #8]
 8002096:	f003 030c 	and.w	r3, r3, #12
 800209a:	2b0c      	cmp	r3, #12
 800209c:	f200 817e 	bhi.w	800239c <HAL_RCC_GetSysClockFreq+0x324>
 80020a0:	a201      	add	r2, pc, #4	; (adr r2, 80020a8 <HAL_RCC_GetSysClockFreq+0x30>)
 80020a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020a6:	bf00      	nop
 80020a8:	080020dd 	.word	0x080020dd
 80020ac:	0800239d 	.word	0x0800239d
 80020b0:	0800239d 	.word	0x0800239d
 80020b4:	0800239d 	.word	0x0800239d
 80020b8:	080020e3 	.word	0x080020e3
 80020bc:	0800239d 	.word	0x0800239d
 80020c0:	0800239d 	.word	0x0800239d
 80020c4:	0800239d 	.word	0x0800239d
 80020c8:	080020e9 	.word	0x080020e9
 80020cc:	0800239d 	.word	0x0800239d
 80020d0:	0800239d 	.word	0x0800239d
 80020d4:	0800239d 	.word	0x0800239d
 80020d8:	08002245 	.word	0x08002245
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80020dc:	4bb4      	ldr	r3, [pc, #720]	; (80023b0 <HAL_RCC_GetSysClockFreq+0x338>)
 80020de:	613b      	str	r3, [r7, #16]
       break;
 80020e0:	e15f      	b.n	80023a2 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80020e2:	4bb4      	ldr	r3, [pc, #720]	; (80023b4 <HAL_RCC_GetSysClockFreq+0x33c>)
 80020e4:	613b      	str	r3, [r7, #16]
      break;
 80020e6:	e15c      	b.n	80023a2 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80020e8:	4bb0      	ldr	r3, [pc, #704]	; (80023ac <HAL_RCC_GetSysClockFreq+0x334>)
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80020f0:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80020f2:	4bae      	ldr	r3, [pc, #696]	; (80023ac <HAL_RCC_GetSysClockFreq+0x334>)
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d04a      	beq.n	8002194 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020fe:	4bab      	ldr	r3, [pc, #684]	; (80023ac <HAL_RCC_GetSysClockFreq+0x334>)
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	099b      	lsrs	r3, r3, #6
 8002104:	f04f 0400 	mov.w	r4, #0
 8002108:	f240 11ff 	movw	r1, #511	; 0x1ff
 800210c:	f04f 0200 	mov.w	r2, #0
 8002110:	ea03 0501 	and.w	r5, r3, r1
 8002114:	ea04 0602 	and.w	r6, r4, r2
 8002118:	4629      	mov	r1, r5
 800211a:	4632      	mov	r2, r6
 800211c:	f04f 0300 	mov.w	r3, #0
 8002120:	f04f 0400 	mov.w	r4, #0
 8002124:	0154      	lsls	r4, r2, #5
 8002126:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800212a:	014b      	lsls	r3, r1, #5
 800212c:	4619      	mov	r1, r3
 800212e:	4622      	mov	r2, r4
 8002130:	1b49      	subs	r1, r1, r5
 8002132:	eb62 0206 	sbc.w	r2, r2, r6
 8002136:	f04f 0300 	mov.w	r3, #0
 800213a:	f04f 0400 	mov.w	r4, #0
 800213e:	0194      	lsls	r4, r2, #6
 8002140:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002144:	018b      	lsls	r3, r1, #6
 8002146:	1a5b      	subs	r3, r3, r1
 8002148:	eb64 0402 	sbc.w	r4, r4, r2
 800214c:	f04f 0100 	mov.w	r1, #0
 8002150:	f04f 0200 	mov.w	r2, #0
 8002154:	00e2      	lsls	r2, r4, #3
 8002156:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800215a:	00d9      	lsls	r1, r3, #3
 800215c:	460b      	mov	r3, r1
 800215e:	4614      	mov	r4, r2
 8002160:	195b      	adds	r3, r3, r5
 8002162:	eb44 0406 	adc.w	r4, r4, r6
 8002166:	f04f 0100 	mov.w	r1, #0
 800216a:	f04f 0200 	mov.w	r2, #0
 800216e:	0262      	lsls	r2, r4, #9
 8002170:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002174:	0259      	lsls	r1, r3, #9
 8002176:	460b      	mov	r3, r1
 8002178:	4614      	mov	r4, r2
 800217a:	4618      	mov	r0, r3
 800217c:	4621      	mov	r1, r4
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	f04f 0400 	mov.w	r4, #0
 8002184:	461a      	mov	r2, r3
 8002186:	4623      	mov	r3, r4
 8002188:	f7fe f854 	bl	8000234 <__aeabi_uldivmod>
 800218c:	4603      	mov	r3, r0
 800218e:	460c      	mov	r4, r1
 8002190:	617b      	str	r3, [r7, #20]
 8002192:	e049      	b.n	8002228 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002194:	4b85      	ldr	r3, [pc, #532]	; (80023ac <HAL_RCC_GetSysClockFreq+0x334>)
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	099b      	lsrs	r3, r3, #6
 800219a:	f04f 0400 	mov.w	r4, #0
 800219e:	f240 11ff 	movw	r1, #511	; 0x1ff
 80021a2:	f04f 0200 	mov.w	r2, #0
 80021a6:	ea03 0501 	and.w	r5, r3, r1
 80021aa:	ea04 0602 	and.w	r6, r4, r2
 80021ae:	4629      	mov	r1, r5
 80021b0:	4632      	mov	r2, r6
 80021b2:	f04f 0300 	mov.w	r3, #0
 80021b6:	f04f 0400 	mov.w	r4, #0
 80021ba:	0154      	lsls	r4, r2, #5
 80021bc:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80021c0:	014b      	lsls	r3, r1, #5
 80021c2:	4619      	mov	r1, r3
 80021c4:	4622      	mov	r2, r4
 80021c6:	1b49      	subs	r1, r1, r5
 80021c8:	eb62 0206 	sbc.w	r2, r2, r6
 80021cc:	f04f 0300 	mov.w	r3, #0
 80021d0:	f04f 0400 	mov.w	r4, #0
 80021d4:	0194      	lsls	r4, r2, #6
 80021d6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80021da:	018b      	lsls	r3, r1, #6
 80021dc:	1a5b      	subs	r3, r3, r1
 80021de:	eb64 0402 	sbc.w	r4, r4, r2
 80021e2:	f04f 0100 	mov.w	r1, #0
 80021e6:	f04f 0200 	mov.w	r2, #0
 80021ea:	00e2      	lsls	r2, r4, #3
 80021ec:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80021f0:	00d9      	lsls	r1, r3, #3
 80021f2:	460b      	mov	r3, r1
 80021f4:	4614      	mov	r4, r2
 80021f6:	195b      	adds	r3, r3, r5
 80021f8:	eb44 0406 	adc.w	r4, r4, r6
 80021fc:	f04f 0100 	mov.w	r1, #0
 8002200:	f04f 0200 	mov.w	r2, #0
 8002204:	02a2      	lsls	r2, r4, #10
 8002206:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800220a:	0299      	lsls	r1, r3, #10
 800220c:	460b      	mov	r3, r1
 800220e:	4614      	mov	r4, r2
 8002210:	4618      	mov	r0, r3
 8002212:	4621      	mov	r1, r4
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	f04f 0400 	mov.w	r4, #0
 800221a:	461a      	mov	r2, r3
 800221c:	4623      	mov	r3, r4
 800221e:	f7fe f809 	bl	8000234 <__aeabi_uldivmod>
 8002222:	4603      	mov	r3, r0
 8002224:	460c      	mov	r4, r1
 8002226:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002228:	4b60      	ldr	r3, [pc, #384]	; (80023ac <HAL_RCC_GetSysClockFreq+0x334>)
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	0c1b      	lsrs	r3, r3, #16
 800222e:	f003 0303 	and.w	r3, r3, #3
 8002232:	3301      	adds	r3, #1
 8002234:	005b      	lsls	r3, r3, #1
 8002236:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8002238:	697a      	ldr	r2, [r7, #20]
 800223a:	68bb      	ldr	r3, [r7, #8]
 800223c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002240:	613b      	str	r3, [r7, #16]
      break;
 8002242:	e0ae      	b.n	80023a2 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002244:	4b59      	ldr	r3, [pc, #356]	; (80023ac <HAL_RCC_GetSysClockFreq+0x334>)
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800224c:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800224e:	4b57      	ldr	r3, [pc, #348]	; (80023ac <HAL_RCC_GetSysClockFreq+0x334>)
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002256:	2b00      	cmp	r3, #0
 8002258:	d04a      	beq.n	80022f0 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800225a:	4b54      	ldr	r3, [pc, #336]	; (80023ac <HAL_RCC_GetSysClockFreq+0x334>)
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	099b      	lsrs	r3, r3, #6
 8002260:	f04f 0400 	mov.w	r4, #0
 8002264:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002268:	f04f 0200 	mov.w	r2, #0
 800226c:	ea03 0501 	and.w	r5, r3, r1
 8002270:	ea04 0602 	and.w	r6, r4, r2
 8002274:	4629      	mov	r1, r5
 8002276:	4632      	mov	r2, r6
 8002278:	f04f 0300 	mov.w	r3, #0
 800227c:	f04f 0400 	mov.w	r4, #0
 8002280:	0154      	lsls	r4, r2, #5
 8002282:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002286:	014b      	lsls	r3, r1, #5
 8002288:	4619      	mov	r1, r3
 800228a:	4622      	mov	r2, r4
 800228c:	1b49      	subs	r1, r1, r5
 800228e:	eb62 0206 	sbc.w	r2, r2, r6
 8002292:	f04f 0300 	mov.w	r3, #0
 8002296:	f04f 0400 	mov.w	r4, #0
 800229a:	0194      	lsls	r4, r2, #6
 800229c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80022a0:	018b      	lsls	r3, r1, #6
 80022a2:	1a5b      	subs	r3, r3, r1
 80022a4:	eb64 0402 	sbc.w	r4, r4, r2
 80022a8:	f04f 0100 	mov.w	r1, #0
 80022ac:	f04f 0200 	mov.w	r2, #0
 80022b0:	00e2      	lsls	r2, r4, #3
 80022b2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80022b6:	00d9      	lsls	r1, r3, #3
 80022b8:	460b      	mov	r3, r1
 80022ba:	4614      	mov	r4, r2
 80022bc:	195b      	adds	r3, r3, r5
 80022be:	eb44 0406 	adc.w	r4, r4, r6
 80022c2:	f04f 0100 	mov.w	r1, #0
 80022c6:	f04f 0200 	mov.w	r2, #0
 80022ca:	0262      	lsls	r2, r4, #9
 80022cc:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80022d0:	0259      	lsls	r1, r3, #9
 80022d2:	460b      	mov	r3, r1
 80022d4:	4614      	mov	r4, r2
 80022d6:	4618      	mov	r0, r3
 80022d8:	4621      	mov	r1, r4
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	f04f 0400 	mov.w	r4, #0
 80022e0:	461a      	mov	r2, r3
 80022e2:	4623      	mov	r3, r4
 80022e4:	f7fd ffa6 	bl	8000234 <__aeabi_uldivmod>
 80022e8:	4603      	mov	r3, r0
 80022ea:	460c      	mov	r4, r1
 80022ec:	617b      	str	r3, [r7, #20]
 80022ee:	e049      	b.n	8002384 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022f0:	4b2e      	ldr	r3, [pc, #184]	; (80023ac <HAL_RCC_GetSysClockFreq+0x334>)
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	099b      	lsrs	r3, r3, #6
 80022f6:	f04f 0400 	mov.w	r4, #0
 80022fa:	f240 11ff 	movw	r1, #511	; 0x1ff
 80022fe:	f04f 0200 	mov.w	r2, #0
 8002302:	ea03 0501 	and.w	r5, r3, r1
 8002306:	ea04 0602 	and.w	r6, r4, r2
 800230a:	4629      	mov	r1, r5
 800230c:	4632      	mov	r2, r6
 800230e:	f04f 0300 	mov.w	r3, #0
 8002312:	f04f 0400 	mov.w	r4, #0
 8002316:	0154      	lsls	r4, r2, #5
 8002318:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800231c:	014b      	lsls	r3, r1, #5
 800231e:	4619      	mov	r1, r3
 8002320:	4622      	mov	r2, r4
 8002322:	1b49      	subs	r1, r1, r5
 8002324:	eb62 0206 	sbc.w	r2, r2, r6
 8002328:	f04f 0300 	mov.w	r3, #0
 800232c:	f04f 0400 	mov.w	r4, #0
 8002330:	0194      	lsls	r4, r2, #6
 8002332:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002336:	018b      	lsls	r3, r1, #6
 8002338:	1a5b      	subs	r3, r3, r1
 800233a:	eb64 0402 	sbc.w	r4, r4, r2
 800233e:	f04f 0100 	mov.w	r1, #0
 8002342:	f04f 0200 	mov.w	r2, #0
 8002346:	00e2      	lsls	r2, r4, #3
 8002348:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800234c:	00d9      	lsls	r1, r3, #3
 800234e:	460b      	mov	r3, r1
 8002350:	4614      	mov	r4, r2
 8002352:	195b      	adds	r3, r3, r5
 8002354:	eb44 0406 	adc.w	r4, r4, r6
 8002358:	f04f 0100 	mov.w	r1, #0
 800235c:	f04f 0200 	mov.w	r2, #0
 8002360:	02a2      	lsls	r2, r4, #10
 8002362:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002366:	0299      	lsls	r1, r3, #10
 8002368:	460b      	mov	r3, r1
 800236a:	4614      	mov	r4, r2
 800236c:	4618      	mov	r0, r3
 800236e:	4621      	mov	r1, r4
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	f04f 0400 	mov.w	r4, #0
 8002376:	461a      	mov	r2, r3
 8002378:	4623      	mov	r3, r4
 800237a:	f7fd ff5b 	bl	8000234 <__aeabi_uldivmod>
 800237e:	4603      	mov	r3, r0
 8002380:	460c      	mov	r4, r1
 8002382:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002384:	4b09      	ldr	r3, [pc, #36]	; (80023ac <HAL_RCC_GetSysClockFreq+0x334>)
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	0f1b      	lsrs	r3, r3, #28
 800238a:	f003 0307 	and.w	r3, r3, #7
 800238e:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8002390:	697a      	ldr	r2, [r7, #20]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	fbb2 f3f3 	udiv	r3, r2, r3
 8002398:	613b      	str	r3, [r7, #16]
      break;
 800239a:	e002      	b.n	80023a2 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800239c:	4b04      	ldr	r3, [pc, #16]	; (80023b0 <HAL_RCC_GetSysClockFreq+0x338>)
 800239e:	613b      	str	r3, [r7, #16]
      break;
 80023a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023a2:	693b      	ldr	r3, [r7, #16]
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	371c      	adds	r7, #28
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80023ac:	40023800 	.word	0x40023800
 80023b0:	00f42400 	.word	0x00f42400
 80023b4:	007a1200 	.word	0x007a1200

080023b8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b086      	sub	sp, #24
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80023c0:	2300      	movs	r3, #0
 80023c2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f003 0301 	and.w	r3, r3, #1
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	f000 8083 	beq.w	80024d8 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80023d2:	4b95      	ldr	r3, [pc, #596]	; (8002628 <HAL_RCC_OscConfig+0x270>)
 80023d4:	689b      	ldr	r3, [r3, #8]
 80023d6:	f003 030c 	and.w	r3, r3, #12
 80023da:	2b04      	cmp	r3, #4
 80023dc:	d019      	beq.n	8002412 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80023de:	4b92      	ldr	r3, [pc, #584]	; (8002628 <HAL_RCC_OscConfig+0x270>)
 80023e0:	689b      	ldr	r3, [r3, #8]
 80023e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80023e6:	2b08      	cmp	r3, #8
 80023e8:	d106      	bne.n	80023f8 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80023ea:	4b8f      	ldr	r3, [pc, #572]	; (8002628 <HAL_RCC_OscConfig+0x270>)
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80023f6:	d00c      	beq.n	8002412 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023f8:	4b8b      	ldr	r3, [pc, #556]	; (8002628 <HAL_RCC_OscConfig+0x270>)
 80023fa:	689b      	ldr	r3, [r3, #8]
 80023fc:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002400:	2b0c      	cmp	r3, #12
 8002402:	d112      	bne.n	800242a <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002404:	4b88      	ldr	r3, [pc, #544]	; (8002628 <HAL_RCC_OscConfig+0x270>)
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800240c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002410:	d10b      	bne.n	800242a <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002412:	4b85      	ldr	r3, [pc, #532]	; (8002628 <HAL_RCC_OscConfig+0x270>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800241a:	2b00      	cmp	r3, #0
 800241c:	d05b      	beq.n	80024d6 <HAL_RCC_OscConfig+0x11e>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d157      	bne.n	80024d6 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	e216      	b.n	8002858 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002432:	d106      	bne.n	8002442 <HAL_RCC_OscConfig+0x8a>
 8002434:	4b7c      	ldr	r3, [pc, #496]	; (8002628 <HAL_RCC_OscConfig+0x270>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a7b      	ldr	r2, [pc, #492]	; (8002628 <HAL_RCC_OscConfig+0x270>)
 800243a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800243e:	6013      	str	r3, [r2, #0]
 8002440:	e01d      	b.n	800247e <HAL_RCC_OscConfig+0xc6>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800244a:	d10c      	bne.n	8002466 <HAL_RCC_OscConfig+0xae>
 800244c:	4b76      	ldr	r3, [pc, #472]	; (8002628 <HAL_RCC_OscConfig+0x270>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a75      	ldr	r2, [pc, #468]	; (8002628 <HAL_RCC_OscConfig+0x270>)
 8002452:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002456:	6013      	str	r3, [r2, #0]
 8002458:	4b73      	ldr	r3, [pc, #460]	; (8002628 <HAL_RCC_OscConfig+0x270>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a72      	ldr	r2, [pc, #456]	; (8002628 <HAL_RCC_OscConfig+0x270>)
 800245e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002462:	6013      	str	r3, [r2, #0]
 8002464:	e00b      	b.n	800247e <HAL_RCC_OscConfig+0xc6>
 8002466:	4b70      	ldr	r3, [pc, #448]	; (8002628 <HAL_RCC_OscConfig+0x270>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a6f      	ldr	r2, [pc, #444]	; (8002628 <HAL_RCC_OscConfig+0x270>)
 800246c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002470:	6013      	str	r3, [r2, #0]
 8002472:	4b6d      	ldr	r3, [pc, #436]	; (8002628 <HAL_RCC_OscConfig+0x270>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a6c      	ldr	r2, [pc, #432]	; (8002628 <HAL_RCC_OscConfig+0x270>)
 8002478:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800247c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d013      	beq.n	80024ae <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002486:	f7fe fec5 	bl	8001214 <HAL_GetTick>
 800248a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800248c:	e008      	b.n	80024a0 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800248e:	f7fe fec1 	bl	8001214 <HAL_GetTick>
 8002492:	4602      	mov	r2, r0
 8002494:	693b      	ldr	r3, [r7, #16]
 8002496:	1ad3      	subs	r3, r2, r3
 8002498:	2b64      	cmp	r3, #100	; 0x64
 800249a:	d901      	bls.n	80024a0 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800249c:	2303      	movs	r3, #3
 800249e:	e1db      	b.n	8002858 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024a0:	4b61      	ldr	r3, [pc, #388]	; (8002628 <HAL_RCC_OscConfig+0x270>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d0f0      	beq.n	800248e <HAL_RCC_OscConfig+0xd6>
 80024ac:	e014      	b.n	80024d8 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024ae:	f7fe feb1 	bl	8001214 <HAL_GetTick>
 80024b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024b4:	e008      	b.n	80024c8 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024b6:	f7fe fead 	bl	8001214 <HAL_GetTick>
 80024ba:	4602      	mov	r2, r0
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	1ad3      	subs	r3, r2, r3
 80024c0:	2b64      	cmp	r3, #100	; 0x64
 80024c2:	d901      	bls.n	80024c8 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 80024c4:	2303      	movs	r3, #3
 80024c6:	e1c7      	b.n	8002858 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024c8:	4b57      	ldr	r3, [pc, #348]	; (8002628 <HAL_RCC_OscConfig+0x270>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d1f0      	bne.n	80024b6 <HAL_RCC_OscConfig+0xfe>
 80024d4:	e000      	b.n	80024d8 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024d6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f003 0302 	and.w	r3, r3, #2
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d06f      	beq.n	80025c4 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80024e4:	4b50      	ldr	r3, [pc, #320]	; (8002628 <HAL_RCC_OscConfig+0x270>)
 80024e6:	689b      	ldr	r3, [r3, #8]
 80024e8:	f003 030c 	and.w	r3, r3, #12
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d017      	beq.n	8002520 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80024f0:	4b4d      	ldr	r3, [pc, #308]	; (8002628 <HAL_RCC_OscConfig+0x270>)
 80024f2:	689b      	ldr	r3, [r3, #8]
 80024f4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80024f8:	2b08      	cmp	r3, #8
 80024fa:	d105      	bne.n	8002508 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80024fc:	4b4a      	ldr	r3, [pc, #296]	; (8002628 <HAL_RCC_OscConfig+0x270>)
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002504:	2b00      	cmp	r3, #0
 8002506:	d00b      	beq.n	8002520 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002508:	4b47      	ldr	r3, [pc, #284]	; (8002628 <HAL_RCC_OscConfig+0x270>)
 800250a:	689b      	ldr	r3, [r3, #8]
 800250c:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002510:	2b0c      	cmp	r3, #12
 8002512:	d11c      	bne.n	800254e <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002514:	4b44      	ldr	r3, [pc, #272]	; (8002628 <HAL_RCC_OscConfig+0x270>)
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800251c:	2b00      	cmp	r3, #0
 800251e:	d116      	bne.n	800254e <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002520:	4b41      	ldr	r3, [pc, #260]	; (8002628 <HAL_RCC_OscConfig+0x270>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f003 0302 	and.w	r3, r3, #2
 8002528:	2b00      	cmp	r3, #0
 800252a:	d005      	beq.n	8002538 <HAL_RCC_OscConfig+0x180>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	68db      	ldr	r3, [r3, #12]
 8002530:	2b01      	cmp	r3, #1
 8002532:	d001      	beq.n	8002538 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8002534:	2301      	movs	r3, #1
 8002536:	e18f      	b.n	8002858 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002538:	4b3b      	ldr	r3, [pc, #236]	; (8002628 <HAL_RCC_OscConfig+0x270>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	691b      	ldr	r3, [r3, #16]
 8002544:	00db      	lsls	r3, r3, #3
 8002546:	4938      	ldr	r1, [pc, #224]	; (8002628 <HAL_RCC_OscConfig+0x270>)
 8002548:	4313      	orrs	r3, r2
 800254a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800254c:	e03a      	b.n	80025c4 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	68db      	ldr	r3, [r3, #12]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d020      	beq.n	8002598 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002556:	4b35      	ldr	r3, [pc, #212]	; (800262c <HAL_RCC_OscConfig+0x274>)
 8002558:	2201      	movs	r2, #1
 800255a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800255c:	f7fe fe5a 	bl	8001214 <HAL_GetTick>
 8002560:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002562:	e008      	b.n	8002576 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002564:	f7fe fe56 	bl	8001214 <HAL_GetTick>
 8002568:	4602      	mov	r2, r0
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	1ad3      	subs	r3, r2, r3
 800256e:	2b02      	cmp	r3, #2
 8002570:	d901      	bls.n	8002576 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002572:	2303      	movs	r3, #3
 8002574:	e170      	b.n	8002858 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002576:	4b2c      	ldr	r3, [pc, #176]	; (8002628 <HAL_RCC_OscConfig+0x270>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f003 0302 	and.w	r3, r3, #2
 800257e:	2b00      	cmp	r3, #0
 8002580:	d0f0      	beq.n	8002564 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002582:	4b29      	ldr	r3, [pc, #164]	; (8002628 <HAL_RCC_OscConfig+0x270>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	691b      	ldr	r3, [r3, #16]
 800258e:	00db      	lsls	r3, r3, #3
 8002590:	4925      	ldr	r1, [pc, #148]	; (8002628 <HAL_RCC_OscConfig+0x270>)
 8002592:	4313      	orrs	r3, r2
 8002594:	600b      	str	r3, [r1, #0]
 8002596:	e015      	b.n	80025c4 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002598:	4b24      	ldr	r3, [pc, #144]	; (800262c <HAL_RCC_OscConfig+0x274>)
 800259a:	2200      	movs	r2, #0
 800259c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800259e:	f7fe fe39 	bl	8001214 <HAL_GetTick>
 80025a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025a4:	e008      	b.n	80025b8 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025a6:	f7fe fe35 	bl	8001214 <HAL_GetTick>
 80025aa:	4602      	mov	r2, r0
 80025ac:	693b      	ldr	r3, [r7, #16]
 80025ae:	1ad3      	subs	r3, r2, r3
 80025b0:	2b02      	cmp	r3, #2
 80025b2:	d901      	bls.n	80025b8 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80025b4:	2303      	movs	r3, #3
 80025b6:	e14f      	b.n	8002858 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025b8:	4b1b      	ldr	r3, [pc, #108]	; (8002628 <HAL_RCC_OscConfig+0x270>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f003 0302 	and.w	r3, r3, #2
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d1f0      	bne.n	80025a6 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f003 0308 	and.w	r3, r3, #8
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d037      	beq.n	8002640 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	695b      	ldr	r3, [r3, #20]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d016      	beq.n	8002606 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025d8:	4b15      	ldr	r3, [pc, #84]	; (8002630 <HAL_RCC_OscConfig+0x278>)
 80025da:	2201      	movs	r2, #1
 80025dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025de:	f7fe fe19 	bl	8001214 <HAL_GetTick>
 80025e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025e4:	e008      	b.n	80025f8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025e6:	f7fe fe15 	bl	8001214 <HAL_GetTick>
 80025ea:	4602      	mov	r2, r0
 80025ec:	693b      	ldr	r3, [r7, #16]
 80025ee:	1ad3      	subs	r3, r2, r3
 80025f0:	2b02      	cmp	r3, #2
 80025f2:	d901      	bls.n	80025f8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80025f4:	2303      	movs	r3, #3
 80025f6:	e12f      	b.n	8002858 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025f8:	4b0b      	ldr	r3, [pc, #44]	; (8002628 <HAL_RCC_OscConfig+0x270>)
 80025fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025fc:	f003 0302 	and.w	r3, r3, #2
 8002600:	2b00      	cmp	r3, #0
 8002602:	d0f0      	beq.n	80025e6 <HAL_RCC_OscConfig+0x22e>
 8002604:	e01c      	b.n	8002640 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002606:	4b0a      	ldr	r3, [pc, #40]	; (8002630 <HAL_RCC_OscConfig+0x278>)
 8002608:	2200      	movs	r2, #0
 800260a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800260c:	f7fe fe02 	bl	8001214 <HAL_GetTick>
 8002610:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002612:	e00f      	b.n	8002634 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002614:	f7fe fdfe 	bl	8001214 <HAL_GetTick>
 8002618:	4602      	mov	r2, r0
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	1ad3      	subs	r3, r2, r3
 800261e:	2b02      	cmp	r3, #2
 8002620:	d908      	bls.n	8002634 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8002622:	2303      	movs	r3, #3
 8002624:	e118      	b.n	8002858 <HAL_RCC_OscConfig+0x4a0>
 8002626:	bf00      	nop
 8002628:	40023800 	.word	0x40023800
 800262c:	42470000 	.word	0x42470000
 8002630:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002634:	4b8a      	ldr	r3, [pc, #552]	; (8002860 <HAL_RCC_OscConfig+0x4a8>)
 8002636:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002638:	f003 0302 	and.w	r3, r3, #2
 800263c:	2b00      	cmp	r3, #0
 800263e:	d1e9      	bne.n	8002614 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f003 0304 	and.w	r3, r3, #4
 8002648:	2b00      	cmp	r3, #0
 800264a:	f000 8097 	beq.w	800277c <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800264e:	2300      	movs	r3, #0
 8002650:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002652:	4b83      	ldr	r3, [pc, #524]	; (8002860 <HAL_RCC_OscConfig+0x4a8>)
 8002654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002656:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800265a:	2b00      	cmp	r3, #0
 800265c:	d10f      	bne.n	800267e <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800265e:	2300      	movs	r3, #0
 8002660:	60fb      	str	r3, [r7, #12]
 8002662:	4b7f      	ldr	r3, [pc, #508]	; (8002860 <HAL_RCC_OscConfig+0x4a8>)
 8002664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002666:	4a7e      	ldr	r2, [pc, #504]	; (8002860 <HAL_RCC_OscConfig+0x4a8>)
 8002668:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800266c:	6413      	str	r3, [r2, #64]	; 0x40
 800266e:	4b7c      	ldr	r3, [pc, #496]	; (8002860 <HAL_RCC_OscConfig+0x4a8>)
 8002670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002672:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002676:	60fb      	str	r3, [r7, #12]
 8002678:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800267a:	2301      	movs	r3, #1
 800267c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800267e:	4b79      	ldr	r3, [pc, #484]	; (8002864 <HAL_RCC_OscConfig+0x4ac>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002686:	2b00      	cmp	r3, #0
 8002688:	d118      	bne.n	80026bc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800268a:	4b76      	ldr	r3, [pc, #472]	; (8002864 <HAL_RCC_OscConfig+0x4ac>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4a75      	ldr	r2, [pc, #468]	; (8002864 <HAL_RCC_OscConfig+0x4ac>)
 8002690:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002694:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002696:	f7fe fdbd 	bl	8001214 <HAL_GetTick>
 800269a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800269c:	e008      	b.n	80026b0 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800269e:	f7fe fdb9 	bl	8001214 <HAL_GetTick>
 80026a2:	4602      	mov	r2, r0
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	1ad3      	subs	r3, r2, r3
 80026a8:	2b02      	cmp	r3, #2
 80026aa:	d901      	bls.n	80026b0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80026ac:	2303      	movs	r3, #3
 80026ae:	e0d3      	b.n	8002858 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026b0:	4b6c      	ldr	r3, [pc, #432]	; (8002864 <HAL_RCC_OscConfig+0x4ac>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d0f0      	beq.n	800269e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	689b      	ldr	r3, [r3, #8]
 80026c0:	2b01      	cmp	r3, #1
 80026c2:	d106      	bne.n	80026d2 <HAL_RCC_OscConfig+0x31a>
 80026c4:	4b66      	ldr	r3, [pc, #408]	; (8002860 <HAL_RCC_OscConfig+0x4a8>)
 80026c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026c8:	4a65      	ldr	r2, [pc, #404]	; (8002860 <HAL_RCC_OscConfig+0x4a8>)
 80026ca:	f043 0301 	orr.w	r3, r3, #1
 80026ce:	6713      	str	r3, [r2, #112]	; 0x70
 80026d0:	e01c      	b.n	800270c <HAL_RCC_OscConfig+0x354>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	2b05      	cmp	r3, #5
 80026d8:	d10c      	bne.n	80026f4 <HAL_RCC_OscConfig+0x33c>
 80026da:	4b61      	ldr	r3, [pc, #388]	; (8002860 <HAL_RCC_OscConfig+0x4a8>)
 80026dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026de:	4a60      	ldr	r2, [pc, #384]	; (8002860 <HAL_RCC_OscConfig+0x4a8>)
 80026e0:	f043 0304 	orr.w	r3, r3, #4
 80026e4:	6713      	str	r3, [r2, #112]	; 0x70
 80026e6:	4b5e      	ldr	r3, [pc, #376]	; (8002860 <HAL_RCC_OscConfig+0x4a8>)
 80026e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026ea:	4a5d      	ldr	r2, [pc, #372]	; (8002860 <HAL_RCC_OscConfig+0x4a8>)
 80026ec:	f043 0301 	orr.w	r3, r3, #1
 80026f0:	6713      	str	r3, [r2, #112]	; 0x70
 80026f2:	e00b      	b.n	800270c <HAL_RCC_OscConfig+0x354>
 80026f4:	4b5a      	ldr	r3, [pc, #360]	; (8002860 <HAL_RCC_OscConfig+0x4a8>)
 80026f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026f8:	4a59      	ldr	r2, [pc, #356]	; (8002860 <HAL_RCC_OscConfig+0x4a8>)
 80026fa:	f023 0301 	bic.w	r3, r3, #1
 80026fe:	6713      	str	r3, [r2, #112]	; 0x70
 8002700:	4b57      	ldr	r3, [pc, #348]	; (8002860 <HAL_RCC_OscConfig+0x4a8>)
 8002702:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002704:	4a56      	ldr	r2, [pc, #344]	; (8002860 <HAL_RCC_OscConfig+0x4a8>)
 8002706:	f023 0304 	bic.w	r3, r3, #4
 800270a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d015      	beq.n	8002740 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002714:	f7fe fd7e 	bl	8001214 <HAL_GetTick>
 8002718:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800271a:	e00a      	b.n	8002732 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800271c:	f7fe fd7a 	bl	8001214 <HAL_GetTick>
 8002720:	4602      	mov	r2, r0
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	1ad3      	subs	r3, r2, r3
 8002726:	f241 3288 	movw	r2, #5000	; 0x1388
 800272a:	4293      	cmp	r3, r2
 800272c:	d901      	bls.n	8002732 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 800272e:	2303      	movs	r3, #3
 8002730:	e092      	b.n	8002858 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002732:	4b4b      	ldr	r3, [pc, #300]	; (8002860 <HAL_RCC_OscConfig+0x4a8>)
 8002734:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002736:	f003 0302 	and.w	r3, r3, #2
 800273a:	2b00      	cmp	r3, #0
 800273c:	d0ee      	beq.n	800271c <HAL_RCC_OscConfig+0x364>
 800273e:	e014      	b.n	800276a <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002740:	f7fe fd68 	bl	8001214 <HAL_GetTick>
 8002744:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002746:	e00a      	b.n	800275e <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002748:	f7fe fd64 	bl	8001214 <HAL_GetTick>
 800274c:	4602      	mov	r2, r0
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	1ad3      	subs	r3, r2, r3
 8002752:	f241 3288 	movw	r2, #5000	; 0x1388
 8002756:	4293      	cmp	r3, r2
 8002758:	d901      	bls.n	800275e <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 800275a:	2303      	movs	r3, #3
 800275c:	e07c      	b.n	8002858 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800275e:	4b40      	ldr	r3, [pc, #256]	; (8002860 <HAL_RCC_OscConfig+0x4a8>)
 8002760:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002762:	f003 0302 	and.w	r3, r3, #2
 8002766:	2b00      	cmp	r3, #0
 8002768:	d1ee      	bne.n	8002748 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800276a:	7dfb      	ldrb	r3, [r7, #23]
 800276c:	2b01      	cmp	r3, #1
 800276e:	d105      	bne.n	800277c <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002770:	4b3b      	ldr	r3, [pc, #236]	; (8002860 <HAL_RCC_OscConfig+0x4a8>)
 8002772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002774:	4a3a      	ldr	r2, [pc, #232]	; (8002860 <HAL_RCC_OscConfig+0x4a8>)
 8002776:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800277a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	699b      	ldr	r3, [r3, #24]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d068      	beq.n	8002856 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002784:	4b36      	ldr	r3, [pc, #216]	; (8002860 <HAL_RCC_OscConfig+0x4a8>)
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	f003 030c 	and.w	r3, r3, #12
 800278c:	2b08      	cmp	r3, #8
 800278e:	d060      	beq.n	8002852 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	699b      	ldr	r3, [r3, #24]
 8002794:	2b02      	cmp	r3, #2
 8002796:	d145      	bne.n	8002824 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002798:	4b33      	ldr	r3, [pc, #204]	; (8002868 <HAL_RCC_OscConfig+0x4b0>)
 800279a:	2200      	movs	r2, #0
 800279c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800279e:	f7fe fd39 	bl	8001214 <HAL_GetTick>
 80027a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027a4:	e008      	b.n	80027b8 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027a6:	f7fe fd35 	bl	8001214 <HAL_GetTick>
 80027aa:	4602      	mov	r2, r0
 80027ac:	693b      	ldr	r3, [r7, #16]
 80027ae:	1ad3      	subs	r3, r2, r3
 80027b0:	2b02      	cmp	r3, #2
 80027b2:	d901      	bls.n	80027b8 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 80027b4:	2303      	movs	r3, #3
 80027b6:	e04f      	b.n	8002858 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027b8:	4b29      	ldr	r3, [pc, #164]	; (8002860 <HAL_RCC_OscConfig+0x4a8>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d1f0      	bne.n	80027a6 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	69da      	ldr	r2, [r3, #28]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6a1b      	ldr	r3, [r3, #32]
 80027cc:	431a      	orrs	r2, r3
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d2:	019b      	lsls	r3, r3, #6
 80027d4:	431a      	orrs	r2, r3
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027da:	085b      	lsrs	r3, r3, #1
 80027dc:	3b01      	subs	r3, #1
 80027de:	041b      	lsls	r3, r3, #16
 80027e0:	431a      	orrs	r2, r3
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027e6:	061b      	lsls	r3, r3, #24
 80027e8:	431a      	orrs	r2, r3
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ee:	071b      	lsls	r3, r3, #28
 80027f0:	491b      	ldr	r1, [pc, #108]	; (8002860 <HAL_RCC_OscConfig+0x4a8>)
 80027f2:	4313      	orrs	r3, r2
 80027f4:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027f6:	4b1c      	ldr	r3, [pc, #112]	; (8002868 <HAL_RCC_OscConfig+0x4b0>)
 80027f8:	2201      	movs	r2, #1
 80027fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027fc:	f7fe fd0a 	bl	8001214 <HAL_GetTick>
 8002800:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002802:	e008      	b.n	8002816 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002804:	f7fe fd06 	bl	8001214 <HAL_GetTick>
 8002808:	4602      	mov	r2, r0
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	1ad3      	subs	r3, r2, r3
 800280e:	2b02      	cmp	r3, #2
 8002810:	d901      	bls.n	8002816 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8002812:	2303      	movs	r3, #3
 8002814:	e020      	b.n	8002858 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002816:	4b12      	ldr	r3, [pc, #72]	; (8002860 <HAL_RCC_OscConfig+0x4a8>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800281e:	2b00      	cmp	r3, #0
 8002820:	d0f0      	beq.n	8002804 <HAL_RCC_OscConfig+0x44c>
 8002822:	e018      	b.n	8002856 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002824:	4b10      	ldr	r3, [pc, #64]	; (8002868 <HAL_RCC_OscConfig+0x4b0>)
 8002826:	2200      	movs	r2, #0
 8002828:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800282a:	f7fe fcf3 	bl	8001214 <HAL_GetTick>
 800282e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002830:	e008      	b.n	8002844 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002832:	f7fe fcef 	bl	8001214 <HAL_GetTick>
 8002836:	4602      	mov	r2, r0
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	1ad3      	subs	r3, r2, r3
 800283c:	2b02      	cmp	r3, #2
 800283e:	d901      	bls.n	8002844 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8002840:	2303      	movs	r3, #3
 8002842:	e009      	b.n	8002858 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002844:	4b06      	ldr	r3, [pc, #24]	; (8002860 <HAL_RCC_OscConfig+0x4a8>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800284c:	2b00      	cmp	r3, #0
 800284e:	d1f0      	bne.n	8002832 <HAL_RCC_OscConfig+0x47a>
 8002850:	e001      	b.n	8002856 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	e000      	b.n	8002858 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8002856:	2300      	movs	r3, #0
}
 8002858:	4618      	mov	r0, r3
 800285a:	3718      	adds	r7, #24
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}
 8002860:	40023800 	.word	0x40023800
 8002864:	40007000 	.word	0x40007000
 8002868:	42470060 	.word	0x42470060

0800286c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b082      	sub	sp, #8
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d101      	bne.n	800287e <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	e083      	b.n	8002986 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	7f5b      	ldrb	r3, [r3, #29]
 8002882:	b2db      	uxtb	r3, r3
 8002884:	2b00      	cmp	r3, #0
 8002886:	d105      	bne.n	8002894 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2200      	movs	r2, #0
 800288c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	f7fe f99c 	bl	8000bcc <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2202      	movs	r2, #2
 8002898:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	22ca      	movs	r2, #202	; 0xca
 80028a0:	625a      	str	r2, [r3, #36]	; 0x24
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	2253      	movs	r2, #83	; 0x53
 80028a8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80028aa:	6878      	ldr	r0, [r7, #4]
 80028ac:	f000 f897 	bl	80029de <RTC_EnterInitMode>
 80028b0:	4603      	mov	r3, r0
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d008      	beq.n	80028c8 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	22ff      	movs	r2, #255	; 0xff
 80028bc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2204      	movs	r2, #4
 80028c2:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 80028c4:	2301      	movs	r3, #1
 80028c6:	e05e      	b.n	8002986 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	687a      	ldr	r2, [r7, #4]
 80028d0:	6812      	ldr	r2, [r2, #0]
 80028d2:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80028d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80028da:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	6899      	ldr	r1, [r3, #8]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	685a      	ldr	r2, [r3, #4]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	691b      	ldr	r3, [r3, #16]
 80028ea:	431a      	orrs	r2, r3
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	695b      	ldr	r3, [r3, #20]
 80028f0:	431a      	orrs	r2, r3
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	430a      	orrs	r2, r1
 80028f8:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	687a      	ldr	r2, [r7, #4]
 8002900:	68d2      	ldr	r2, [r2, #12]
 8002902:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	6919      	ldr	r1, [r3, #16]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	041a      	lsls	r2, r3, #16
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	430a      	orrs	r2, r1
 8002916:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	68da      	ldr	r2, [r3, #12]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002926:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	689b      	ldr	r3, [r3, #8]
 800292e:	f003 0320 	and.w	r3, r3, #32
 8002932:	2b00      	cmp	r3, #0
 8002934:	d10e      	bne.n	8002954 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002936:	6878      	ldr	r0, [r7, #4]
 8002938:	f000 f829 	bl	800298e <HAL_RTC_WaitForSynchro>
 800293c:	4603      	mov	r3, r0
 800293e:	2b00      	cmp	r3, #0
 8002940:	d008      	beq.n	8002954 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	22ff      	movs	r2, #255	; 0xff
 8002948:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2204      	movs	r2, #4
 800294e:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8002950:	2301      	movs	r3, #1
 8002952:	e018      	b.n	8002986 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002962:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	699a      	ldr	r2, [r3, #24]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	430a      	orrs	r2, r1
 8002974:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	22ff      	movs	r2, #255	; 0xff
 800297c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2201      	movs	r2, #1
 8002982:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8002984:	2300      	movs	r3, #0
  }
}
 8002986:	4618      	mov	r0, r3
 8002988:	3708      	adds	r7, #8
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}

0800298e <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800298e:	b580      	push	{r7, lr}
 8002990:	b084      	sub	sp, #16
 8002992:	af00      	add	r7, sp, #0
 8002994:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002996:	2300      	movs	r3, #0
 8002998:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	68da      	ldr	r2, [r3, #12]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80029a8:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80029aa:	f7fe fc33 	bl	8001214 <HAL_GetTick>
 80029ae:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80029b0:	e009      	b.n	80029c6 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80029b2:	f7fe fc2f 	bl	8001214 <HAL_GetTick>
 80029b6:	4602      	mov	r2, r0
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	1ad3      	subs	r3, r2, r3
 80029bc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80029c0:	d901      	bls.n	80029c6 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80029c2:	2303      	movs	r3, #3
 80029c4:	e007      	b.n	80029d6 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	68db      	ldr	r3, [r3, #12]
 80029cc:	f003 0320 	and.w	r3, r3, #32
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d0ee      	beq.n	80029b2 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80029d4:	2300      	movs	r3, #0
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	3710      	adds	r7, #16
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}

080029de <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80029de:	b580      	push	{r7, lr}
 80029e0:	b084      	sub	sp, #16
 80029e2:	af00      	add	r7, sp, #0
 80029e4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80029e6:	2300      	movs	r3, #0
 80029e8:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	68db      	ldr	r3, [r3, #12]
 80029f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d119      	bne.n	8002a2c <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f04f 32ff 	mov.w	r2, #4294967295
 8002a00:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002a02:	f7fe fc07 	bl	8001214 <HAL_GetTick>
 8002a06:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002a08:	e009      	b.n	8002a1e <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002a0a:	f7fe fc03 	bl	8001214 <HAL_GetTick>
 8002a0e:	4602      	mov	r2, r0
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	1ad3      	subs	r3, r2, r3
 8002a14:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002a18:	d901      	bls.n	8002a1e <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8002a1a:	2303      	movs	r3, #3
 8002a1c:	e007      	b.n	8002a2e <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	68db      	ldr	r3, [r3, #12]
 8002a24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d0ee      	beq.n	8002a0a <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8002a2c:	2300      	movs	r3, #0
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	3710      	adds	r7, #16
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}

08002a36 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a36:	b580      	push	{r7, lr}
 8002a38:	b082      	sub	sp, #8
 8002a3a:	af00      	add	r7, sp, #0
 8002a3c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d101      	bne.n	8002a48 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a44:	2301      	movs	r3, #1
 8002a46:	e01d      	b.n	8002a84 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a4e:	b2db      	uxtb	r3, r3
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d106      	bne.n	8002a62 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2200      	movs	r2, #0
 8002a58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a5c:	6878      	ldr	r0, [r7, #4]
 8002a5e:	f000 f815 	bl	8002a8c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2202      	movs	r2, #2
 8002a66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681a      	ldr	r2, [r3, #0]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	3304      	adds	r3, #4
 8002a72:	4619      	mov	r1, r3
 8002a74:	4610      	mov	r0, r2
 8002a76:	f000 f967 	bl	8002d48 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2201      	movs	r2, #1
 8002a7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a82:	2300      	movs	r3, #0
}
 8002a84:	4618      	mov	r0, r3
 8002a86:	3708      	adds	r7, #8
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}

08002a8c <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b083      	sub	sp, #12
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002a94:	bf00      	nop
 8002a96:	370c      	adds	r7, #12
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9e:	4770      	bx	lr

08002aa0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b085      	sub	sp, #20
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	68da      	ldr	r2, [r3, #12]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f042 0201 	orr.w	r2, r2, #1
 8002ab6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	689b      	ldr	r3, [r3, #8]
 8002abe:	f003 0307 	and.w	r3, r3, #7
 8002ac2:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	2b06      	cmp	r3, #6
 8002ac8:	d007      	beq.n	8002ada <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	681a      	ldr	r2, [r3, #0]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f042 0201 	orr.w	r2, r2, #1
 8002ad8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002ada:	2300      	movs	r3, #0
}
 8002adc:	4618      	mov	r0, r3
 8002ade:	3714      	adds	r7, #20
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae6:	4770      	bx	lr

08002ae8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b082      	sub	sp, #8
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	691b      	ldr	r3, [r3, #16]
 8002af6:	f003 0302 	and.w	r3, r3, #2
 8002afa:	2b02      	cmp	r3, #2
 8002afc:	d122      	bne.n	8002b44 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	68db      	ldr	r3, [r3, #12]
 8002b04:	f003 0302 	and.w	r3, r3, #2
 8002b08:	2b02      	cmp	r3, #2
 8002b0a:	d11b      	bne.n	8002b44 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f06f 0202 	mvn.w	r2, #2
 8002b14:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2201      	movs	r2, #1
 8002b1a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	699b      	ldr	r3, [r3, #24]
 8002b22:	f003 0303 	and.w	r3, r3, #3
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d003      	beq.n	8002b32 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	f000 f8ee 	bl	8002d0c <HAL_TIM_IC_CaptureCallback>
 8002b30:	e005      	b.n	8002b3e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b32:	6878      	ldr	r0, [r7, #4]
 8002b34:	f000 f8e0 	bl	8002cf8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b38:	6878      	ldr	r0, [r7, #4]
 8002b3a:	f000 f8f1 	bl	8002d20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2200      	movs	r2, #0
 8002b42:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	691b      	ldr	r3, [r3, #16]
 8002b4a:	f003 0304 	and.w	r3, r3, #4
 8002b4e:	2b04      	cmp	r3, #4
 8002b50:	d122      	bne.n	8002b98 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	68db      	ldr	r3, [r3, #12]
 8002b58:	f003 0304 	and.w	r3, r3, #4
 8002b5c:	2b04      	cmp	r3, #4
 8002b5e:	d11b      	bne.n	8002b98 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f06f 0204 	mvn.w	r2, #4
 8002b68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2202      	movs	r2, #2
 8002b6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	699b      	ldr	r3, [r3, #24]
 8002b76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d003      	beq.n	8002b86 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b7e:	6878      	ldr	r0, [r7, #4]
 8002b80:	f000 f8c4 	bl	8002d0c <HAL_TIM_IC_CaptureCallback>
 8002b84:	e005      	b.n	8002b92 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b86:	6878      	ldr	r0, [r7, #4]
 8002b88:	f000 f8b6 	bl	8002cf8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b8c:	6878      	ldr	r0, [r7, #4]
 8002b8e:	f000 f8c7 	bl	8002d20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2200      	movs	r2, #0
 8002b96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	691b      	ldr	r3, [r3, #16]
 8002b9e:	f003 0308 	and.w	r3, r3, #8
 8002ba2:	2b08      	cmp	r3, #8
 8002ba4:	d122      	bne.n	8002bec <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	68db      	ldr	r3, [r3, #12]
 8002bac:	f003 0308 	and.w	r3, r3, #8
 8002bb0:	2b08      	cmp	r3, #8
 8002bb2:	d11b      	bne.n	8002bec <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f06f 0208 	mvn.w	r2, #8
 8002bbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2204      	movs	r2, #4
 8002bc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	69db      	ldr	r3, [r3, #28]
 8002bca:	f003 0303 	and.w	r3, r3, #3
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d003      	beq.n	8002bda <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bd2:	6878      	ldr	r0, [r7, #4]
 8002bd4:	f000 f89a 	bl	8002d0c <HAL_TIM_IC_CaptureCallback>
 8002bd8:	e005      	b.n	8002be6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bda:	6878      	ldr	r0, [r7, #4]
 8002bdc:	f000 f88c 	bl	8002cf8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002be0:	6878      	ldr	r0, [r7, #4]
 8002be2:	f000 f89d 	bl	8002d20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2200      	movs	r2, #0
 8002bea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	691b      	ldr	r3, [r3, #16]
 8002bf2:	f003 0310 	and.w	r3, r3, #16
 8002bf6:	2b10      	cmp	r3, #16
 8002bf8:	d122      	bne.n	8002c40 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	68db      	ldr	r3, [r3, #12]
 8002c00:	f003 0310 	and.w	r3, r3, #16
 8002c04:	2b10      	cmp	r3, #16
 8002c06:	d11b      	bne.n	8002c40 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f06f 0210 	mvn.w	r2, #16
 8002c10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2208      	movs	r2, #8
 8002c16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	69db      	ldr	r3, [r3, #28]
 8002c1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d003      	beq.n	8002c2e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c26:	6878      	ldr	r0, [r7, #4]
 8002c28:	f000 f870 	bl	8002d0c <HAL_TIM_IC_CaptureCallback>
 8002c2c:	e005      	b.n	8002c3a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c2e:	6878      	ldr	r0, [r7, #4]
 8002c30:	f000 f862 	bl	8002cf8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c34:	6878      	ldr	r0, [r7, #4]
 8002c36:	f000 f873 	bl	8002d20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	691b      	ldr	r3, [r3, #16]
 8002c46:	f003 0301 	and.w	r3, r3, #1
 8002c4a:	2b01      	cmp	r3, #1
 8002c4c:	d10e      	bne.n	8002c6c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	68db      	ldr	r3, [r3, #12]
 8002c54:	f003 0301 	and.w	r3, r3, #1
 8002c58:	2b01      	cmp	r3, #1
 8002c5a:	d107      	bne.n	8002c6c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f06f 0201 	mvn.w	r2, #1
 8002c64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002c66:	6878      	ldr	r0, [r7, #4]
 8002c68:	f7fd ff6e 	bl	8000b48 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	691b      	ldr	r3, [r3, #16]
 8002c72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c76:	2b80      	cmp	r3, #128	; 0x80
 8002c78:	d10e      	bne.n	8002c98 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	68db      	ldr	r3, [r3, #12]
 8002c80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c84:	2b80      	cmp	r3, #128	; 0x80
 8002c86:	d107      	bne.n	8002c98 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002c90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002c92:	6878      	ldr	r0, [r7, #4]
 8002c94:	f000 f902 	bl	8002e9c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	691b      	ldr	r3, [r3, #16]
 8002c9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ca2:	2b40      	cmp	r3, #64	; 0x40
 8002ca4:	d10e      	bne.n	8002cc4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	68db      	ldr	r3, [r3, #12]
 8002cac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cb0:	2b40      	cmp	r3, #64	; 0x40
 8002cb2:	d107      	bne.n	8002cc4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002cbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002cbe:	6878      	ldr	r0, [r7, #4]
 8002cc0:	f000 f838 	bl	8002d34 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	691b      	ldr	r3, [r3, #16]
 8002cca:	f003 0320 	and.w	r3, r3, #32
 8002cce:	2b20      	cmp	r3, #32
 8002cd0:	d10e      	bne.n	8002cf0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	68db      	ldr	r3, [r3, #12]
 8002cd8:	f003 0320 	and.w	r3, r3, #32
 8002cdc:	2b20      	cmp	r3, #32
 8002cde:	d107      	bne.n	8002cf0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f06f 0220 	mvn.w	r2, #32
 8002ce8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002cea:	6878      	ldr	r0, [r7, #4]
 8002cec:	f000 f8cc 	bl	8002e88 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002cf0:	bf00      	nop
 8002cf2:	3708      	adds	r7, #8
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}

08002cf8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b083      	sub	sp, #12
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002d00:	bf00      	nop
 8002d02:	370c      	adds	r7, #12
 8002d04:	46bd      	mov	sp, r7
 8002d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0a:	4770      	bx	lr

08002d0c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b083      	sub	sp, #12
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002d14:	bf00      	nop
 8002d16:	370c      	adds	r7, #12
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1e:	4770      	bx	lr

08002d20 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b083      	sub	sp, #12
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002d28:	bf00      	nop
 8002d2a:	370c      	adds	r7, #12
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d32:	4770      	bx	lr

08002d34 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b083      	sub	sp, #12
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002d3c:	bf00      	nop
 8002d3e:	370c      	adds	r7, #12
 8002d40:	46bd      	mov	sp, r7
 8002d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d46:	4770      	bx	lr

08002d48 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b085      	sub	sp, #20
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
 8002d50:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	4a40      	ldr	r2, [pc, #256]	; (8002e5c <TIM_Base_SetConfig+0x114>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d013      	beq.n	8002d88 <TIM_Base_SetConfig+0x40>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d66:	d00f      	beq.n	8002d88 <TIM_Base_SetConfig+0x40>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	4a3d      	ldr	r2, [pc, #244]	; (8002e60 <TIM_Base_SetConfig+0x118>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d00b      	beq.n	8002d88 <TIM_Base_SetConfig+0x40>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	4a3c      	ldr	r2, [pc, #240]	; (8002e64 <TIM_Base_SetConfig+0x11c>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d007      	beq.n	8002d88 <TIM_Base_SetConfig+0x40>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	4a3b      	ldr	r2, [pc, #236]	; (8002e68 <TIM_Base_SetConfig+0x120>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d003      	beq.n	8002d88 <TIM_Base_SetConfig+0x40>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	4a3a      	ldr	r2, [pc, #232]	; (8002e6c <TIM_Base_SetConfig+0x124>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d108      	bne.n	8002d9a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	68fa      	ldr	r2, [r7, #12]
 8002d96:	4313      	orrs	r3, r2
 8002d98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	4a2f      	ldr	r2, [pc, #188]	; (8002e5c <TIM_Base_SetConfig+0x114>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d02b      	beq.n	8002dfa <TIM_Base_SetConfig+0xb2>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002da8:	d027      	beq.n	8002dfa <TIM_Base_SetConfig+0xb2>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	4a2c      	ldr	r2, [pc, #176]	; (8002e60 <TIM_Base_SetConfig+0x118>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d023      	beq.n	8002dfa <TIM_Base_SetConfig+0xb2>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	4a2b      	ldr	r2, [pc, #172]	; (8002e64 <TIM_Base_SetConfig+0x11c>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d01f      	beq.n	8002dfa <TIM_Base_SetConfig+0xb2>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	4a2a      	ldr	r2, [pc, #168]	; (8002e68 <TIM_Base_SetConfig+0x120>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d01b      	beq.n	8002dfa <TIM_Base_SetConfig+0xb2>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	4a29      	ldr	r2, [pc, #164]	; (8002e6c <TIM_Base_SetConfig+0x124>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d017      	beq.n	8002dfa <TIM_Base_SetConfig+0xb2>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	4a28      	ldr	r2, [pc, #160]	; (8002e70 <TIM_Base_SetConfig+0x128>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d013      	beq.n	8002dfa <TIM_Base_SetConfig+0xb2>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	4a27      	ldr	r2, [pc, #156]	; (8002e74 <TIM_Base_SetConfig+0x12c>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d00f      	beq.n	8002dfa <TIM_Base_SetConfig+0xb2>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	4a26      	ldr	r2, [pc, #152]	; (8002e78 <TIM_Base_SetConfig+0x130>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d00b      	beq.n	8002dfa <TIM_Base_SetConfig+0xb2>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	4a25      	ldr	r2, [pc, #148]	; (8002e7c <TIM_Base_SetConfig+0x134>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d007      	beq.n	8002dfa <TIM_Base_SetConfig+0xb2>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	4a24      	ldr	r2, [pc, #144]	; (8002e80 <TIM_Base_SetConfig+0x138>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d003      	beq.n	8002dfa <TIM_Base_SetConfig+0xb2>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	4a23      	ldr	r2, [pc, #140]	; (8002e84 <TIM_Base_SetConfig+0x13c>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d108      	bne.n	8002e0c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	68db      	ldr	r3, [r3, #12]
 8002e06:	68fa      	ldr	r2, [r7, #12]
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	695b      	ldr	r3, [r3, #20]
 8002e16:	4313      	orrs	r3, r2
 8002e18:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	68fa      	ldr	r2, [r7, #12]
 8002e1e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	689a      	ldr	r2, [r3, #8]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	681a      	ldr	r2, [r3, #0]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	4a0a      	ldr	r2, [pc, #40]	; (8002e5c <TIM_Base_SetConfig+0x114>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d003      	beq.n	8002e40 <TIM_Base_SetConfig+0xf8>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	4a0c      	ldr	r2, [pc, #48]	; (8002e6c <TIM_Base_SetConfig+0x124>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d103      	bne.n	8002e48 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	691a      	ldr	r2, [r3, #16]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	615a      	str	r2, [r3, #20]
}
 8002e4e:	bf00      	nop
 8002e50:	3714      	adds	r7, #20
 8002e52:	46bd      	mov	sp, r7
 8002e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e58:	4770      	bx	lr
 8002e5a:	bf00      	nop
 8002e5c:	40010000 	.word	0x40010000
 8002e60:	40000400 	.word	0x40000400
 8002e64:	40000800 	.word	0x40000800
 8002e68:	40000c00 	.word	0x40000c00
 8002e6c:	40010400 	.word	0x40010400
 8002e70:	40014000 	.word	0x40014000
 8002e74:	40014400 	.word	0x40014400
 8002e78:	40014800 	.word	0x40014800
 8002e7c:	40001800 	.word	0x40001800
 8002e80:	40001c00 	.word	0x40001c00
 8002e84:	40002000 	.word	0x40002000

08002e88 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b083      	sub	sp, #12
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002e90:	bf00      	nop
 8002e92:	370c      	adds	r7, #12
 8002e94:	46bd      	mov	sp, r7
 8002e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9a:	4770      	bx	lr

08002e9c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b083      	sub	sp, #12
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002ea4:	bf00      	nop
 8002ea6:	370c      	adds	r7, #12
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eae:	4770      	bx	lr

08002eb0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b082      	sub	sp, #8
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d101      	bne.n	8002ec2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e03f      	b.n	8002f42 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002ec8:	b2db      	uxtb	r3, r3
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d106      	bne.n	8002edc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ed6:	6878      	ldr	r0, [r7, #4]
 8002ed8:	f7fd fe8e 	bl	8000bf8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2224      	movs	r2, #36	; 0x24
 8002ee0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	68da      	ldr	r2, [r3, #12]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002ef2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002ef4:	6878      	ldr	r0, [r7, #4]
 8002ef6:	f000 fb97 	bl	8003628 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	691a      	ldr	r2, [r3, #16]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002f08:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	695a      	ldr	r2, [r3, #20]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002f18:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	68da      	ldr	r2, [r3, #12]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002f28:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2220      	movs	r2, #32
 8002f34:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2220      	movs	r2, #32
 8002f3c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002f40:	2300      	movs	r3, #0
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	3708      	adds	r7, #8
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}

08002f4a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f4a:	b580      	push	{r7, lr}
 8002f4c:	b088      	sub	sp, #32
 8002f4e:	af02      	add	r7, sp, #8
 8002f50:	60f8      	str	r0, [r7, #12]
 8002f52:	60b9      	str	r1, [r7, #8]
 8002f54:	603b      	str	r3, [r7, #0]
 8002f56:	4613      	mov	r3, r2
 8002f58:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002f64:	b2db      	uxtb	r3, r3
 8002f66:	2b20      	cmp	r3, #32
 8002f68:	f040 8083 	bne.w	8003072 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d002      	beq.n	8002f78 <HAL_UART_Transmit+0x2e>
 8002f72:	88fb      	ldrh	r3, [r7, #6]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d101      	bne.n	8002f7c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	e07b      	b.n	8003074 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002f82:	2b01      	cmp	r3, #1
 8002f84:	d101      	bne.n	8002f8a <HAL_UART_Transmit+0x40>
 8002f86:	2302      	movs	r3, #2
 8002f88:	e074      	b.n	8003074 <HAL_UART_Transmit+0x12a>
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	2201      	movs	r2, #1
 8002f8e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	2200      	movs	r2, #0
 8002f96:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	2221      	movs	r2, #33	; 0x21
 8002f9c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002fa0:	f7fe f938 	bl	8001214 <HAL_GetTick>
 8002fa4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	88fa      	ldrh	r2, [r7, #6]
 8002faa:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	88fa      	ldrh	r2, [r7, #6]
 8002fb0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8002fba:	e042      	b.n	8003042 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002fc0:	b29b      	uxth	r3, r3
 8002fc2:	3b01      	subs	r3, #1
 8002fc4:	b29a      	uxth	r2, r3
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	689b      	ldr	r3, [r3, #8]
 8002fce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fd2:	d122      	bne.n	800301a <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	9300      	str	r3, [sp, #0]
 8002fd8:	697b      	ldr	r3, [r7, #20]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	2180      	movs	r1, #128	; 0x80
 8002fde:	68f8      	ldr	r0, [r7, #12]
 8002fe0:	f000 f9b6 	bl	8003350 <UART_WaitOnFlagUntilTimeout>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d001      	beq.n	8002fee <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8002fea:	2303      	movs	r3, #3
 8002fec:	e042      	b.n	8003074 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	881b      	ldrh	r3, [r3, #0]
 8002ff6:	461a      	mov	r2, r3
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003000:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	691b      	ldr	r3, [r3, #16]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d103      	bne.n	8003012 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	3302      	adds	r3, #2
 800300e:	60bb      	str	r3, [r7, #8]
 8003010:	e017      	b.n	8003042 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	3301      	adds	r3, #1
 8003016:	60bb      	str	r3, [r7, #8]
 8003018:	e013      	b.n	8003042 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	9300      	str	r3, [sp, #0]
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	2200      	movs	r2, #0
 8003022:	2180      	movs	r1, #128	; 0x80
 8003024:	68f8      	ldr	r0, [r7, #12]
 8003026:	f000 f993 	bl	8003350 <UART_WaitOnFlagUntilTimeout>
 800302a:	4603      	mov	r3, r0
 800302c:	2b00      	cmp	r3, #0
 800302e:	d001      	beq.n	8003034 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8003030:	2303      	movs	r3, #3
 8003032:	e01f      	b.n	8003074 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	1c5a      	adds	r2, r3, #1
 8003038:	60ba      	str	r2, [r7, #8]
 800303a:	781a      	ldrb	r2, [r3, #0]
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003046:	b29b      	uxth	r3, r3
 8003048:	2b00      	cmp	r3, #0
 800304a:	d1b7      	bne.n	8002fbc <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	9300      	str	r3, [sp, #0]
 8003050:	697b      	ldr	r3, [r7, #20]
 8003052:	2200      	movs	r2, #0
 8003054:	2140      	movs	r1, #64	; 0x40
 8003056:	68f8      	ldr	r0, [r7, #12]
 8003058:	f000 f97a 	bl	8003350 <UART_WaitOnFlagUntilTimeout>
 800305c:	4603      	mov	r3, r0
 800305e:	2b00      	cmp	r3, #0
 8003060:	d001      	beq.n	8003066 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8003062:	2303      	movs	r3, #3
 8003064:	e006      	b.n	8003074 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	2220      	movs	r2, #32
 800306a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800306e:	2300      	movs	r3, #0
 8003070:	e000      	b.n	8003074 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8003072:	2302      	movs	r3, #2
  }
}
 8003074:	4618      	mov	r0, r3
 8003076:	3718      	adds	r7, #24
 8003078:	46bd      	mov	sp, r7
 800307a:	bd80      	pop	{r7, pc}

0800307c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800307c:	b480      	push	{r7}
 800307e:	b085      	sub	sp, #20
 8003080:	af00      	add	r7, sp, #0
 8003082:	60f8      	str	r0, [r7, #12]
 8003084:	60b9      	str	r1, [r7, #8]
 8003086:	4613      	mov	r3, r2
 8003088:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003090:	b2db      	uxtb	r3, r3
 8003092:	2b20      	cmp	r3, #32
 8003094:	d140      	bne.n	8003118 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003096:	68bb      	ldr	r3, [r7, #8]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d002      	beq.n	80030a2 <HAL_UART_Receive_IT+0x26>
 800309c:	88fb      	ldrh	r3, [r7, #6]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d101      	bne.n	80030a6 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80030a2:	2301      	movs	r3, #1
 80030a4:	e039      	b.n	800311a <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80030ac:	2b01      	cmp	r3, #1
 80030ae:	d101      	bne.n	80030b4 <HAL_UART_Receive_IT+0x38>
 80030b0:	2302      	movs	r3, #2
 80030b2:	e032      	b.n	800311a <HAL_UART_Receive_IT+0x9e>
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	2201      	movs	r2, #1
 80030b8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	68ba      	ldr	r2, [r7, #8]
 80030c0:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	88fa      	ldrh	r2, [r7, #6]
 80030c6:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	88fa      	ldrh	r2, [r7, #6]
 80030cc:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	2200      	movs	r2, #0
 80030d2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	2222      	movs	r2, #34	; 0x22
 80030d8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	2200      	movs	r2, #0
 80030e0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	68da      	ldr	r2, [r3, #12]
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80030f2:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	695a      	ldr	r2, [r3, #20]
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f042 0201 	orr.w	r2, r2, #1
 8003102:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	68da      	ldr	r2, [r3, #12]
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f042 0220 	orr.w	r2, r2, #32
 8003112:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003114:	2300      	movs	r3, #0
 8003116:	e000      	b.n	800311a <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8003118:	2302      	movs	r3, #2
  }
}
 800311a:	4618      	mov	r0, r3
 800311c:	3714      	adds	r7, #20
 800311e:	46bd      	mov	sp, r7
 8003120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003124:	4770      	bx	lr
	...

08003128 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b088      	sub	sp, #32
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	68db      	ldr	r3, [r3, #12]
 800313e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	695b      	ldr	r3, [r3, #20]
 8003146:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8003148:	2300      	movs	r3, #0
 800314a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800314c:	2300      	movs	r3, #0
 800314e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003150:	69fb      	ldr	r3, [r7, #28]
 8003152:	f003 030f 	and.w	r3, r3, #15
 8003156:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8003158:	693b      	ldr	r3, [r7, #16]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d10d      	bne.n	800317a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800315e:	69fb      	ldr	r3, [r7, #28]
 8003160:	f003 0320 	and.w	r3, r3, #32
 8003164:	2b00      	cmp	r3, #0
 8003166:	d008      	beq.n	800317a <HAL_UART_IRQHandler+0x52>
 8003168:	69bb      	ldr	r3, [r7, #24]
 800316a:	f003 0320 	and.w	r3, r3, #32
 800316e:	2b00      	cmp	r3, #0
 8003170:	d003      	beq.n	800317a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003172:	6878      	ldr	r0, [r7, #4]
 8003174:	f000 f9d6 	bl	8003524 <UART_Receive_IT>
      return;
 8003178:	e0d1      	b.n	800331e <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	2b00      	cmp	r3, #0
 800317e:	f000 80b0 	beq.w	80032e2 <HAL_UART_IRQHandler+0x1ba>
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	f003 0301 	and.w	r3, r3, #1
 8003188:	2b00      	cmp	r3, #0
 800318a:	d105      	bne.n	8003198 <HAL_UART_IRQHandler+0x70>
 800318c:	69bb      	ldr	r3, [r7, #24]
 800318e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003192:	2b00      	cmp	r3, #0
 8003194:	f000 80a5 	beq.w	80032e2 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003198:	69fb      	ldr	r3, [r7, #28]
 800319a:	f003 0301 	and.w	r3, r3, #1
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d00a      	beq.n	80031b8 <HAL_UART_IRQHandler+0x90>
 80031a2:	69bb      	ldr	r3, [r7, #24]
 80031a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d005      	beq.n	80031b8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031b0:	f043 0201 	orr.w	r2, r3, #1
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80031b8:	69fb      	ldr	r3, [r7, #28]
 80031ba:	f003 0304 	and.w	r3, r3, #4
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d00a      	beq.n	80031d8 <HAL_UART_IRQHandler+0xb0>
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	f003 0301 	and.w	r3, r3, #1
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d005      	beq.n	80031d8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031d0:	f043 0202 	orr.w	r2, r3, #2
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80031d8:	69fb      	ldr	r3, [r7, #28]
 80031da:	f003 0302 	and.w	r3, r3, #2
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d00a      	beq.n	80031f8 <HAL_UART_IRQHandler+0xd0>
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	f003 0301 	and.w	r3, r3, #1
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d005      	beq.n	80031f8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031f0:	f043 0204 	orr.w	r2, r3, #4
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80031f8:	69fb      	ldr	r3, [r7, #28]
 80031fa:	f003 0308 	and.w	r3, r3, #8
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d00f      	beq.n	8003222 <HAL_UART_IRQHandler+0xfa>
 8003202:	69bb      	ldr	r3, [r7, #24]
 8003204:	f003 0320 	and.w	r3, r3, #32
 8003208:	2b00      	cmp	r3, #0
 800320a:	d104      	bne.n	8003216 <HAL_UART_IRQHandler+0xee>
 800320c:	697b      	ldr	r3, [r7, #20]
 800320e:	f003 0301 	and.w	r3, r3, #1
 8003212:	2b00      	cmp	r3, #0
 8003214:	d005      	beq.n	8003222 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800321a:	f043 0208 	orr.w	r2, r3, #8
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003226:	2b00      	cmp	r3, #0
 8003228:	d078      	beq.n	800331c <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800322a:	69fb      	ldr	r3, [r7, #28]
 800322c:	f003 0320 	and.w	r3, r3, #32
 8003230:	2b00      	cmp	r3, #0
 8003232:	d007      	beq.n	8003244 <HAL_UART_IRQHandler+0x11c>
 8003234:	69bb      	ldr	r3, [r7, #24]
 8003236:	f003 0320 	and.w	r3, r3, #32
 800323a:	2b00      	cmp	r3, #0
 800323c:	d002      	beq.n	8003244 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800323e:	6878      	ldr	r0, [r7, #4]
 8003240:	f000 f970 	bl	8003524 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	695b      	ldr	r3, [r3, #20]
 800324a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800324e:	2b40      	cmp	r3, #64	; 0x40
 8003250:	bf0c      	ite	eq
 8003252:	2301      	moveq	r3, #1
 8003254:	2300      	movne	r3, #0
 8003256:	b2db      	uxtb	r3, r3
 8003258:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800325e:	f003 0308 	and.w	r3, r3, #8
 8003262:	2b00      	cmp	r3, #0
 8003264:	d102      	bne.n	800326c <HAL_UART_IRQHandler+0x144>
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d031      	beq.n	80032d0 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800326c:	6878      	ldr	r0, [r7, #4]
 800326e:	f000 f8b9 	bl	80033e4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	695b      	ldr	r3, [r3, #20]
 8003278:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800327c:	2b40      	cmp	r3, #64	; 0x40
 800327e:	d123      	bne.n	80032c8 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	695a      	ldr	r2, [r3, #20]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800328e:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003294:	2b00      	cmp	r3, #0
 8003296:	d013      	beq.n	80032c0 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800329c:	4a21      	ldr	r2, [pc, #132]	; (8003324 <HAL_UART_IRQHandler+0x1fc>)
 800329e:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032a4:	4618      	mov	r0, r3
 80032a6:	f7fe f8a3 	bl	80013f0 <HAL_DMA_Abort_IT>
 80032aa:	4603      	mov	r3, r0
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d016      	beq.n	80032de <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032b6:	687a      	ldr	r2, [r7, #4]
 80032b8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80032ba:	4610      	mov	r0, r2
 80032bc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032be:	e00e      	b.n	80032de <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80032c0:	6878      	ldr	r0, [r7, #4]
 80032c2:	f000 f83b 	bl	800333c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032c6:	e00a      	b.n	80032de <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80032c8:	6878      	ldr	r0, [r7, #4]
 80032ca:	f000 f837 	bl	800333c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032ce:	e006      	b.n	80032de <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80032d0:	6878      	ldr	r0, [r7, #4]
 80032d2:	f000 f833 	bl	800333c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2200      	movs	r2, #0
 80032da:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80032dc:	e01e      	b.n	800331c <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032de:	bf00      	nop
    return;
 80032e0:	e01c      	b.n	800331c <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80032e2:	69fb      	ldr	r3, [r7, #28]
 80032e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d008      	beq.n	80032fe <HAL_UART_IRQHandler+0x1d6>
 80032ec:	69bb      	ldr	r3, [r7, #24]
 80032ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d003      	beq.n	80032fe <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80032f6:	6878      	ldr	r0, [r7, #4]
 80032f8:	f000 f8a6 	bl	8003448 <UART_Transmit_IT>
    return;
 80032fc:	e00f      	b.n	800331e <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80032fe:	69fb      	ldr	r3, [r7, #28]
 8003300:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003304:	2b00      	cmp	r3, #0
 8003306:	d00a      	beq.n	800331e <HAL_UART_IRQHandler+0x1f6>
 8003308:	69bb      	ldr	r3, [r7, #24]
 800330a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800330e:	2b00      	cmp	r3, #0
 8003310:	d005      	beq.n	800331e <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8003312:	6878      	ldr	r0, [r7, #4]
 8003314:	f000 f8ee 	bl	80034f4 <UART_EndTransmit_IT>
    return;
 8003318:	bf00      	nop
 800331a:	e000      	b.n	800331e <HAL_UART_IRQHandler+0x1f6>
    return;
 800331c:	bf00      	nop
  }
}
 800331e:	3720      	adds	r7, #32
 8003320:	46bd      	mov	sp, r7
 8003322:	bd80      	pop	{r7, pc}
 8003324:	08003421 	.word	0x08003421

08003328 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003328:	b480      	push	{r7}
 800332a:	b083      	sub	sp, #12
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003330:	bf00      	nop
 8003332:	370c      	adds	r7, #12
 8003334:	46bd      	mov	sp, r7
 8003336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333a:	4770      	bx	lr

0800333c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800333c:	b480      	push	{r7}
 800333e:	b083      	sub	sp, #12
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003344:	bf00      	nop
 8003346:	370c      	adds	r7, #12
 8003348:	46bd      	mov	sp, r7
 800334a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334e:	4770      	bx	lr

08003350 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b084      	sub	sp, #16
 8003354:	af00      	add	r7, sp, #0
 8003356:	60f8      	str	r0, [r7, #12]
 8003358:	60b9      	str	r1, [r7, #8]
 800335a:	603b      	str	r3, [r7, #0]
 800335c:	4613      	mov	r3, r2
 800335e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003360:	e02c      	b.n	80033bc <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003362:	69bb      	ldr	r3, [r7, #24]
 8003364:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003368:	d028      	beq.n	80033bc <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800336a:	69bb      	ldr	r3, [r7, #24]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d007      	beq.n	8003380 <UART_WaitOnFlagUntilTimeout+0x30>
 8003370:	f7fd ff50 	bl	8001214 <HAL_GetTick>
 8003374:	4602      	mov	r2, r0
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	1ad3      	subs	r3, r2, r3
 800337a:	69ba      	ldr	r2, [r7, #24]
 800337c:	429a      	cmp	r2, r3
 800337e:	d21d      	bcs.n	80033bc <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	68da      	ldr	r2, [r3, #12]
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800338e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	695a      	ldr	r2, [r3, #20]
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f022 0201 	bic.w	r2, r2, #1
 800339e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	2220      	movs	r2, #32
 80033a4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	2220      	movs	r2, #32
 80033ac:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	2200      	movs	r2, #0
 80033b4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80033b8:	2303      	movs	r3, #3
 80033ba:	e00f      	b.n	80033dc <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	681a      	ldr	r2, [r3, #0]
 80033c2:	68bb      	ldr	r3, [r7, #8]
 80033c4:	4013      	ands	r3, r2
 80033c6:	68ba      	ldr	r2, [r7, #8]
 80033c8:	429a      	cmp	r2, r3
 80033ca:	bf0c      	ite	eq
 80033cc:	2301      	moveq	r3, #1
 80033ce:	2300      	movne	r3, #0
 80033d0:	b2db      	uxtb	r3, r3
 80033d2:	461a      	mov	r2, r3
 80033d4:	79fb      	ldrb	r3, [r7, #7]
 80033d6:	429a      	cmp	r2, r3
 80033d8:	d0c3      	beq.n	8003362 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80033da:	2300      	movs	r3, #0
}
 80033dc:	4618      	mov	r0, r3
 80033de:	3710      	adds	r7, #16
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bd80      	pop	{r7, pc}

080033e4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80033e4:	b480      	push	{r7}
 80033e6:	b083      	sub	sp, #12
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	68da      	ldr	r2, [r3, #12]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80033fa:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	695a      	ldr	r2, [r3, #20]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f022 0201 	bic.w	r2, r2, #1
 800340a:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2220      	movs	r2, #32
 8003410:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8003414:	bf00      	nop
 8003416:	370c      	adds	r7, #12
 8003418:	46bd      	mov	sp, r7
 800341a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341e:	4770      	bx	lr

08003420 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b084      	sub	sp, #16
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800342c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	2200      	movs	r2, #0
 8003432:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	2200      	movs	r2, #0
 8003438:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800343a:	68f8      	ldr	r0, [r7, #12]
 800343c:	f7ff ff7e 	bl	800333c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003440:	bf00      	nop
 8003442:	3710      	adds	r7, #16
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}

08003448 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003448:	b480      	push	{r7}
 800344a:	b085      	sub	sp, #20
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003456:	b2db      	uxtb	r3, r3
 8003458:	2b21      	cmp	r3, #33	; 0x21
 800345a:	d144      	bne.n	80034e6 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003464:	d11a      	bne.n	800349c <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6a1b      	ldr	r3, [r3, #32]
 800346a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	881b      	ldrh	r3, [r3, #0]
 8003470:	461a      	mov	r2, r3
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800347a:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	691b      	ldr	r3, [r3, #16]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d105      	bne.n	8003490 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6a1b      	ldr	r3, [r3, #32]
 8003488:	1c9a      	adds	r2, r3, #2
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	621a      	str	r2, [r3, #32]
 800348e:	e00e      	b.n	80034ae <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6a1b      	ldr	r3, [r3, #32]
 8003494:	1c5a      	adds	r2, r3, #1
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	621a      	str	r2, [r3, #32]
 800349a:	e008      	b.n	80034ae <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6a1b      	ldr	r3, [r3, #32]
 80034a0:	1c59      	adds	r1, r3, #1
 80034a2:	687a      	ldr	r2, [r7, #4]
 80034a4:	6211      	str	r1, [r2, #32]
 80034a6:	781a      	ldrb	r2, [r3, #0]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80034b2:	b29b      	uxth	r3, r3
 80034b4:	3b01      	subs	r3, #1
 80034b6:	b29b      	uxth	r3, r3
 80034b8:	687a      	ldr	r2, [r7, #4]
 80034ba:	4619      	mov	r1, r3
 80034bc:	84d1      	strh	r1, [r2, #38]	; 0x26
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d10f      	bne.n	80034e2 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	68da      	ldr	r2, [r3, #12]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80034d0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	68da      	ldr	r2, [r3, #12]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80034e0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80034e2:	2300      	movs	r3, #0
 80034e4:	e000      	b.n	80034e8 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80034e6:	2302      	movs	r3, #2
  }
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	3714      	adds	r7, #20
 80034ec:	46bd      	mov	sp, r7
 80034ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f2:	4770      	bx	lr

080034f4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b082      	sub	sp, #8
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	68da      	ldr	r2, [r3, #12]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800350a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2220      	movs	r2, #32
 8003510:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003514:	6878      	ldr	r0, [r7, #4]
 8003516:	f7ff ff07 	bl	8003328 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800351a:	2300      	movs	r3, #0
}
 800351c:	4618      	mov	r0, r3
 800351e:	3708      	adds	r7, #8
 8003520:	46bd      	mov	sp, r7
 8003522:	bd80      	pop	{r7, pc}

08003524 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b084      	sub	sp, #16
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003532:	b2db      	uxtb	r3, r3
 8003534:	2b22      	cmp	r3, #34	; 0x22
 8003536:	d171      	bne.n	800361c <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003540:	d123      	bne.n	800358a <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003546:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	691b      	ldr	r3, [r3, #16]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d10e      	bne.n	800356e <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	b29b      	uxth	r3, r3
 8003558:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800355c:	b29a      	uxth	r2, r3
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003566:	1c9a      	adds	r2, r3, #2
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	629a      	str	r2, [r3, #40]	; 0x28
 800356c:	e029      	b.n	80035c2 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	b29b      	uxth	r3, r3
 8003576:	b2db      	uxtb	r3, r3
 8003578:	b29a      	uxth	r2, r3
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003582:	1c5a      	adds	r2, r3, #1
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	629a      	str	r2, [r3, #40]	; 0x28
 8003588:	e01b      	b.n	80035c2 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	691b      	ldr	r3, [r3, #16]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d10a      	bne.n	80035a8 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	6858      	ldr	r0, [r3, #4]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800359c:	1c59      	adds	r1, r3, #1
 800359e:	687a      	ldr	r2, [r7, #4]
 80035a0:	6291      	str	r1, [r2, #40]	; 0x28
 80035a2:	b2c2      	uxtb	r2, r0
 80035a4:	701a      	strb	r2, [r3, #0]
 80035a6:	e00c      	b.n	80035c2 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	b2da      	uxtb	r2, r3
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035b4:	1c58      	adds	r0, r3, #1
 80035b6:	6879      	ldr	r1, [r7, #4]
 80035b8:	6288      	str	r0, [r1, #40]	; 0x28
 80035ba:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80035be:	b2d2      	uxtb	r2, r2
 80035c0:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80035c6:	b29b      	uxth	r3, r3
 80035c8:	3b01      	subs	r3, #1
 80035ca:	b29b      	uxth	r3, r3
 80035cc:	687a      	ldr	r2, [r7, #4]
 80035ce:	4619      	mov	r1, r3
 80035d0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d120      	bne.n	8003618 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	68da      	ldr	r2, [r3, #12]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f022 0220 	bic.w	r2, r2, #32
 80035e4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	68da      	ldr	r2, [r3, #12]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80035f4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	695a      	ldr	r2, [r3, #20]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f022 0201 	bic.w	r2, r2, #1
 8003604:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2220      	movs	r2, #32
 800360a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800360e:	6878      	ldr	r0, [r7, #4]
 8003610:	f7fd fa50 	bl	8000ab4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8003614:	2300      	movs	r3, #0
 8003616:	e002      	b.n	800361e <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8003618:	2300      	movs	r3, #0
 800361a:	e000      	b.n	800361e <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800361c:	2302      	movs	r3, #2
  }
}
 800361e:	4618      	mov	r0, r3
 8003620:	3710      	adds	r7, #16
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}
	...

08003628 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800362c:	b085      	sub	sp, #20
 800362e:	af00      	add	r7, sp, #0
 8003630:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	691b      	ldr	r3, [r3, #16]
 8003638:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	68da      	ldr	r2, [r3, #12]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	430a      	orrs	r2, r1
 8003646:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	689a      	ldr	r2, [r3, #8]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	691b      	ldr	r3, [r3, #16]
 8003650:	431a      	orrs	r2, r3
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	695b      	ldr	r3, [r3, #20]
 8003656:	431a      	orrs	r2, r3
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	69db      	ldr	r3, [r3, #28]
 800365c:	4313      	orrs	r3, r2
 800365e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	68db      	ldr	r3, [r3, #12]
 8003666:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800366a:	f023 030c 	bic.w	r3, r3, #12
 800366e:	687a      	ldr	r2, [r7, #4]
 8003670:	6812      	ldr	r2, [r2, #0]
 8003672:	68f9      	ldr	r1, [r7, #12]
 8003674:	430b      	orrs	r3, r1
 8003676:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	695b      	ldr	r3, [r3, #20]
 800367e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	699a      	ldr	r2, [r3, #24]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	430a      	orrs	r2, r1
 800368c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	69db      	ldr	r3, [r3, #28]
 8003692:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003696:	f040 818b 	bne.w	80039b0 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4ac1      	ldr	r2, [pc, #772]	; (80039a4 <UART_SetConfig+0x37c>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d005      	beq.n	80036b0 <UART_SetConfig+0x88>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4abf      	ldr	r2, [pc, #764]	; (80039a8 <UART_SetConfig+0x380>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	f040 80bd 	bne.w	800382a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80036b0:	f7fe f972 	bl	8001998 <HAL_RCC_GetPCLK2Freq>
 80036b4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	461d      	mov	r5, r3
 80036ba:	f04f 0600 	mov.w	r6, #0
 80036be:	46a8      	mov	r8, r5
 80036c0:	46b1      	mov	r9, r6
 80036c2:	eb18 0308 	adds.w	r3, r8, r8
 80036c6:	eb49 0409 	adc.w	r4, r9, r9
 80036ca:	4698      	mov	r8, r3
 80036cc:	46a1      	mov	r9, r4
 80036ce:	eb18 0805 	adds.w	r8, r8, r5
 80036d2:	eb49 0906 	adc.w	r9, r9, r6
 80036d6:	f04f 0100 	mov.w	r1, #0
 80036da:	f04f 0200 	mov.w	r2, #0
 80036de:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80036e2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80036e6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80036ea:	4688      	mov	r8, r1
 80036ec:	4691      	mov	r9, r2
 80036ee:	eb18 0005 	adds.w	r0, r8, r5
 80036f2:	eb49 0106 	adc.w	r1, r9, r6
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	461d      	mov	r5, r3
 80036fc:	f04f 0600 	mov.w	r6, #0
 8003700:	196b      	adds	r3, r5, r5
 8003702:	eb46 0406 	adc.w	r4, r6, r6
 8003706:	461a      	mov	r2, r3
 8003708:	4623      	mov	r3, r4
 800370a:	f7fc fd93 	bl	8000234 <__aeabi_uldivmod>
 800370e:	4603      	mov	r3, r0
 8003710:	460c      	mov	r4, r1
 8003712:	461a      	mov	r2, r3
 8003714:	4ba5      	ldr	r3, [pc, #660]	; (80039ac <UART_SetConfig+0x384>)
 8003716:	fba3 2302 	umull	r2, r3, r3, r2
 800371a:	095b      	lsrs	r3, r3, #5
 800371c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	461d      	mov	r5, r3
 8003724:	f04f 0600 	mov.w	r6, #0
 8003728:	46a9      	mov	r9, r5
 800372a:	46b2      	mov	sl, r6
 800372c:	eb19 0309 	adds.w	r3, r9, r9
 8003730:	eb4a 040a 	adc.w	r4, sl, sl
 8003734:	4699      	mov	r9, r3
 8003736:	46a2      	mov	sl, r4
 8003738:	eb19 0905 	adds.w	r9, r9, r5
 800373c:	eb4a 0a06 	adc.w	sl, sl, r6
 8003740:	f04f 0100 	mov.w	r1, #0
 8003744:	f04f 0200 	mov.w	r2, #0
 8003748:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800374c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003750:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003754:	4689      	mov	r9, r1
 8003756:	4692      	mov	sl, r2
 8003758:	eb19 0005 	adds.w	r0, r9, r5
 800375c:	eb4a 0106 	adc.w	r1, sl, r6
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	461d      	mov	r5, r3
 8003766:	f04f 0600 	mov.w	r6, #0
 800376a:	196b      	adds	r3, r5, r5
 800376c:	eb46 0406 	adc.w	r4, r6, r6
 8003770:	461a      	mov	r2, r3
 8003772:	4623      	mov	r3, r4
 8003774:	f7fc fd5e 	bl	8000234 <__aeabi_uldivmod>
 8003778:	4603      	mov	r3, r0
 800377a:	460c      	mov	r4, r1
 800377c:	461a      	mov	r2, r3
 800377e:	4b8b      	ldr	r3, [pc, #556]	; (80039ac <UART_SetConfig+0x384>)
 8003780:	fba3 1302 	umull	r1, r3, r3, r2
 8003784:	095b      	lsrs	r3, r3, #5
 8003786:	2164      	movs	r1, #100	; 0x64
 8003788:	fb01 f303 	mul.w	r3, r1, r3
 800378c:	1ad3      	subs	r3, r2, r3
 800378e:	00db      	lsls	r3, r3, #3
 8003790:	3332      	adds	r3, #50	; 0x32
 8003792:	4a86      	ldr	r2, [pc, #536]	; (80039ac <UART_SetConfig+0x384>)
 8003794:	fba2 2303 	umull	r2, r3, r2, r3
 8003798:	095b      	lsrs	r3, r3, #5
 800379a:	005b      	lsls	r3, r3, #1
 800379c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80037a0:	4498      	add	r8, r3
 80037a2:	68bb      	ldr	r3, [r7, #8]
 80037a4:	461d      	mov	r5, r3
 80037a6:	f04f 0600 	mov.w	r6, #0
 80037aa:	46a9      	mov	r9, r5
 80037ac:	46b2      	mov	sl, r6
 80037ae:	eb19 0309 	adds.w	r3, r9, r9
 80037b2:	eb4a 040a 	adc.w	r4, sl, sl
 80037b6:	4699      	mov	r9, r3
 80037b8:	46a2      	mov	sl, r4
 80037ba:	eb19 0905 	adds.w	r9, r9, r5
 80037be:	eb4a 0a06 	adc.w	sl, sl, r6
 80037c2:	f04f 0100 	mov.w	r1, #0
 80037c6:	f04f 0200 	mov.w	r2, #0
 80037ca:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80037ce:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80037d2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80037d6:	4689      	mov	r9, r1
 80037d8:	4692      	mov	sl, r2
 80037da:	eb19 0005 	adds.w	r0, r9, r5
 80037de:	eb4a 0106 	adc.w	r1, sl, r6
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	461d      	mov	r5, r3
 80037e8:	f04f 0600 	mov.w	r6, #0
 80037ec:	196b      	adds	r3, r5, r5
 80037ee:	eb46 0406 	adc.w	r4, r6, r6
 80037f2:	461a      	mov	r2, r3
 80037f4:	4623      	mov	r3, r4
 80037f6:	f7fc fd1d 	bl	8000234 <__aeabi_uldivmod>
 80037fa:	4603      	mov	r3, r0
 80037fc:	460c      	mov	r4, r1
 80037fe:	461a      	mov	r2, r3
 8003800:	4b6a      	ldr	r3, [pc, #424]	; (80039ac <UART_SetConfig+0x384>)
 8003802:	fba3 1302 	umull	r1, r3, r3, r2
 8003806:	095b      	lsrs	r3, r3, #5
 8003808:	2164      	movs	r1, #100	; 0x64
 800380a:	fb01 f303 	mul.w	r3, r1, r3
 800380e:	1ad3      	subs	r3, r2, r3
 8003810:	00db      	lsls	r3, r3, #3
 8003812:	3332      	adds	r3, #50	; 0x32
 8003814:	4a65      	ldr	r2, [pc, #404]	; (80039ac <UART_SetConfig+0x384>)
 8003816:	fba2 2303 	umull	r2, r3, r2, r3
 800381a:	095b      	lsrs	r3, r3, #5
 800381c:	f003 0207 	and.w	r2, r3, #7
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4442      	add	r2, r8
 8003826:	609a      	str	r2, [r3, #8]
 8003828:	e26f      	b.n	8003d0a <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800382a:	f7fe f8a1 	bl	8001970 <HAL_RCC_GetPCLK1Freq>
 800382e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	461d      	mov	r5, r3
 8003834:	f04f 0600 	mov.w	r6, #0
 8003838:	46a8      	mov	r8, r5
 800383a:	46b1      	mov	r9, r6
 800383c:	eb18 0308 	adds.w	r3, r8, r8
 8003840:	eb49 0409 	adc.w	r4, r9, r9
 8003844:	4698      	mov	r8, r3
 8003846:	46a1      	mov	r9, r4
 8003848:	eb18 0805 	adds.w	r8, r8, r5
 800384c:	eb49 0906 	adc.w	r9, r9, r6
 8003850:	f04f 0100 	mov.w	r1, #0
 8003854:	f04f 0200 	mov.w	r2, #0
 8003858:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800385c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003860:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003864:	4688      	mov	r8, r1
 8003866:	4691      	mov	r9, r2
 8003868:	eb18 0005 	adds.w	r0, r8, r5
 800386c:	eb49 0106 	adc.w	r1, r9, r6
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	461d      	mov	r5, r3
 8003876:	f04f 0600 	mov.w	r6, #0
 800387a:	196b      	adds	r3, r5, r5
 800387c:	eb46 0406 	adc.w	r4, r6, r6
 8003880:	461a      	mov	r2, r3
 8003882:	4623      	mov	r3, r4
 8003884:	f7fc fcd6 	bl	8000234 <__aeabi_uldivmod>
 8003888:	4603      	mov	r3, r0
 800388a:	460c      	mov	r4, r1
 800388c:	461a      	mov	r2, r3
 800388e:	4b47      	ldr	r3, [pc, #284]	; (80039ac <UART_SetConfig+0x384>)
 8003890:	fba3 2302 	umull	r2, r3, r3, r2
 8003894:	095b      	lsrs	r3, r3, #5
 8003896:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800389a:	68bb      	ldr	r3, [r7, #8]
 800389c:	461d      	mov	r5, r3
 800389e:	f04f 0600 	mov.w	r6, #0
 80038a2:	46a9      	mov	r9, r5
 80038a4:	46b2      	mov	sl, r6
 80038a6:	eb19 0309 	adds.w	r3, r9, r9
 80038aa:	eb4a 040a 	adc.w	r4, sl, sl
 80038ae:	4699      	mov	r9, r3
 80038b0:	46a2      	mov	sl, r4
 80038b2:	eb19 0905 	adds.w	r9, r9, r5
 80038b6:	eb4a 0a06 	adc.w	sl, sl, r6
 80038ba:	f04f 0100 	mov.w	r1, #0
 80038be:	f04f 0200 	mov.w	r2, #0
 80038c2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80038c6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80038ca:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80038ce:	4689      	mov	r9, r1
 80038d0:	4692      	mov	sl, r2
 80038d2:	eb19 0005 	adds.w	r0, r9, r5
 80038d6:	eb4a 0106 	adc.w	r1, sl, r6
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	461d      	mov	r5, r3
 80038e0:	f04f 0600 	mov.w	r6, #0
 80038e4:	196b      	adds	r3, r5, r5
 80038e6:	eb46 0406 	adc.w	r4, r6, r6
 80038ea:	461a      	mov	r2, r3
 80038ec:	4623      	mov	r3, r4
 80038ee:	f7fc fca1 	bl	8000234 <__aeabi_uldivmod>
 80038f2:	4603      	mov	r3, r0
 80038f4:	460c      	mov	r4, r1
 80038f6:	461a      	mov	r2, r3
 80038f8:	4b2c      	ldr	r3, [pc, #176]	; (80039ac <UART_SetConfig+0x384>)
 80038fa:	fba3 1302 	umull	r1, r3, r3, r2
 80038fe:	095b      	lsrs	r3, r3, #5
 8003900:	2164      	movs	r1, #100	; 0x64
 8003902:	fb01 f303 	mul.w	r3, r1, r3
 8003906:	1ad3      	subs	r3, r2, r3
 8003908:	00db      	lsls	r3, r3, #3
 800390a:	3332      	adds	r3, #50	; 0x32
 800390c:	4a27      	ldr	r2, [pc, #156]	; (80039ac <UART_SetConfig+0x384>)
 800390e:	fba2 2303 	umull	r2, r3, r2, r3
 8003912:	095b      	lsrs	r3, r3, #5
 8003914:	005b      	lsls	r3, r3, #1
 8003916:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800391a:	4498      	add	r8, r3
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	461d      	mov	r5, r3
 8003920:	f04f 0600 	mov.w	r6, #0
 8003924:	46a9      	mov	r9, r5
 8003926:	46b2      	mov	sl, r6
 8003928:	eb19 0309 	adds.w	r3, r9, r9
 800392c:	eb4a 040a 	adc.w	r4, sl, sl
 8003930:	4699      	mov	r9, r3
 8003932:	46a2      	mov	sl, r4
 8003934:	eb19 0905 	adds.w	r9, r9, r5
 8003938:	eb4a 0a06 	adc.w	sl, sl, r6
 800393c:	f04f 0100 	mov.w	r1, #0
 8003940:	f04f 0200 	mov.w	r2, #0
 8003944:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003948:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800394c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003950:	4689      	mov	r9, r1
 8003952:	4692      	mov	sl, r2
 8003954:	eb19 0005 	adds.w	r0, r9, r5
 8003958:	eb4a 0106 	adc.w	r1, sl, r6
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	461d      	mov	r5, r3
 8003962:	f04f 0600 	mov.w	r6, #0
 8003966:	196b      	adds	r3, r5, r5
 8003968:	eb46 0406 	adc.w	r4, r6, r6
 800396c:	461a      	mov	r2, r3
 800396e:	4623      	mov	r3, r4
 8003970:	f7fc fc60 	bl	8000234 <__aeabi_uldivmod>
 8003974:	4603      	mov	r3, r0
 8003976:	460c      	mov	r4, r1
 8003978:	461a      	mov	r2, r3
 800397a:	4b0c      	ldr	r3, [pc, #48]	; (80039ac <UART_SetConfig+0x384>)
 800397c:	fba3 1302 	umull	r1, r3, r3, r2
 8003980:	095b      	lsrs	r3, r3, #5
 8003982:	2164      	movs	r1, #100	; 0x64
 8003984:	fb01 f303 	mul.w	r3, r1, r3
 8003988:	1ad3      	subs	r3, r2, r3
 800398a:	00db      	lsls	r3, r3, #3
 800398c:	3332      	adds	r3, #50	; 0x32
 800398e:	4a07      	ldr	r2, [pc, #28]	; (80039ac <UART_SetConfig+0x384>)
 8003990:	fba2 2303 	umull	r2, r3, r2, r3
 8003994:	095b      	lsrs	r3, r3, #5
 8003996:	f003 0207 	and.w	r2, r3, #7
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4442      	add	r2, r8
 80039a0:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80039a2:	e1b2      	b.n	8003d0a <UART_SetConfig+0x6e2>
 80039a4:	40011000 	.word	0x40011000
 80039a8:	40011400 	.word	0x40011400
 80039ac:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4ad7      	ldr	r2, [pc, #860]	; (8003d14 <UART_SetConfig+0x6ec>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d005      	beq.n	80039c6 <UART_SetConfig+0x39e>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4ad6      	ldr	r2, [pc, #856]	; (8003d18 <UART_SetConfig+0x6f0>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	f040 80d1 	bne.w	8003b68 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80039c6:	f7fd ffe7 	bl	8001998 <HAL_RCC_GetPCLK2Freq>
 80039ca:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	469a      	mov	sl, r3
 80039d0:	f04f 0b00 	mov.w	fp, #0
 80039d4:	46d0      	mov	r8, sl
 80039d6:	46d9      	mov	r9, fp
 80039d8:	eb18 0308 	adds.w	r3, r8, r8
 80039dc:	eb49 0409 	adc.w	r4, r9, r9
 80039e0:	4698      	mov	r8, r3
 80039e2:	46a1      	mov	r9, r4
 80039e4:	eb18 080a 	adds.w	r8, r8, sl
 80039e8:	eb49 090b 	adc.w	r9, r9, fp
 80039ec:	f04f 0100 	mov.w	r1, #0
 80039f0:	f04f 0200 	mov.w	r2, #0
 80039f4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80039f8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80039fc:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003a00:	4688      	mov	r8, r1
 8003a02:	4691      	mov	r9, r2
 8003a04:	eb1a 0508 	adds.w	r5, sl, r8
 8003a08:	eb4b 0609 	adc.w	r6, fp, r9
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	4619      	mov	r1, r3
 8003a12:	f04f 0200 	mov.w	r2, #0
 8003a16:	f04f 0300 	mov.w	r3, #0
 8003a1a:	f04f 0400 	mov.w	r4, #0
 8003a1e:	0094      	lsls	r4, r2, #2
 8003a20:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003a24:	008b      	lsls	r3, r1, #2
 8003a26:	461a      	mov	r2, r3
 8003a28:	4623      	mov	r3, r4
 8003a2a:	4628      	mov	r0, r5
 8003a2c:	4631      	mov	r1, r6
 8003a2e:	f7fc fc01 	bl	8000234 <__aeabi_uldivmod>
 8003a32:	4603      	mov	r3, r0
 8003a34:	460c      	mov	r4, r1
 8003a36:	461a      	mov	r2, r3
 8003a38:	4bb8      	ldr	r3, [pc, #736]	; (8003d1c <UART_SetConfig+0x6f4>)
 8003a3a:	fba3 2302 	umull	r2, r3, r3, r2
 8003a3e:	095b      	lsrs	r3, r3, #5
 8003a40:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	469b      	mov	fp, r3
 8003a48:	f04f 0c00 	mov.w	ip, #0
 8003a4c:	46d9      	mov	r9, fp
 8003a4e:	46e2      	mov	sl, ip
 8003a50:	eb19 0309 	adds.w	r3, r9, r9
 8003a54:	eb4a 040a 	adc.w	r4, sl, sl
 8003a58:	4699      	mov	r9, r3
 8003a5a:	46a2      	mov	sl, r4
 8003a5c:	eb19 090b 	adds.w	r9, r9, fp
 8003a60:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003a64:	f04f 0100 	mov.w	r1, #0
 8003a68:	f04f 0200 	mov.w	r2, #0
 8003a6c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003a70:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003a74:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003a78:	4689      	mov	r9, r1
 8003a7a:	4692      	mov	sl, r2
 8003a7c:	eb1b 0509 	adds.w	r5, fp, r9
 8003a80:	eb4c 060a 	adc.w	r6, ip, sl
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	4619      	mov	r1, r3
 8003a8a:	f04f 0200 	mov.w	r2, #0
 8003a8e:	f04f 0300 	mov.w	r3, #0
 8003a92:	f04f 0400 	mov.w	r4, #0
 8003a96:	0094      	lsls	r4, r2, #2
 8003a98:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003a9c:	008b      	lsls	r3, r1, #2
 8003a9e:	461a      	mov	r2, r3
 8003aa0:	4623      	mov	r3, r4
 8003aa2:	4628      	mov	r0, r5
 8003aa4:	4631      	mov	r1, r6
 8003aa6:	f7fc fbc5 	bl	8000234 <__aeabi_uldivmod>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	460c      	mov	r4, r1
 8003aae:	461a      	mov	r2, r3
 8003ab0:	4b9a      	ldr	r3, [pc, #616]	; (8003d1c <UART_SetConfig+0x6f4>)
 8003ab2:	fba3 1302 	umull	r1, r3, r3, r2
 8003ab6:	095b      	lsrs	r3, r3, #5
 8003ab8:	2164      	movs	r1, #100	; 0x64
 8003aba:	fb01 f303 	mul.w	r3, r1, r3
 8003abe:	1ad3      	subs	r3, r2, r3
 8003ac0:	011b      	lsls	r3, r3, #4
 8003ac2:	3332      	adds	r3, #50	; 0x32
 8003ac4:	4a95      	ldr	r2, [pc, #596]	; (8003d1c <UART_SetConfig+0x6f4>)
 8003ac6:	fba2 2303 	umull	r2, r3, r2, r3
 8003aca:	095b      	lsrs	r3, r3, #5
 8003acc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ad0:	4498      	add	r8, r3
 8003ad2:	68bb      	ldr	r3, [r7, #8]
 8003ad4:	469b      	mov	fp, r3
 8003ad6:	f04f 0c00 	mov.w	ip, #0
 8003ada:	46d9      	mov	r9, fp
 8003adc:	46e2      	mov	sl, ip
 8003ade:	eb19 0309 	adds.w	r3, r9, r9
 8003ae2:	eb4a 040a 	adc.w	r4, sl, sl
 8003ae6:	4699      	mov	r9, r3
 8003ae8:	46a2      	mov	sl, r4
 8003aea:	eb19 090b 	adds.w	r9, r9, fp
 8003aee:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003af2:	f04f 0100 	mov.w	r1, #0
 8003af6:	f04f 0200 	mov.w	r2, #0
 8003afa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003afe:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003b02:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003b06:	4689      	mov	r9, r1
 8003b08:	4692      	mov	sl, r2
 8003b0a:	eb1b 0509 	adds.w	r5, fp, r9
 8003b0e:	eb4c 060a 	adc.w	r6, ip, sl
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	4619      	mov	r1, r3
 8003b18:	f04f 0200 	mov.w	r2, #0
 8003b1c:	f04f 0300 	mov.w	r3, #0
 8003b20:	f04f 0400 	mov.w	r4, #0
 8003b24:	0094      	lsls	r4, r2, #2
 8003b26:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003b2a:	008b      	lsls	r3, r1, #2
 8003b2c:	461a      	mov	r2, r3
 8003b2e:	4623      	mov	r3, r4
 8003b30:	4628      	mov	r0, r5
 8003b32:	4631      	mov	r1, r6
 8003b34:	f7fc fb7e 	bl	8000234 <__aeabi_uldivmod>
 8003b38:	4603      	mov	r3, r0
 8003b3a:	460c      	mov	r4, r1
 8003b3c:	461a      	mov	r2, r3
 8003b3e:	4b77      	ldr	r3, [pc, #476]	; (8003d1c <UART_SetConfig+0x6f4>)
 8003b40:	fba3 1302 	umull	r1, r3, r3, r2
 8003b44:	095b      	lsrs	r3, r3, #5
 8003b46:	2164      	movs	r1, #100	; 0x64
 8003b48:	fb01 f303 	mul.w	r3, r1, r3
 8003b4c:	1ad3      	subs	r3, r2, r3
 8003b4e:	011b      	lsls	r3, r3, #4
 8003b50:	3332      	adds	r3, #50	; 0x32
 8003b52:	4a72      	ldr	r2, [pc, #456]	; (8003d1c <UART_SetConfig+0x6f4>)
 8003b54:	fba2 2303 	umull	r2, r3, r2, r3
 8003b58:	095b      	lsrs	r3, r3, #5
 8003b5a:	f003 020f 	and.w	r2, r3, #15
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4442      	add	r2, r8
 8003b64:	609a      	str	r2, [r3, #8]
 8003b66:	e0d0      	b.n	8003d0a <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8003b68:	f7fd ff02 	bl	8001970 <HAL_RCC_GetPCLK1Freq>
 8003b6c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003b6e:	68bb      	ldr	r3, [r7, #8]
 8003b70:	469a      	mov	sl, r3
 8003b72:	f04f 0b00 	mov.w	fp, #0
 8003b76:	46d0      	mov	r8, sl
 8003b78:	46d9      	mov	r9, fp
 8003b7a:	eb18 0308 	adds.w	r3, r8, r8
 8003b7e:	eb49 0409 	adc.w	r4, r9, r9
 8003b82:	4698      	mov	r8, r3
 8003b84:	46a1      	mov	r9, r4
 8003b86:	eb18 080a 	adds.w	r8, r8, sl
 8003b8a:	eb49 090b 	adc.w	r9, r9, fp
 8003b8e:	f04f 0100 	mov.w	r1, #0
 8003b92:	f04f 0200 	mov.w	r2, #0
 8003b96:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003b9a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003b9e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003ba2:	4688      	mov	r8, r1
 8003ba4:	4691      	mov	r9, r2
 8003ba6:	eb1a 0508 	adds.w	r5, sl, r8
 8003baa:	eb4b 0609 	adc.w	r6, fp, r9
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	4619      	mov	r1, r3
 8003bb4:	f04f 0200 	mov.w	r2, #0
 8003bb8:	f04f 0300 	mov.w	r3, #0
 8003bbc:	f04f 0400 	mov.w	r4, #0
 8003bc0:	0094      	lsls	r4, r2, #2
 8003bc2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003bc6:	008b      	lsls	r3, r1, #2
 8003bc8:	461a      	mov	r2, r3
 8003bca:	4623      	mov	r3, r4
 8003bcc:	4628      	mov	r0, r5
 8003bce:	4631      	mov	r1, r6
 8003bd0:	f7fc fb30 	bl	8000234 <__aeabi_uldivmod>
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	460c      	mov	r4, r1
 8003bd8:	461a      	mov	r2, r3
 8003bda:	4b50      	ldr	r3, [pc, #320]	; (8003d1c <UART_SetConfig+0x6f4>)
 8003bdc:	fba3 2302 	umull	r2, r3, r3, r2
 8003be0:	095b      	lsrs	r3, r3, #5
 8003be2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	469b      	mov	fp, r3
 8003bea:	f04f 0c00 	mov.w	ip, #0
 8003bee:	46d9      	mov	r9, fp
 8003bf0:	46e2      	mov	sl, ip
 8003bf2:	eb19 0309 	adds.w	r3, r9, r9
 8003bf6:	eb4a 040a 	adc.w	r4, sl, sl
 8003bfa:	4699      	mov	r9, r3
 8003bfc:	46a2      	mov	sl, r4
 8003bfe:	eb19 090b 	adds.w	r9, r9, fp
 8003c02:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003c06:	f04f 0100 	mov.w	r1, #0
 8003c0a:	f04f 0200 	mov.w	r2, #0
 8003c0e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003c12:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003c16:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003c1a:	4689      	mov	r9, r1
 8003c1c:	4692      	mov	sl, r2
 8003c1e:	eb1b 0509 	adds.w	r5, fp, r9
 8003c22:	eb4c 060a 	adc.w	r6, ip, sl
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	4619      	mov	r1, r3
 8003c2c:	f04f 0200 	mov.w	r2, #0
 8003c30:	f04f 0300 	mov.w	r3, #0
 8003c34:	f04f 0400 	mov.w	r4, #0
 8003c38:	0094      	lsls	r4, r2, #2
 8003c3a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003c3e:	008b      	lsls	r3, r1, #2
 8003c40:	461a      	mov	r2, r3
 8003c42:	4623      	mov	r3, r4
 8003c44:	4628      	mov	r0, r5
 8003c46:	4631      	mov	r1, r6
 8003c48:	f7fc faf4 	bl	8000234 <__aeabi_uldivmod>
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	460c      	mov	r4, r1
 8003c50:	461a      	mov	r2, r3
 8003c52:	4b32      	ldr	r3, [pc, #200]	; (8003d1c <UART_SetConfig+0x6f4>)
 8003c54:	fba3 1302 	umull	r1, r3, r3, r2
 8003c58:	095b      	lsrs	r3, r3, #5
 8003c5a:	2164      	movs	r1, #100	; 0x64
 8003c5c:	fb01 f303 	mul.w	r3, r1, r3
 8003c60:	1ad3      	subs	r3, r2, r3
 8003c62:	011b      	lsls	r3, r3, #4
 8003c64:	3332      	adds	r3, #50	; 0x32
 8003c66:	4a2d      	ldr	r2, [pc, #180]	; (8003d1c <UART_SetConfig+0x6f4>)
 8003c68:	fba2 2303 	umull	r2, r3, r2, r3
 8003c6c:	095b      	lsrs	r3, r3, #5
 8003c6e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c72:	4498      	add	r8, r3
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	469b      	mov	fp, r3
 8003c78:	f04f 0c00 	mov.w	ip, #0
 8003c7c:	46d9      	mov	r9, fp
 8003c7e:	46e2      	mov	sl, ip
 8003c80:	eb19 0309 	adds.w	r3, r9, r9
 8003c84:	eb4a 040a 	adc.w	r4, sl, sl
 8003c88:	4699      	mov	r9, r3
 8003c8a:	46a2      	mov	sl, r4
 8003c8c:	eb19 090b 	adds.w	r9, r9, fp
 8003c90:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003c94:	f04f 0100 	mov.w	r1, #0
 8003c98:	f04f 0200 	mov.w	r2, #0
 8003c9c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003ca0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003ca4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003ca8:	4689      	mov	r9, r1
 8003caa:	4692      	mov	sl, r2
 8003cac:	eb1b 0509 	adds.w	r5, fp, r9
 8003cb0:	eb4c 060a 	adc.w	r6, ip, sl
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	4619      	mov	r1, r3
 8003cba:	f04f 0200 	mov.w	r2, #0
 8003cbe:	f04f 0300 	mov.w	r3, #0
 8003cc2:	f04f 0400 	mov.w	r4, #0
 8003cc6:	0094      	lsls	r4, r2, #2
 8003cc8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003ccc:	008b      	lsls	r3, r1, #2
 8003cce:	461a      	mov	r2, r3
 8003cd0:	4623      	mov	r3, r4
 8003cd2:	4628      	mov	r0, r5
 8003cd4:	4631      	mov	r1, r6
 8003cd6:	f7fc faad 	bl	8000234 <__aeabi_uldivmod>
 8003cda:	4603      	mov	r3, r0
 8003cdc:	460c      	mov	r4, r1
 8003cde:	461a      	mov	r2, r3
 8003ce0:	4b0e      	ldr	r3, [pc, #56]	; (8003d1c <UART_SetConfig+0x6f4>)
 8003ce2:	fba3 1302 	umull	r1, r3, r3, r2
 8003ce6:	095b      	lsrs	r3, r3, #5
 8003ce8:	2164      	movs	r1, #100	; 0x64
 8003cea:	fb01 f303 	mul.w	r3, r1, r3
 8003cee:	1ad3      	subs	r3, r2, r3
 8003cf0:	011b      	lsls	r3, r3, #4
 8003cf2:	3332      	adds	r3, #50	; 0x32
 8003cf4:	4a09      	ldr	r2, [pc, #36]	; (8003d1c <UART_SetConfig+0x6f4>)
 8003cf6:	fba2 2303 	umull	r2, r3, r2, r3
 8003cfa:	095b      	lsrs	r3, r3, #5
 8003cfc:	f003 020f 	and.w	r2, r3, #15
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4442      	add	r2, r8
 8003d06:	609a      	str	r2, [r3, #8]
}
 8003d08:	e7ff      	b.n	8003d0a <UART_SetConfig+0x6e2>
 8003d0a:	bf00      	nop
 8003d0c:	3714      	adds	r7, #20
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d14:	40011000 	.word	0x40011000
 8003d18:	40011400 	.word	0x40011400
 8003d1c:	51eb851f 	.word	0x51eb851f

08003d20 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003d20:	b480      	push	{r7}
 8003d22:	b083      	sub	sp, #12
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	f103 0208 	add.w	r2, r3, #8
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	f04f 32ff 	mov.w	r2, #4294967295
 8003d38:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	f103 0208 	add.w	r2, r3, #8
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	f103 0208 	add.w	r2, r3, #8
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2200      	movs	r2, #0
 8003d52:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003d54:	bf00      	nop
 8003d56:	370c      	adds	r7, #12
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5e:	4770      	bx	lr

08003d60 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003d60:	b480      	push	{r7}
 8003d62:	b083      	sub	sp, #12
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003d6e:	bf00      	nop
 8003d70:	370c      	adds	r7, #12
 8003d72:	46bd      	mov	sp, r7
 8003d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d78:	4770      	bx	lr

08003d7a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8003d7a:	b480      	push	{r7}
 8003d7c:	b085      	sub	sp, #20
 8003d7e:	af00      	add	r7, sp, #0
 8003d80:	6078      	str	r0, [r7, #4]
 8003d82:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	68fa      	ldr	r2, [r7, #12]
 8003d8e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	689a      	ldr	r2, [r3, #8]
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	689b      	ldr	r3, [r3, #8]
 8003d9c:	683a      	ldr	r2, [r7, #0]
 8003d9e:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	683a      	ldr	r2, [r7, #0]
 8003da4:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	687a      	ldr	r2, [r7, #4]
 8003daa:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	1c5a      	adds	r2, r3, #1
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	601a      	str	r2, [r3, #0]
}
 8003db6:	bf00      	nop
 8003db8:	3714      	adds	r7, #20
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc0:	4770      	bx	lr

08003dc2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8003dc2:	b480      	push	{r7}
 8003dc4:	b085      	sub	sp, #20
 8003dc6:	af00      	add	r7, sp, #0
 8003dc8:	6078      	str	r0, [r7, #4]
 8003dca:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dd8:	d103      	bne.n	8003de2 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	691b      	ldr	r3, [r3, #16]
 8003dde:	60fb      	str	r3, [r7, #12]
 8003de0:	e00c      	b.n	8003dfc <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	3308      	adds	r3, #8
 8003de6:	60fb      	str	r3, [r7, #12]
 8003de8:	e002      	b.n	8003df0 <vListInsert+0x2e>
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	60fb      	str	r3, [r7, #12]
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	68ba      	ldr	r2, [r7, #8]
 8003df8:	429a      	cmp	r2, r3
 8003dfa:	d2f6      	bcs.n	8003dea <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	685a      	ldr	r2, [r3, #4]
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	683a      	ldr	r2, [r7, #0]
 8003e0a:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	68fa      	ldr	r2, [r7, #12]
 8003e10:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	683a      	ldr	r2, [r7, #0]
 8003e16:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	687a      	ldr	r2, [r7, #4]
 8003e1c:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	1c5a      	adds	r2, r3, #1
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	601a      	str	r2, [r3, #0]
}
 8003e28:	bf00      	nop
 8003e2a:	3714      	adds	r7, #20
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e32:	4770      	bx	lr

08003e34 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003e34:	b480      	push	{r7}
 8003e36:	b085      	sub	sp, #20
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	691b      	ldr	r3, [r3, #16]
 8003e40:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	687a      	ldr	r2, [r7, #4]
 8003e48:	6892      	ldr	r2, [r2, #8]
 8003e4a:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	689b      	ldr	r3, [r3, #8]
 8003e50:	687a      	ldr	r2, [r7, #4]
 8003e52:	6852      	ldr	r2, [r2, #4]
 8003e54:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	687a      	ldr	r2, [r7, #4]
 8003e5c:	429a      	cmp	r2, r3
 8003e5e:	d103      	bne.n	8003e68 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	689a      	ldr	r2, [r3, #8]
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	1e5a      	subs	r2, r3, #1
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
}
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	3714      	adds	r7, #20
 8003e80:	46bd      	mov	sp, r7
 8003e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e86:	4770      	bx	lr

08003e88 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b084      	sub	sp, #16
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
 8003e90:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d109      	bne.n	8003eb0 <xQueueGenericReset+0x28>
 8003e9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ea0:	f383 8811 	msr	BASEPRI, r3
 8003ea4:	f3bf 8f6f 	isb	sy
 8003ea8:	f3bf 8f4f 	dsb	sy
 8003eac:	60bb      	str	r3, [r7, #8]
 8003eae:	e7fe      	b.n	8003eae <xQueueGenericReset+0x26>

    taskENTER_CRITICAL();
 8003eb0:	f002 fab6 	bl	8006420 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681a      	ldr	r2, [r3, #0]
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ebc:	68f9      	ldr	r1, [r7, #12]
 8003ebe:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003ec0:	fb01 f303 	mul.w	r3, r1, r3
 8003ec4:	441a      	add	r2, r3
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681a      	ldr	r2, [r3, #0]
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681a      	ldr	r2, [r3, #0]
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ee0:	3b01      	subs	r3, #1
 8003ee2:	68f9      	ldr	r1, [r7, #12]
 8003ee4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003ee6:	fb01 f303 	mul.w	r3, r1, r3
 8003eea:	441a      	add	r2, r3
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	22ff      	movs	r2, #255	; 0xff
 8003ef4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	22ff      	movs	r2, #255	; 0xff
 8003efc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d114      	bne.n	8003f30 <xQueueGenericReset+0xa8>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	691b      	ldr	r3, [r3, #16]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d01a      	beq.n	8003f44 <xQueueGenericReset+0xbc>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	3310      	adds	r3, #16
 8003f12:	4618      	mov	r0, r3
 8003f14:	f001 f904 	bl	8005120 <xTaskRemoveFromEventList>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d012      	beq.n	8003f44 <xQueueGenericReset+0xbc>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8003f1e:	4b0d      	ldr	r3, [pc, #52]	; (8003f54 <xQueueGenericReset+0xcc>)
 8003f20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f24:	601a      	str	r2, [r3, #0]
 8003f26:	f3bf 8f4f 	dsb	sy
 8003f2a:	f3bf 8f6f 	isb	sy
 8003f2e:	e009      	b.n	8003f44 <xQueueGenericReset+0xbc>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	3310      	adds	r3, #16
 8003f34:	4618      	mov	r0, r3
 8003f36:	f7ff fef3 	bl	8003d20 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	3324      	adds	r3, #36	; 0x24
 8003f3e:	4618      	mov	r0, r3
 8003f40:	f7ff feee 	bl	8003d20 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8003f44:	f002 fa9a 	bl	800647c <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 8003f48:	2301      	movs	r3, #1
}
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	3710      	adds	r7, #16
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}
 8003f52:	bf00      	nop
 8003f54:	e000ed04 	.word	0xe000ed04

08003f58 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b08c      	sub	sp, #48	; 0x30
 8003f5c:	af02      	add	r7, sp, #8
 8003f5e:	60f8      	str	r0, [r7, #12]
 8003f60:	60b9      	str	r1, [r7, #8]
 8003f62:	4613      	mov	r3, r2
 8003f64:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d109      	bne.n	8003f80 <xQueueGenericCreate+0x28>
 8003f6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f70:	f383 8811 	msr	BASEPRI, r3
 8003f74:	f3bf 8f6f 	isb	sy
 8003f78:	f3bf 8f4f 	dsb	sy
 8003f7c:	61bb      	str	r3, [r7, #24]
 8003f7e:	e7fe      	b.n	8003f7e <xQueueGenericCreate+0x26>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	68ba      	ldr	r2, [r7, #8]
 8003f84:	fb02 f303 	mul.w	r3, r2, r3
 8003f88:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8003f8a:	68bb      	ldr	r3, [r7, #8]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d006      	beq.n	8003f9e <xQueueGenericCreate+0x46>
 8003f90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f92:	68bb      	ldr	r3, [r7, #8]
 8003f94:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f98:	68fa      	ldr	r2, [r7, #12]
 8003f9a:	429a      	cmp	r2, r3
 8003f9c:	d101      	bne.n	8003fa2 <xQueueGenericCreate+0x4a>
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	e000      	b.n	8003fa4 <xQueueGenericCreate+0x4c>
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d109      	bne.n	8003fbc <xQueueGenericCreate+0x64>
 8003fa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fac:	f383 8811 	msr	BASEPRI, r3
 8003fb0:	f3bf 8f6f 	isb	sy
 8003fb4:	f3bf 8f4f 	dsb	sy
 8003fb8:	617b      	str	r3, [r7, #20]
 8003fba:	e7fe      	b.n	8003fba <xQueueGenericCreate+0x62>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8003fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fbe:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8003fc2:	d909      	bls.n	8003fd8 <xQueueGenericCreate+0x80>
 8003fc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fc8:	f383 8811 	msr	BASEPRI, r3
 8003fcc:	f3bf 8f6f 	isb	sy
 8003fd0:	f3bf 8f4f 	dsb	sy
 8003fd4:	613b      	str	r3, [r7, #16]
 8003fd6:	e7fe      	b.n	8003fd6 <xQueueGenericCreate+0x7e>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fda:	3350      	adds	r3, #80	; 0x50
 8003fdc:	4618      	mov	r0, r3
 8003fde:	f002 fb39 	bl	8006654 <pvPortMalloc>
 8003fe2:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8003fe4:	6a3b      	ldr	r3, [r7, #32]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d00d      	beq.n	8004006 <xQueueGenericCreate+0xae>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003fea:	6a3b      	ldr	r3, [r7, #32]
 8003fec:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003fee:	69fb      	ldr	r3, [r7, #28]
 8003ff0:	3350      	adds	r3, #80	; 0x50
 8003ff2:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003ff4:	79fa      	ldrb	r2, [r7, #7]
 8003ff6:	6a3b      	ldr	r3, [r7, #32]
 8003ff8:	9300      	str	r3, [sp, #0]
 8003ffa:	4613      	mov	r3, r2
 8003ffc:	69fa      	ldr	r2, [r7, #28]
 8003ffe:	68b9      	ldr	r1, [r7, #8]
 8004000:	68f8      	ldr	r0, [r7, #12]
 8004002:	f000 f805 	bl	8004010 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8004006:	6a3b      	ldr	r3, [r7, #32]
    }
 8004008:	4618      	mov	r0, r3
 800400a:	3728      	adds	r7, #40	; 0x28
 800400c:	46bd      	mov	sp, r7
 800400e:	bd80      	pop	{r7, pc}

08004010 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b084      	sub	sp, #16
 8004014:	af00      	add	r7, sp, #0
 8004016:	60f8      	str	r0, [r7, #12]
 8004018:	60b9      	str	r1, [r7, #8]
 800401a:	607a      	str	r2, [r7, #4]
 800401c:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 800401e:	68bb      	ldr	r3, [r7, #8]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d103      	bne.n	800402c <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004024:	69bb      	ldr	r3, [r7, #24]
 8004026:	69ba      	ldr	r2, [r7, #24]
 8004028:	601a      	str	r2, [r3, #0]
 800402a:	e002      	b.n	8004032 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800402c:	69bb      	ldr	r3, [r7, #24]
 800402e:	687a      	ldr	r2, [r7, #4]
 8004030:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8004032:	69bb      	ldr	r3, [r7, #24]
 8004034:	68fa      	ldr	r2, [r7, #12]
 8004036:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8004038:	69bb      	ldr	r3, [r7, #24]
 800403a:	68ba      	ldr	r2, [r7, #8]
 800403c:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800403e:	2101      	movs	r1, #1
 8004040:	69b8      	ldr	r0, [r7, #24]
 8004042:	f7ff ff21 	bl	8003e88 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8004046:	69bb      	ldr	r3, [r7, #24]
 8004048:	78fa      	ldrb	r2, [r7, #3]
 800404a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 800404e:	bf00      	nop
 8004050:	3710      	adds	r7, #16
 8004052:	46bd      	mov	sp, r7
 8004054:	bd80      	pop	{r7, pc}
	...

08004058 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b08e      	sub	sp, #56	; 0x38
 800405c:	af00      	add	r7, sp, #0
 800405e:	60f8      	str	r0, [r7, #12]
 8004060:	60b9      	str	r1, [r7, #8]
 8004062:	607a      	str	r2, [r7, #4]
 8004064:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004066:	2300      	movs	r3, #0
 8004068:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 800406e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004070:	2b00      	cmp	r3, #0
 8004072:	d109      	bne.n	8004088 <xQueueGenericSend+0x30>
 8004074:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004078:	f383 8811 	msr	BASEPRI, r3
 800407c:	f3bf 8f6f 	isb	sy
 8004080:	f3bf 8f4f 	dsb	sy
 8004084:	62bb      	str	r3, [r7, #40]	; 0x28
 8004086:	e7fe      	b.n	8004086 <xQueueGenericSend+0x2e>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d103      	bne.n	8004096 <xQueueGenericSend+0x3e>
 800408e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004092:	2b00      	cmp	r3, #0
 8004094:	d101      	bne.n	800409a <xQueueGenericSend+0x42>
 8004096:	2301      	movs	r3, #1
 8004098:	e000      	b.n	800409c <xQueueGenericSend+0x44>
 800409a:	2300      	movs	r3, #0
 800409c:	2b00      	cmp	r3, #0
 800409e:	d109      	bne.n	80040b4 <xQueueGenericSend+0x5c>
 80040a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040a4:	f383 8811 	msr	BASEPRI, r3
 80040a8:	f3bf 8f6f 	isb	sy
 80040ac:	f3bf 8f4f 	dsb	sy
 80040b0:	627b      	str	r3, [r7, #36]	; 0x24
 80040b2:	e7fe      	b.n	80040b2 <xQueueGenericSend+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	2b02      	cmp	r3, #2
 80040b8:	d103      	bne.n	80040c2 <xQueueGenericSend+0x6a>
 80040ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040be:	2b01      	cmp	r3, #1
 80040c0:	d101      	bne.n	80040c6 <xQueueGenericSend+0x6e>
 80040c2:	2301      	movs	r3, #1
 80040c4:	e000      	b.n	80040c8 <xQueueGenericSend+0x70>
 80040c6:	2300      	movs	r3, #0
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d109      	bne.n	80040e0 <xQueueGenericSend+0x88>
 80040cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040d0:	f383 8811 	msr	BASEPRI, r3
 80040d4:	f3bf 8f6f 	isb	sy
 80040d8:	f3bf 8f4f 	dsb	sy
 80040dc:	623b      	str	r3, [r7, #32]
 80040de:	e7fe      	b.n	80040de <xQueueGenericSend+0x86>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80040e0:	f001 f9b6 	bl	8005450 <xTaskGetSchedulerState>
 80040e4:	4603      	mov	r3, r0
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d102      	bne.n	80040f0 <xQueueGenericSend+0x98>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d101      	bne.n	80040f4 <xQueueGenericSend+0x9c>
 80040f0:	2301      	movs	r3, #1
 80040f2:	e000      	b.n	80040f6 <xQueueGenericSend+0x9e>
 80040f4:	2300      	movs	r3, #0
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d109      	bne.n	800410e <xQueueGenericSend+0xb6>
 80040fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040fe:	f383 8811 	msr	BASEPRI, r3
 8004102:	f3bf 8f6f 	isb	sy
 8004106:	f3bf 8f4f 	dsb	sy
 800410a:	61fb      	str	r3, [r7, #28]
 800410c:	e7fe      	b.n	800410c <xQueueGenericSend+0xb4>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800410e:	f002 f987 	bl	8006420 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004114:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004118:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800411a:	429a      	cmp	r2, r3
 800411c:	d302      	bcc.n	8004124 <xQueueGenericSend+0xcc>
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	2b02      	cmp	r3, #2
 8004122:	d129      	bne.n	8004178 <xQueueGenericSend+0x120>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004124:	683a      	ldr	r2, [r7, #0]
 8004126:	68b9      	ldr	r1, [r7, #8]
 8004128:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800412a:	f000 fab9 	bl	80046a0 <prvCopyDataToQueue>
 800412e:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004134:	2b00      	cmp	r3, #0
 8004136:	d010      	beq.n	800415a <xQueueGenericSend+0x102>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800413a:	3324      	adds	r3, #36	; 0x24
 800413c:	4618      	mov	r0, r3
 800413e:	f000 ffef 	bl	8005120 <xTaskRemoveFromEventList>
 8004142:	4603      	mov	r3, r0
 8004144:	2b00      	cmp	r3, #0
 8004146:	d013      	beq.n	8004170 <xQueueGenericSend+0x118>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8004148:	4b3f      	ldr	r3, [pc, #252]	; (8004248 <xQueueGenericSend+0x1f0>)
 800414a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800414e:	601a      	str	r2, [r3, #0]
 8004150:	f3bf 8f4f 	dsb	sy
 8004154:	f3bf 8f6f 	isb	sy
 8004158:	e00a      	b.n	8004170 <xQueueGenericSend+0x118>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 800415a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800415c:	2b00      	cmp	r3, #0
 800415e:	d007      	beq.n	8004170 <xQueueGenericSend+0x118>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8004160:	4b39      	ldr	r3, [pc, #228]	; (8004248 <xQueueGenericSend+0x1f0>)
 8004162:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004166:	601a      	str	r2, [r3, #0]
 8004168:	f3bf 8f4f 	dsb	sy
 800416c:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8004170:	f002 f984 	bl	800647c <vPortExitCritical>
                return pdPASS;
 8004174:	2301      	movs	r3, #1
 8004176:	e063      	b.n	8004240 <xQueueGenericSend+0x1e8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d103      	bne.n	8004186 <xQueueGenericSend+0x12e>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800417e:	f002 f97d 	bl	800647c <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 8004182:	2300      	movs	r3, #0
 8004184:	e05c      	b.n	8004240 <xQueueGenericSend+0x1e8>
                }
                else if( xEntryTimeSet == pdFALSE )
 8004186:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004188:	2b00      	cmp	r3, #0
 800418a:	d106      	bne.n	800419a <xQueueGenericSend+0x142>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800418c:	f107 0314 	add.w	r3, r7, #20
 8004190:	4618      	mov	r0, r3
 8004192:	f001 f827 	bl	80051e4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8004196:	2301      	movs	r3, #1
 8004198:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800419a:	f002 f96f 	bl	800647c <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800419e:	f000 fda5 	bl	8004cec <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80041a2:	f002 f93d 	bl	8006420 <vPortEnterCritical>
 80041a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041a8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80041ac:	b25b      	sxtb	r3, r3
 80041ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041b2:	d103      	bne.n	80041bc <xQueueGenericSend+0x164>
 80041b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041b6:	2200      	movs	r2, #0
 80041b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80041bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041be:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80041c2:	b25b      	sxtb	r3, r3
 80041c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041c8:	d103      	bne.n	80041d2 <xQueueGenericSend+0x17a>
 80041ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041cc:	2200      	movs	r2, #0
 80041ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80041d2:	f002 f953 	bl	800647c <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80041d6:	1d3a      	adds	r2, r7, #4
 80041d8:	f107 0314 	add.w	r3, r7, #20
 80041dc:	4611      	mov	r1, r2
 80041de:	4618      	mov	r0, r3
 80041e0:	f001 f816 	bl	8005210 <xTaskCheckForTimeOut>
 80041e4:	4603      	mov	r3, r0
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d124      	bne.n	8004234 <xQueueGenericSend+0x1dc>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80041ea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80041ec:	f000 fb50 	bl	8004890 <prvIsQueueFull>
 80041f0:	4603      	mov	r3, r0
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d018      	beq.n	8004228 <xQueueGenericSend+0x1d0>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80041f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041f8:	3310      	adds	r3, #16
 80041fa:	687a      	ldr	r2, [r7, #4]
 80041fc:	4611      	mov	r1, r2
 80041fe:	4618      	mov	r0, r3
 8004200:	f000 ff40 	bl	8005084 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8004204:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004206:	f000 fadb 	bl	80047c0 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 800420a:	f000 fd7d 	bl	8004d08 <xTaskResumeAll>
 800420e:	4603      	mov	r3, r0
 8004210:	2b00      	cmp	r3, #0
 8004212:	f47f af7c 	bne.w	800410e <xQueueGenericSend+0xb6>
                {
                    portYIELD_WITHIN_API();
 8004216:	4b0c      	ldr	r3, [pc, #48]	; (8004248 <xQueueGenericSend+0x1f0>)
 8004218:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800421c:	601a      	str	r2, [r3, #0]
 800421e:	f3bf 8f4f 	dsb	sy
 8004222:	f3bf 8f6f 	isb	sy
 8004226:	e772      	b.n	800410e <xQueueGenericSend+0xb6>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8004228:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800422a:	f000 fac9 	bl	80047c0 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800422e:	f000 fd6b 	bl	8004d08 <xTaskResumeAll>
 8004232:	e76c      	b.n	800410e <xQueueGenericSend+0xb6>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8004234:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004236:	f000 fac3 	bl	80047c0 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800423a:	f000 fd65 	bl	8004d08 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 800423e:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8004240:	4618      	mov	r0, r3
 8004242:	3738      	adds	r7, #56	; 0x38
 8004244:	46bd      	mov	sp, r7
 8004246:	bd80      	pop	{r7, pc}
 8004248:	e000ed04 	.word	0xe000ed04

0800424c <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b090      	sub	sp, #64	; 0x40
 8004250:	af00      	add	r7, sp, #0
 8004252:	60f8      	str	r0, [r7, #12]
 8004254:	60b9      	str	r1, [r7, #8]
 8004256:	607a      	str	r2, [r7, #4]
 8004258:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 800425e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004260:	2b00      	cmp	r3, #0
 8004262:	d109      	bne.n	8004278 <xQueueGenericSendFromISR+0x2c>
 8004264:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004268:	f383 8811 	msr	BASEPRI, r3
 800426c:	f3bf 8f6f 	isb	sy
 8004270:	f3bf 8f4f 	dsb	sy
 8004274:	62bb      	str	r3, [r7, #40]	; 0x28
 8004276:	e7fe      	b.n	8004276 <xQueueGenericSendFromISR+0x2a>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004278:	68bb      	ldr	r3, [r7, #8]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d103      	bne.n	8004286 <xQueueGenericSendFromISR+0x3a>
 800427e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004282:	2b00      	cmp	r3, #0
 8004284:	d101      	bne.n	800428a <xQueueGenericSendFromISR+0x3e>
 8004286:	2301      	movs	r3, #1
 8004288:	e000      	b.n	800428c <xQueueGenericSendFromISR+0x40>
 800428a:	2300      	movs	r3, #0
 800428c:	2b00      	cmp	r3, #0
 800428e:	d109      	bne.n	80042a4 <xQueueGenericSendFromISR+0x58>
 8004290:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004294:	f383 8811 	msr	BASEPRI, r3
 8004298:	f3bf 8f6f 	isb	sy
 800429c:	f3bf 8f4f 	dsb	sy
 80042a0:	627b      	str	r3, [r7, #36]	; 0x24
 80042a2:	e7fe      	b.n	80042a2 <xQueueGenericSendFromISR+0x56>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	2b02      	cmp	r3, #2
 80042a8:	d103      	bne.n	80042b2 <xQueueGenericSendFromISR+0x66>
 80042aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042ae:	2b01      	cmp	r3, #1
 80042b0:	d101      	bne.n	80042b6 <xQueueGenericSendFromISR+0x6a>
 80042b2:	2301      	movs	r3, #1
 80042b4:	e000      	b.n	80042b8 <xQueueGenericSendFromISR+0x6c>
 80042b6:	2300      	movs	r3, #0
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d109      	bne.n	80042d0 <xQueueGenericSendFromISR+0x84>
 80042bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042c0:	f383 8811 	msr	BASEPRI, r3
 80042c4:	f3bf 8f6f 	isb	sy
 80042c8:	f3bf 8f4f 	dsb	sy
 80042cc:	623b      	str	r3, [r7, #32]
 80042ce:	e7fe      	b.n	80042ce <xQueueGenericSendFromISR+0x82>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80042d0:	f002 f982 	bl	80065d8 <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 80042d4:	f3ef 8211 	mrs	r2, BASEPRI
 80042d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042dc:	f383 8811 	msr	BASEPRI, r3
 80042e0:	f3bf 8f6f 	isb	sy
 80042e4:	f3bf 8f4f 	dsb	sy
 80042e8:	61fa      	str	r2, [r7, #28]
 80042ea:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 80042ec:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80042ee:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80042f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80042f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042f8:	429a      	cmp	r2, r3
 80042fa:	d302      	bcc.n	8004302 <xQueueGenericSendFromISR+0xb6>
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	2b02      	cmp	r3, #2
 8004300:	d13d      	bne.n	800437e <xQueueGenericSendFromISR+0x132>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8004302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004304:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004308:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800430c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800430e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004310:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004312:	683a      	ldr	r2, [r7, #0]
 8004314:	68b9      	ldr	r1, [r7, #8]
 8004316:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004318:	f000 f9c2 	bl	80046a0 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 800431c:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004320:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004324:	d112      	bne.n	800434c <xQueueGenericSendFromISR+0x100>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004326:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800432a:	2b00      	cmp	r3, #0
 800432c:	d024      	beq.n	8004378 <xQueueGenericSendFromISR+0x12c>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800432e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004330:	3324      	adds	r3, #36	; 0x24
 8004332:	4618      	mov	r0, r3
 8004334:	f000 fef4 	bl	8005120 <xTaskRemoveFromEventList>
 8004338:	4603      	mov	r3, r0
 800433a:	2b00      	cmp	r3, #0
 800433c:	d01c      	beq.n	8004378 <xQueueGenericSendFromISR+0x12c>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d019      	beq.n	8004378 <xQueueGenericSendFromISR+0x12c>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2201      	movs	r2, #1
 8004348:	601a      	str	r2, [r3, #0]
 800434a:	e015      	b.n	8004378 <xQueueGenericSendFromISR+0x12c>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 800434c:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004350:	2b7f      	cmp	r3, #127	; 0x7f
 8004352:	d109      	bne.n	8004368 <xQueueGenericSendFromISR+0x11c>
        __asm volatile
 8004354:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004358:	f383 8811 	msr	BASEPRI, r3
 800435c:	f3bf 8f6f 	isb	sy
 8004360:	f3bf 8f4f 	dsb	sy
 8004364:	617b      	str	r3, [r7, #20]
 8004366:	e7fe      	b.n	8004366 <xQueueGenericSendFromISR+0x11a>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004368:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800436c:	3301      	adds	r3, #1
 800436e:	b2db      	uxtb	r3, r3
 8004370:	b25a      	sxtb	r2, r3
 8004372:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004374:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8004378:	2301      	movs	r3, #1
 800437a:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 800437c:	e001      	b.n	8004382 <xQueueGenericSendFromISR+0x136>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 800437e:	2300      	movs	r3, #0
 8004380:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004382:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004384:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8004386:	693b      	ldr	r3, [r7, #16]
 8004388:	f383 8811 	msr	BASEPRI, r3
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 800438c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800438e:	4618      	mov	r0, r3
 8004390:	3740      	adds	r7, #64	; 0x40
 8004392:	46bd      	mov	sp, r7
 8004394:	bd80      	pop	{r7, pc}
	...

08004398 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b08c      	sub	sp, #48	; 0x30
 800439c:	af00      	add	r7, sp, #0
 800439e:	60f8      	str	r0, [r7, #12]
 80043a0:	60b9      	str	r1, [r7, #8]
 80043a2:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80043a4:	2300      	movs	r3, #0
 80043a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80043ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d109      	bne.n	80043c6 <xQueueReceive+0x2e>
        __asm volatile
 80043b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043b6:	f383 8811 	msr	BASEPRI, r3
 80043ba:	f3bf 8f6f 	isb	sy
 80043be:	f3bf 8f4f 	dsb	sy
 80043c2:	623b      	str	r3, [r7, #32]
 80043c4:	e7fe      	b.n	80043c4 <xQueueReceive+0x2c>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80043c6:	68bb      	ldr	r3, [r7, #8]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d103      	bne.n	80043d4 <xQueueReceive+0x3c>
 80043cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d101      	bne.n	80043d8 <xQueueReceive+0x40>
 80043d4:	2301      	movs	r3, #1
 80043d6:	e000      	b.n	80043da <xQueueReceive+0x42>
 80043d8:	2300      	movs	r3, #0
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d109      	bne.n	80043f2 <xQueueReceive+0x5a>
 80043de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043e2:	f383 8811 	msr	BASEPRI, r3
 80043e6:	f3bf 8f6f 	isb	sy
 80043ea:	f3bf 8f4f 	dsb	sy
 80043ee:	61fb      	str	r3, [r7, #28]
 80043f0:	e7fe      	b.n	80043f0 <xQueueReceive+0x58>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80043f2:	f001 f82d 	bl	8005450 <xTaskGetSchedulerState>
 80043f6:	4603      	mov	r3, r0
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d102      	bne.n	8004402 <xQueueReceive+0x6a>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d101      	bne.n	8004406 <xQueueReceive+0x6e>
 8004402:	2301      	movs	r3, #1
 8004404:	e000      	b.n	8004408 <xQueueReceive+0x70>
 8004406:	2300      	movs	r3, #0
 8004408:	2b00      	cmp	r3, #0
 800440a:	d109      	bne.n	8004420 <xQueueReceive+0x88>
 800440c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004410:	f383 8811 	msr	BASEPRI, r3
 8004414:	f3bf 8f6f 	isb	sy
 8004418:	f3bf 8f4f 	dsb	sy
 800441c:	61bb      	str	r3, [r7, #24]
 800441e:	e7fe      	b.n	800441e <xQueueReceive+0x86>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8004420:	f001 fffe 	bl	8006420 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004426:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004428:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800442a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800442c:	2b00      	cmp	r3, #0
 800442e:	d01f      	beq.n	8004470 <xQueueReceive+0xd8>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004430:	68b9      	ldr	r1, [r7, #8]
 8004432:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004434:	f000 f99e 	bl	8004774 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800443a:	1e5a      	subs	r2, r3, #1
 800443c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800443e:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004442:	691b      	ldr	r3, [r3, #16]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d00f      	beq.n	8004468 <xQueueReceive+0xd0>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800444a:	3310      	adds	r3, #16
 800444c:	4618      	mov	r0, r3
 800444e:	f000 fe67 	bl	8005120 <xTaskRemoveFromEventList>
 8004452:	4603      	mov	r3, r0
 8004454:	2b00      	cmp	r3, #0
 8004456:	d007      	beq.n	8004468 <xQueueReceive+0xd0>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8004458:	4b3c      	ldr	r3, [pc, #240]	; (800454c <xQueueReceive+0x1b4>)
 800445a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800445e:	601a      	str	r2, [r3, #0]
 8004460:	f3bf 8f4f 	dsb	sy
 8004464:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8004468:	f002 f808 	bl	800647c <vPortExitCritical>
                return pdPASS;
 800446c:	2301      	movs	r3, #1
 800446e:	e069      	b.n	8004544 <xQueueReceive+0x1ac>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d103      	bne.n	800447e <xQueueReceive+0xe6>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8004476:	f002 f801 	bl	800647c <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 800447a:	2300      	movs	r3, #0
 800447c:	e062      	b.n	8004544 <xQueueReceive+0x1ac>
                }
                else if( xEntryTimeSet == pdFALSE )
 800447e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004480:	2b00      	cmp	r3, #0
 8004482:	d106      	bne.n	8004492 <xQueueReceive+0xfa>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8004484:	f107 0310 	add.w	r3, r7, #16
 8004488:	4618      	mov	r0, r3
 800448a:	f000 feab 	bl	80051e4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800448e:	2301      	movs	r3, #1
 8004490:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8004492:	f001 fff3 	bl	800647c <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8004496:	f000 fc29 	bl	8004cec <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800449a:	f001 ffc1 	bl	8006420 <vPortEnterCritical>
 800449e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044a0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80044a4:	b25b      	sxtb	r3, r3
 80044a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044aa:	d103      	bne.n	80044b4 <xQueueReceive+0x11c>
 80044ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044ae:	2200      	movs	r2, #0
 80044b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80044b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044b6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80044ba:	b25b      	sxtb	r3, r3
 80044bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044c0:	d103      	bne.n	80044ca <xQueueReceive+0x132>
 80044c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044c4:	2200      	movs	r2, #0
 80044c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80044ca:	f001 ffd7 	bl	800647c <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80044ce:	1d3a      	adds	r2, r7, #4
 80044d0:	f107 0310 	add.w	r3, r7, #16
 80044d4:	4611      	mov	r1, r2
 80044d6:	4618      	mov	r0, r3
 80044d8:	f000 fe9a 	bl	8005210 <xTaskCheckForTimeOut>
 80044dc:	4603      	mov	r3, r0
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d123      	bne.n	800452a <xQueueReceive+0x192>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80044e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80044e4:	f000 f9be 	bl	8004864 <prvIsQueueEmpty>
 80044e8:	4603      	mov	r3, r0
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d017      	beq.n	800451e <xQueueReceive+0x186>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80044ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044f0:	3324      	adds	r3, #36	; 0x24
 80044f2:	687a      	ldr	r2, [r7, #4]
 80044f4:	4611      	mov	r1, r2
 80044f6:	4618      	mov	r0, r3
 80044f8:	f000 fdc4 	bl	8005084 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80044fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80044fe:	f000 f95f 	bl	80047c0 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8004502:	f000 fc01 	bl	8004d08 <xTaskResumeAll>
 8004506:	4603      	mov	r3, r0
 8004508:	2b00      	cmp	r3, #0
 800450a:	d189      	bne.n	8004420 <xQueueReceive+0x88>
                {
                    portYIELD_WITHIN_API();
 800450c:	4b0f      	ldr	r3, [pc, #60]	; (800454c <xQueueReceive+0x1b4>)
 800450e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004512:	601a      	str	r2, [r3, #0]
 8004514:	f3bf 8f4f 	dsb	sy
 8004518:	f3bf 8f6f 	isb	sy
 800451c:	e780      	b.n	8004420 <xQueueReceive+0x88>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 800451e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004520:	f000 f94e 	bl	80047c0 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8004524:	f000 fbf0 	bl	8004d08 <xTaskResumeAll>
 8004528:	e77a      	b.n	8004420 <xQueueReceive+0x88>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 800452a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800452c:	f000 f948 	bl	80047c0 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8004530:	f000 fbea 	bl	8004d08 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004534:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004536:	f000 f995 	bl	8004864 <prvIsQueueEmpty>
 800453a:	4603      	mov	r3, r0
 800453c:	2b00      	cmp	r3, #0
 800453e:	f43f af6f 	beq.w	8004420 <xQueueReceive+0x88>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8004542:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8004544:	4618      	mov	r0, r3
 8004546:	3730      	adds	r7, #48	; 0x30
 8004548:	46bd      	mov	sp, r7
 800454a:	bd80      	pop	{r7, pc}
 800454c:	e000ed04 	.word	0xe000ed04

08004550 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue,
                                 void * const pvBuffer,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b090      	sub	sp, #64	; 0x40
 8004554:	af00      	add	r7, sp, #0
 8004556:	60f8      	str	r0, [r7, #12]
 8004558:	60b9      	str	r1, [r7, #8]
 800455a:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 8004560:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004562:	2b00      	cmp	r3, #0
 8004564:	d109      	bne.n	800457a <xQueueReceiveFromISR+0x2a>
 8004566:	f04f 0350 	mov.w	r3, #80	; 0x50
 800456a:	f383 8811 	msr	BASEPRI, r3
 800456e:	f3bf 8f6f 	isb	sy
 8004572:	f3bf 8f4f 	dsb	sy
 8004576:	62bb      	str	r3, [r7, #40]	; 0x28
 8004578:	e7fe      	b.n	8004578 <xQueueReceiveFromISR+0x28>
    configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800457a:	68bb      	ldr	r3, [r7, #8]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d103      	bne.n	8004588 <xQueueReceiveFromISR+0x38>
 8004580:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004584:	2b00      	cmp	r3, #0
 8004586:	d101      	bne.n	800458c <xQueueReceiveFromISR+0x3c>
 8004588:	2301      	movs	r3, #1
 800458a:	e000      	b.n	800458e <xQueueReceiveFromISR+0x3e>
 800458c:	2300      	movs	r3, #0
 800458e:	2b00      	cmp	r3, #0
 8004590:	d109      	bne.n	80045a6 <xQueueReceiveFromISR+0x56>
 8004592:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004596:	f383 8811 	msr	BASEPRI, r3
 800459a:	f3bf 8f6f 	isb	sy
 800459e:	f3bf 8f4f 	dsb	sy
 80045a2:	627b      	str	r3, [r7, #36]	; 0x24
 80045a4:	e7fe      	b.n	80045a4 <xQueueReceiveFromISR+0x54>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80045a6:	f002 f817 	bl	80065d8 <vPortValidateInterruptPriority>
        __asm volatile
 80045aa:	f3ef 8211 	mrs	r2, BASEPRI
 80045ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045b2:	f383 8811 	msr	BASEPRI, r3
 80045b6:	f3bf 8f6f 	isb	sy
 80045ba:	f3bf 8f4f 	dsb	sy
 80045be:	623a      	str	r2, [r7, #32]
 80045c0:	61fb      	str	r3, [r7, #28]
        return ulOriginalBASEPRI;
 80045c2:	6a3b      	ldr	r3, [r7, #32]

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80045c4:	637b      	str	r3, [r7, #52]	; 0x34
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80045c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045ca:	633b      	str	r3, [r7, #48]	; 0x30

        /* Cannot block in an ISR, so check there is data available. */
        if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80045cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d03d      	beq.n	800464e <xQueueReceiveFromISR+0xfe>
        {
            const int8_t cRxLock = pxQueue->cRxLock;
 80045d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045d4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80045d8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

            prvCopyDataFromQueue( pxQueue, pvBuffer );
 80045dc:	68b9      	ldr	r1, [r7, #8]
 80045de:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80045e0:	f000 f8c8 	bl	8004774 <prvCopyDataFromQueue>
            pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80045e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045e6:	1e5a      	subs	r2, r3, #1
 80045e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045ea:	639a      	str	r2, [r3, #56]	; 0x38

            /* If the queue is locked the event list will not be modified.
             * Instead update the lock count so the task that unlocks the queue
             * will know that an ISR has removed data while the queue was
             * locked. */
            if( cRxLock == queueUNLOCKED )
 80045ec:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80045f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045f4:	d112      	bne.n	800461c <xQueueReceiveFromISR+0xcc>
            {
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80045f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045f8:	691b      	ldr	r3, [r3, #16]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d024      	beq.n	8004648 <xQueueReceiveFromISR+0xf8>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80045fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004600:	3310      	adds	r3, #16
 8004602:	4618      	mov	r0, r3
 8004604:	f000 fd8c 	bl	8005120 <xTaskRemoveFromEventList>
 8004608:	4603      	mov	r3, r0
 800460a:	2b00      	cmp	r3, #0
 800460c:	d01c      	beq.n	8004648 <xQueueReceiveFromISR+0xf8>
                    {
                        /* The task waiting has a higher priority than us so
                         * force a context switch. */
                        if( pxHigherPriorityTaskWoken != NULL )
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d019      	beq.n	8004648 <xQueueReceiveFromISR+0xf8>
                        {
                            *pxHigherPriorityTaskWoken = pdTRUE;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2201      	movs	r2, #1
 8004618:	601a      	str	r2, [r3, #0]
 800461a:	e015      	b.n	8004648 <xQueueReceiveFromISR+0xf8>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was removed while it was locked. */
                configASSERT( cRxLock != queueINT8_MAX );
 800461c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004620:	2b7f      	cmp	r3, #127	; 0x7f
 8004622:	d109      	bne.n	8004638 <xQueueReceiveFromISR+0xe8>
        __asm volatile
 8004624:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004628:	f383 8811 	msr	BASEPRI, r3
 800462c:	f3bf 8f6f 	isb	sy
 8004630:	f3bf 8f4f 	dsb	sy
 8004634:	61bb      	str	r3, [r7, #24]
 8004636:	e7fe      	b.n	8004636 <xQueueReceiveFromISR+0xe6>

                pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8004638:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800463c:	3301      	adds	r3, #1
 800463e:	b2db      	uxtb	r3, r3
 8004640:	b25a      	sxtb	r2, r3
 8004642:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004644:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            }

            xReturn = pdPASS;
 8004648:	2301      	movs	r3, #1
 800464a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800464c:	e001      	b.n	8004652 <xQueueReceiveFromISR+0x102>
        }
        else
        {
            xReturn = pdFAIL;
 800464e:	2300      	movs	r3, #0
 8004650:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004652:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004654:	617b      	str	r3, [r7, #20]
        __asm volatile
 8004656:	697b      	ldr	r3, [r7, #20]
 8004658:	f383 8811 	msr	BASEPRI, r3
            traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 800465c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800465e:	4618      	mov	r0, r3
 8004660:	3740      	adds	r7, #64	; 0x40
 8004662:	46bd      	mov	sp, r7
 8004664:	bd80      	pop	{r7, pc}

08004666 <uxQueueMessagesWaiting>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8004666:	b580      	push	{r7, lr}
 8004668:	b084      	sub	sp, #16
 800466a:	af00      	add	r7, sp, #0
 800466c:	6078      	str	r0, [r7, #4]
    UBaseType_t uxReturn;

    configASSERT( xQueue );
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d109      	bne.n	8004688 <uxQueueMessagesWaiting+0x22>
        __asm volatile
 8004674:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004678:	f383 8811 	msr	BASEPRI, r3
 800467c:	f3bf 8f6f 	isb	sy
 8004680:	f3bf 8f4f 	dsb	sy
 8004684:	60bb      	str	r3, [r7, #8]
 8004686:	e7fe      	b.n	8004686 <uxQueueMessagesWaiting+0x20>

    taskENTER_CRITICAL();
 8004688:	f001 feca 	bl	8006420 <vPortEnterCritical>
    {
        uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004690:	60fb      	str	r3, [r7, #12]
    }
    taskEXIT_CRITICAL();
 8004692:	f001 fef3 	bl	800647c <vPortExitCritical>

    return uxReturn;
 8004696:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8004698:	4618      	mov	r0, r3
 800469a:	3710      	adds	r7, #16
 800469c:	46bd      	mov	sp, r7
 800469e:	bd80      	pop	{r7, pc}

080046a0 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b086      	sub	sp, #24
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	60f8      	str	r0, [r7, #12]
 80046a8:	60b9      	str	r1, [r7, #8]
 80046aa:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 80046ac:	2300      	movs	r3, #0
 80046ae:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046b4:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d10d      	bne.n	80046da <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d14d      	bne.n	8004762 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	689b      	ldr	r3, [r3, #8]
 80046ca:	4618      	mov	r0, r3
 80046cc:	f000 fede 	bl	800548c <xTaskPriorityDisinherit>
 80046d0:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	2200      	movs	r2, #0
 80046d6:	609a      	str	r2, [r3, #8]
 80046d8:	e043      	b.n	8004762 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d119      	bne.n	8004714 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	6858      	ldr	r0, [r3, #4]
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046e8:	461a      	mov	r2, r3
 80046ea:	68b9      	ldr	r1, [r7, #8]
 80046ec:	f002 f9ce 	bl	8006a8c <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	685a      	ldr	r2, [r3, #4]
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046f8:	441a      	add	r2, r3
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	685a      	ldr	r2, [r3, #4]
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	689b      	ldr	r3, [r3, #8]
 8004706:	429a      	cmp	r2, r3
 8004708:	d32b      	bcc.n	8004762 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681a      	ldr	r2, [r3, #0]
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	605a      	str	r2, [r3, #4]
 8004712:	e026      	b.n	8004762 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	68d8      	ldr	r0, [r3, #12]
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800471c:	461a      	mov	r2, r3
 800471e:	68b9      	ldr	r1, [r7, #8]
 8004720:	f002 f9b4 	bl	8006a8c <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	68da      	ldr	r2, [r3, #12]
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800472c:	425b      	negs	r3, r3
 800472e:	441a      	add	r2, r3
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	68da      	ldr	r2, [r3, #12]
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	429a      	cmp	r2, r3
 800473e:	d207      	bcs.n	8004750 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	689a      	ldr	r2, [r3, #8]
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004748:	425b      	negs	r3, r3
 800474a:	441a      	add	r2, r3
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2b02      	cmp	r3, #2
 8004754:	d105      	bne.n	8004762 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004756:	693b      	ldr	r3, [r7, #16]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d002      	beq.n	8004762 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 800475c:	693b      	ldr	r3, [r7, #16]
 800475e:	3b01      	subs	r3, #1
 8004760:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004762:	693b      	ldr	r3, [r7, #16]
 8004764:	1c5a      	adds	r2, r3, #1
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 800476a:	697b      	ldr	r3, [r7, #20]
}
 800476c:	4618      	mov	r0, r3
 800476e:	3718      	adds	r7, #24
 8004770:	46bd      	mov	sp, r7
 8004772:	bd80      	pop	{r7, pc}

08004774 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b082      	sub	sp, #8
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
 800477c:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004782:	2b00      	cmp	r3, #0
 8004784:	d018      	beq.n	80047b8 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	68da      	ldr	r2, [r3, #12]
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800478e:	441a      	add	r2, r3
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	68da      	ldr	r2, [r3, #12]
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	689b      	ldr	r3, [r3, #8]
 800479c:	429a      	cmp	r2, r3
 800479e:	d303      	bcc.n	80047a8 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681a      	ldr	r2, [r3, #0]
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	68d9      	ldr	r1, [r3, #12]
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047b0:	461a      	mov	r2, r3
 80047b2:	6838      	ldr	r0, [r7, #0]
 80047b4:	f002 f96a 	bl	8006a8c <memcpy>
    }
}
 80047b8:	bf00      	nop
 80047ba:	3708      	adds	r7, #8
 80047bc:	46bd      	mov	sp, r7
 80047be:	bd80      	pop	{r7, pc}

080047c0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b084      	sub	sp, #16
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80047c8:	f001 fe2a 	bl	8006420 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80047d2:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80047d4:	e011      	b.n	80047fa <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d012      	beq.n	8004804 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	3324      	adds	r3, #36	; 0x24
 80047e2:	4618      	mov	r0, r3
 80047e4:	f000 fc9c 	bl	8005120 <xTaskRemoveFromEventList>
 80047e8:	4603      	mov	r3, r0
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d001      	beq.n	80047f2 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 80047ee:	f000 fd73 	bl	80052d8 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80047f2:	7bfb      	ldrb	r3, [r7, #15]
 80047f4:	3b01      	subs	r3, #1
 80047f6:	b2db      	uxtb	r3, r3
 80047f8:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80047fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	dce9      	bgt.n	80047d6 <prvUnlockQueue+0x16>
 8004802:	e000      	b.n	8004806 <prvUnlockQueue+0x46>
                        break;
 8004804:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	22ff      	movs	r2, #255	; 0xff
 800480a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 800480e:	f001 fe35 	bl	800647c <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8004812:	f001 fe05 	bl	8006420 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800481c:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 800481e:	e011      	b.n	8004844 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	691b      	ldr	r3, [r3, #16]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d012      	beq.n	800484e <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	3310      	adds	r3, #16
 800482c:	4618      	mov	r0, r3
 800482e:	f000 fc77 	bl	8005120 <xTaskRemoveFromEventList>
 8004832:	4603      	mov	r3, r0
 8004834:	2b00      	cmp	r3, #0
 8004836:	d001      	beq.n	800483c <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8004838:	f000 fd4e 	bl	80052d8 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 800483c:	7bbb      	ldrb	r3, [r7, #14]
 800483e:	3b01      	subs	r3, #1
 8004840:	b2db      	uxtb	r3, r3
 8004842:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8004844:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004848:	2b00      	cmp	r3, #0
 800484a:	dce9      	bgt.n	8004820 <prvUnlockQueue+0x60>
 800484c:	e000      	b.n	8004850 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 800484e:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	22ff      	movs	r2, #255	; 0xff
 8004854:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8004858:	f001 fe10 	bl	800647c <vPortExitCritical>
}
 800485c:	bf00      	nop
 800485e:	3710      	adds	r7, #16
 8004860:	46bd      	mov	sp, r7
 8004862:	bd80      	pop	{r7, pc}

08004864 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b084      	sub	sp, #16
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800486c:	f001 fdd8 	bl	8006420 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004874:	2b00      	cmp	r3, #0
 8004876:	d102      	bne.n	800487e <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8004878:	2301      	movs	r3, #1
 800487a:	60fb      	str	r3, [r7, #12]
 800487c:	e001      	b.n	8004882 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 800487e:	2300      	movs	r3, #0
 8004880:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8004882:	f001 fdfb 	bl	800647c <vPortExitCritical>

    return xReturn;
 8004886:	68fb      	ldr	r3, [r7, #12]
}
 8004888:	4618      	mov	r0, r3
 800488a:	3710      	adds	r7, #16
 800488c:	46bd      	mov	sp, r7
 800488e:	bd80      	pop	{r7, pc}

08004890 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b084      	sub	sp, #16
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8004898:	f001 fdc2 	bl	8006420 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048a4:	429a      	cmp	r2, r3
 80048a6:	d102      	bne.n	80048ae <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 80048a8:	2301      	movs	r3, #1
 80048aa:	60fb      	str	r3, [r7, #12]
 80048ac:	e001      	b.n	80048b2 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 80048ae:	2300      	movs	r3, #0
 80048b0:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80048b2:	f001 fde3 	bl	800647c <vPortExitCritical>

    return xReturn;
 80048b6:	68fb      	ldr	r3, [r7, #12]
}
 80048b8:	4618      	mov	r0, r3
 80048ba:	3710      	adds	r7, #16
 80048bc:	46bd      	mov	sp, r7
 80048be:	bd80      	pop	{r7, pc}

080048c0 <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
 80048c0:	b480      	push	{r7}
 80048c2:	b087      	sub	sp, #28
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;
    Queue_t * const pxQueue = xQueue;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 80048cc:	693b      	ldr	r3, [r7, #16]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d109      	bne.n	80048e6 <xQueueIsQueueFullFromISR+0x26>
 80048d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048d6:	f383 8811 	msr	BASEPRI, r3
 80048da:	f3bf 8f6f 	isb	sy
 80048de:	f3bf 8f4f 	dsb	sy
 80048e2:	60fb      	str	r3, [r7, #12]
 80048e4:	e7fe      	b.n	80048e4 <xQueueIsQueueFullFromISR+0x24>

    if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80048e6:	693b      	ldr	r3, [r7, #16]
 80048e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80048ea:	693b      	ldr	r3, [r7, #16]
 80048ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048ee:	429a      	cmp	r2, r3
 80048f0:	d102      	bne.n	80048f8 <xQueueIsQueueFullFromISR+0x38>
    {
        xReturn = pdTRUE;
 80048f2:	2301      	movs	r3, #1
 80048f4:	617b      	str	r3, [r7, #20]
 80048f6:	e001      	b.n	80048fc <xQueueIsQueueFullFromISR+0x3c>
    }
    else
    {
        xReturn = pdFALSE;
 80048f8:	2300      	movs	r3, #0
 80048fa:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 80048fc:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80048fe:	4618      	mov	r0, r3
 8004900:	371c      	adds	r7, #28
 8004902:	46bd      	mov	sp, r7
 8004904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004908:	4770      	bx	lr
	...

0800490c <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 800490c:	b480      	push	{r7}
 800490e:	b085      	sub	sp, #20
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
 8004914:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004916:	2300      	movs	r3, #0
 8004918:	60fb      	str	r3, [r7, #12]
 800491a:	e014      	b.n	8004946 <vQueueAddToRegistry+0x3a>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800491c:	4a0e      	ldr	r2, [pc, #56]	; (8004958 <vQueueAddToRegistry+0x4c>)
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d10b      	bne.n	8004940 <vQueueAddToRegistry+0x34>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004928:	490b      	ldr	r1, [pc, #44]	; (8004958 <vQueueAddToRegistry+0x4c>)
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	683a      	ldr	r2, [r7, #0]
 800492e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8004932:	4a09      	ldr	r2, [pc, #36]	; (8004958 <vQueueAddToRegistry+0x4c>)
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	00db      	lsls	r3, r3, #3
 8004938:	4413      	add	r3, r2
 800493a:	687a      	ldr	r2, [r7, #4]
 800493c:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
                break;
 800493e:	e005      	b.n	800494c <vQueueAddToRegistry+0x40>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	3301      	adds	r3, #1
 8004944:	60fb      	str	r3, [r7, #12]
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	2b07      	cmp	r3, #7
 800494a:	d9e7      	bls.n	800491c <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 800494c:	bf00      	nop
 800494e:	3714      	adds	r7, #20
 8004950:	46bd      	mov	sp, r7
 8004952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004956:	4770      	bx	lr
 8004958:	20012e78 	.word	0x20012e78

0800495c <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 800495c:	b580      	push	{r7, lr}
 800495e:	b086      	sub	sp, #24
 8004960:	af00      	add	r7, sp, #0
 8004962:	60f8      	str	r0, [r7, #12]
 8004964:	60b9      	str	r1, [r7, #8]
 8004966:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 800496c:	f001 fd58 	bl	8006420 <vPortEnterCritical>
 8004970:	697b      	ldr	r3, [r7, #20]
 8004972:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004976:	b25b      	sxtb	r3, r3
 8004978:	f1b3 3fff 	cmp.w	r3, #4294967295
 800497c:	d103      	bne.n	8004986 <vQueueWaitForMessageRestricted+0x2a>
 800497e:	697b      	ldr	r3, [r7, #20]
 8004980:	2200      	movs	r2, #0
 8004982:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800498c:	b25b      	sxtb	r3, r3
 800498e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004992:	d103      	bne.n	800499c <vQueueWaitForMessageRestricted+0x40>
 8004994:	697b      	ldr	r3, [r7, #20]
 8004996:	2200      	movs	r2, #0
 8004998:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800499c:	f001 fd6e 	bl	800647c <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80049a0:	697b      	ldr	r3, [r7, #20]
 80049a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d106      	bne.n	80049b6 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80049a8:	697b      	ldr	r3, [r7, #20]
 80049aa:	3324      	adds	r3, #36	; 0x24
 80049ac:	687a      	ldr	r2, [r7, #4]
 80049ae:	68b9      	ldr	r1, [r7, #8]
 80049b0:	4618      	mov	r0, r3
 80049b2:	f000 fb8b 	bl	80050cc <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 80049b6:	6978      	ldr	r0, [r7, #20]
 80049b8:	f7ff ff02 	bl	80047c0 <prvUnlockQueue>
    }
 80049bc:	bf00      	nop
 80049be:	3718      	adds	r7, #24
 80049c0:	46bd      	mov	sp, r7
 80049c2:	bd80      	pop	{r7, pc}

080049c4 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b08c      	sub	sp, #48	; 0x30
 80049c8:	af04      	add	r7, sp, #16
 80049ca:	60f8      	str	r0, [r7, #12]
 80049cc:	60b9      	str	r1, [r7, #8]
 80049ce:	603b      	str	r3, [r7, #0]
 80049d0:	4613      	mov	r3, r2
 80049d2:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80049d4:	88fb      	ldrh	r3, [r7, #6]
 80049d6:	009b      	lsls	r3, r3, #2
 80049d8:	4618      	mov	r0, r3
 80049da:	f001 fe3b 	bl	8006654 <pvPortMalloc>
 80049de:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 80049e0:	697b      	ldr	r3, [r7, #20]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d00e      	beq.n	8004a04 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80049e6:	2058      	movs	r0, #88	; 0x58
 80049e8:	f001 fe34 	bl	8006654 <pvPortMalloc>
 80049ec:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 80049ee:	69fb      	ldr	r3, [r7, #28]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d003      	beq.n	80049fc <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 80049f4:	69fb      	ldr	r3, [r7, #28]
 80049f6:	697a      	ldr	r2, [r7, #20]
 80049f8:	631a      	str	r2, [r3, #48]	; 0x30
 80049fa:	e005      	b.n	8004a08 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 80049fc:	6978      	ldr	r0, [r7, #20]
 80049fe:	f001 ff05 	bl	800680c <vPortFree>
 8004a02:	e001      	b.n	8004a08 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8004a04:	2300      	movs	r3, #0
 8004a06:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8004a08:	69fb      	ldr	r3, [r7, #28]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d013      	beq.n	8004a36 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004a0e:	88fa      	ldrh	r2, [r7, #6]
 8004a10:	2300      	movs	r3, #0
 8004a12:	9303      	str	r3, [sp, #12]
 8004a14:	69fb      	ldr	r3, [r7, #28]
 8004a16:	9302      	str	r3, [sp, #8]
 8004a18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a1a:	9301      	str	r3, [sp, #4]
 8004a1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a1e:	9300      	str	r3, [sp, #0]
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	68b9      	ldr	r1, [r7, #8]
 8004a24:	68f8      	ldr	r0, [r7, #12]
 8004a26:	f000 f80e 	bl	8004a46 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8004a2a:	69f8      	ldr	r0, [r7, #28]
 8004a2c:	f000 f8a0 	bl	8004b70 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8004a30:	2301      	movs	r3, #1
 8004a32:	61bb      	str	r3, [r7, #24]
 8004a34:	e002      	b.n	8004a3c <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004a36:	f04f 33ff 	mov.w	r3, #4294967295
 8004a3a:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8004a3c:	69bb      	ldr	r3, [r7, #24]
    }
 8004a3e:	4618      	mov	r0, r3
 8004a40:	3720      	adds	r7, #32
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bd80      	pop	{r7, pc}

08004a46 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8004a46:	b580      	push	{r7, lr}
 8004a48:	b088      	sub	sp, #32
 8004a4a:	af00      	add	r7, sp, #0
 8004a4c:	60f8      	str	r0, [r7, #12]
 8004a4e:	60b9      	str	r1, [r7, #8]
 8004a50:	607a      	str	r2, [r7, #4]
 8004a52:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004a54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a56:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	009b      	lsls	r3, r3, #2
 8004a5c:	461a      	mov	r2, r3
 8004a5e:	21a5      	movs	r1, #165	; 0xa5
 8004a60:	f002 f81f 	bl	8006aa2 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004a64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004a6e:	3b01      	subs	r3, #1
 8004a70:	009b      	lsls	r3, r3, #2
 8004a72:	4413      	add	r3, r2
 8004a74:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004a76:	69bb      	ldr	r3, [r7, #24]
 8004a78:	f023 0307 	bic.w	r3, r3, #7
 8004a7c:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004a7e:	69bb      	ldr	r3, [r7, #24]
 8004a80:	f003 0307 	and.w	r3, r3, #7
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d009      	beq.n	8004a9c <prvInitialiseNewTask+0x56>
 8004a88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a8c:	f383 8811 	msr	BASEPRI, r3
 8004a90:	f3bf 8f6f 	isb	sy
 8004a94:	f3bf 8f4f 	dsb	sy
 8004a98:	617b      	str	r3, [r7, #20]
 8004a9a:	e7fe      	b.n	8004a9a <prvInitialiseNewTask+0x54>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8004a9c:	68bb      	ldr	r3, [r7, #8]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d01f      	beq.n	8004ae2 <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	61fb      	str	r3, [r7, #28]
 8004aa6:	e012      	b.n	8004ace <prvInitialiseNewTask+0x88>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004aa8:	68ba      	ldr	r2, [r7, #8]
 8004aaa:	69fb      	ldr	r3, [r7, #28]
 8004aac:	4413      	add	r3, r2
 8004aae:	7819      	ldrb	r1, [r3, #0]
 8004ab0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ab2:	69fb      	ldr	r3, [r7, #28]
 8004ab4:	4413      	add	r3, r2
 8004ab6:	3334      	adds	r3, #52	; 0x34
 8004ab8:	460a      	mov	r2, r1
 8004aba:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8004abc:	68ba      	ldr	r2, [r7, #8]
 8004abe:	69fb      	ldr	r3, [r7, #28]
 8004ac0:	4413      	add	r3, r2
 8004ac2:	781b      	ldrb	r3, [r3, #0]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d006      	beq.n	8004ad6 <prvInitialiseNewTask+0x90>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004ac8:	69fb      	ldr	r3, [r7, #28]
 8004aca:	3301      	adds	r3, #1
 8004acc:	61fb      	str	r3, [r7, #28]
 8004ace:	69fb      	ldr	r3, [r7, #28]
 8004ad0:	2b09      	cmp	r3, #9
 8004ad2:	d9e9      	bls.n	8004aa8 <prvInitialiseNewTask+0x62>
 8004ad4:	e000      	b.n	8004ad8 <prvInitialiseNewTask+0x92>
            {
                break;
 8004ad6:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004ad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ada:	2200      	movs	r2, #0
 8004adc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004ae0:	e003      	b.n	8004aea <prvInitialiseNewTask+0xa4>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004aea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aec:	2b04      	cmp	r3, #4
 8004aee:	d901      	bls.n	8004af4 <prvInitialiseNewTask+0xae>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004af0:	2304      	movs	r3, #4
 8004af2:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8004af4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004af6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004af8:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8004afa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004afc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004afe:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8004b00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b02:	2200      	movs	r2, #0
 8004b04:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b08:	3304      	adds	r3, #4
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	f7ff f928 	bl	8003d60 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004b10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b12:	3318      	adds	r3, #24
 8004b14:	4618      	mov	r0, r3
 8004b16:	f7ff f923 	bl	8003d60 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b1e:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b22:	f1c3 0205 	rsb	r2, r3, #5
 8004b26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b28:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004b2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b2e:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8004b30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b32:	3350      	adds	r3, #80	; 0x50
 8004b34:	2204      	movs	r2, #4
 8004b36:	2100      	movs	r1, #0
 8004b38:	4618      	mov	r0, r3
 8004b3a:	f001 ffb2 	bl	8006aa2 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8004b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b40:	3354      	adds	r3, #84	; 0x54
 8004b42:	2201      	movs	r2, #1
 8004b44:	2100      	movs	r1, #0
 8004b46:	4618      	mov	r0, r3
 8004b48:	f001 ffab 	bl	8006aa2 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004b4c:	683a      	ldr	r2, [r7, #0]
 8004b4e:	68f9      	ldr	r1, [r7, #12]
 8004b50:	69b8      	ldr	r0, [r7, #24]
 8004b52:	f001 fb3b 	bl	80061cc <pxPortInitialiseStack>
 8004b56:	4602      	mov	r2, r0
 8004b58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b5a:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8004b5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d002      	beq.n	8004b68 <prvInitialiseNewTask+0x122>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004b62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b66:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004b68:	bf00      	nop
 8004b6a:	3720      	adds	r7, #32
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	bd80      	pop	{r7, pc}

08004b70 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b082      	sub	sp, #8
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8004b78:	f001 fc52 	bl	8006420 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8004b7c:	4b2c      	ldr	r3, [pc, #176]	; (8004c30 <prvAddNewTaskToReadyList+0xc0>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	3301      	adds	r3, #1
 8004b82:	4a2b      	ldr	r2, [pc, #172]	; (8004c30 <prvAddNewTaskToReadyList+0xc0>)
 8004b84:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8004b86:	4b2b      	ldr	r3, [pc, #172]	; (8004c34 <prvAddNewTaskToReadyList+0xc4>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d109      	bne.n	8004ba2 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8004b8e:	4a29      	ldr	r2, [pc, #164]	; (8004c34 <prvAddNewTaskToReadyList+0xc4>)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004b94:	4b26      	ldr	r3, [pc, #152]	; (8004c30 <prvAddNewTaskToReadyList+0xc0>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	2b01      	cmp	r3, #1
 8004b9a:	d110      	bne.n	8004bbe <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8004b9c:	f000 fbc0 	bl	8005320 <prvInitialiseTaskLists>
 8004ba0:	e00d      	b.n	8004bbe <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8004ba2:	4b25      	ldr	r3, [pc, #148]	; (8004c38 <prvAddNewTaskToReadyList+0xc8>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d109      	bne.n	8004bbe <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004baa:	4b22      	ldr	r3, [pc, #136]	; (8004c34 <prvAddNewTaskToReadyList+0xc4>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bb4:	429a      	cmp	r2, r3
 8004bb6:	d802      	bhi.n	8004bbe <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8004bb8:	4a1e      	ldr	r2, [pc, #120]	; (8004c34 <prvAddNewTaskToReadyList+0xc4>)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8004bbe:	4b1f      	ldr	r3, [pc, #124]	; (8004c3c <prvAddNewTaskToReadyList+0xcc>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	3301      	adds	r3, #1
 8004bc4:	4a1d      	ldr	r2, [pc, #116]	; (8004c3c <prvAddNewTaskToReadyList+0xcc>)
 8004bc6:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004bc8:	4b1c      	ldr	r3, [pc, #112]	; (8004c3c <prvAddNewTaskToReadyList+0xcc>)
 8004bca:	681a      	ldr	r2, [r3, #0]
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bd4:	2201      	movs	r2, #1
 8004bd6:	409a      	lsls	r2, r3
 8004bd8:	4b19      	ldr	r3, [pc, #100]	; (8004c40 <prvAddNewTaskToReadyList+0xd0>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4313      	orrs	r3, r2
 8004bde:	4a18      	ldr	r2, [pc, #96]	; (8004c40 <prvAddNewTaskToReadyList+0xd0>)
 8004be0:	6013      	str	r3, [r2, #0]
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004be6:	4613      	mov	r3, r2
 8004be8:	009b      	lsls	r3, r3, #2
 8004bea:	4413      	add	r3, r2
 8004bec:	009b      	lsls	r3, r3, #2
 8004bee:	4a15      	ldr	r2, [pc, #84]	; (8004c44 <prvAddNewTaskToReadyList+0xd4>)
 8004bf0:	441a      	add	r2, r3
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	3304      	adds	r3, #4
 8004bf6:	4619      	mov	r1, r3
 8004bf8:	4610      	mov	r0, r2
 8004bfa:	f7ff f8be 	bl	8003d7a <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8004bfe:	f001 fc3d 	bl	800647c <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8004c02:	4b0d      	ldr	r3, [pc, #52]	; (8004c38 <prvAddNewTaskToReadyList+0xc8>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d00e      	beq.n	8004c28 <prvAddNewTaskToReadyList+0xb8>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004c0a:	4b0a      	ldr	r3, [pc, #40]	; (8004c34 <prvAddNewTaskToReadyList+0xc4>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c14:	429a      	cmp	r2, r3
 8004c16:	d207      	bcs.n	8004c28 <prvAddNewTaskToReadyList+0xb8>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8004c18:	4b0b      	ldr	r3, [pc, #44]	; (8004c48 <prvAddNewTaskToReadyList+0xd8>)
 8004c1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c1e:	601a      	str	r2, [r3, #0]
 8004c20:	f3bf 8f4f 	dsb	sy
 8004c24:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004c28:	bf00      	nop
 8004c2a:	3708      	adds	r7, #8
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	bd80      	pop	{r7, pc}
 8004c30:	20000114 	.word	0x20000114
 8004c34:	2000003c 	.word	0x2000003c
 8004c38:	20000120 	.word	0x20000120
 8004c3c:	20000130 	.word	0x20000130
 8004c40:	2000011c 	.word	0x2000011c
 8004c44:	20000040 	.word	0x20000040
 8004c48:	e000ed04 	.word	0xe000ed04

08004c4c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b086      	sub	sp, #24
 8004c50:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8004c52:	4b1f      	ldr	r3, [pc, #124]	; (8004cd0 <vTaskStartScheduler+0x84>)
 8004c54:	9301      	str	r3, [sp, #4]
 8004c56:	2300      	movs	r3, #0
 8004c58:	9300      	str	r3, [sp, #0]
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	2282      	movs	r2, #130	; 0x82
 8004c5e:	491d      	ldr	r1, [pc, #116]	; (8004cd4 <vTaskStartScheduler+0x88>)
 8004c60:	481d      	ldr	r0, [pc, #116]	; (8004cd8 <vTaskStartScheduler+0x8c>)
 8004c62:	f7ff feaf 	bl	80049c4 <xTaskCreate>
 8004c66:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	2b01      	cmp	r3, #1
 8004c6c:	d102      	bne.n	8004c74 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8004c6e:	f000 ff43 	bl	8005af8 <xTimerCreateTimerTask>
 8004c72:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	2b01      	cmp	r3, #1
 8004c78:	d115      	bne.n	8004ca6 <vTaskStartScheduler+0x5a>
 8004c7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c7e:	f383 8811 	msr	BASEPRI, r3
 8004c82:	f3bf 8f6f 	isb	sy
 8004c86:	f3bf 8f4f 	dsb	sy
 8004c8a:	60bb      	str	r3, [r7, #8]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8004c8c:	4b13      	ldr	r3, [pc, #76]	; (8004cdc <vTaskStartScheduler+0x90>)
 8004c8e:	f04f 32ff 	mov.w	r2, #4294967295
 8004c92:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8004c94:	4b12      	ldr	r3, [pc, #72]	; (8004ce0 <vTaskStartScheduler+0x94>)
 8004c96:	2201      	movs	r2, #1
 8004c98:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004c9a:	4b12      	ldr	r3, [pc, #72]	; (8004ce4 <vTaskStartScheduler+0x98>)
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8004ca0:	f001 fb20 	bl	80062e4 <xPortStartScheduler>
 8004ca4:	e00d      	b.n	8004cc2 <vTaskStartScheduler+0x76>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cac:	d109      	bne.n	8004cc2 <vTaskStartScheduler+0x76>
 8004cae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cb2:	f383 8811 	msr	BASEPRI, r3
 8004cb6:	f3bf 8f6f 	isb	sy
 8004cba:	f3bf 8f4f 	dsb	sy
 8004cbe:	607b      	str	r3, [r7, #4]
 8004cc0:	e7fe      	b.n	8004cc0 <vTaskStartScheduler+0x74>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8004cc2:	4b09      	ldr	r3, [pc, #36]	; (8004ce8 <vTaskStartScheduler+0x9c>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
}
 8004cc6:	bf00      	nop
 8004cc8:	3710      	adds	r7, #16
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bd80      	pop	{r7, pc}
 8004cce:	bf00      	nop
 8004cd0:	20000138 	.word	0x20000138
 8004cd4:	08006c50 	.word	0x08006c50
 8004cd8:	080052f1 	.word	0x080052f1
 8004cdc:	20000134 	.word	0x20000134
 8004ce0:	20000120 	.word	0x20000120
 8004ce4:	20000118 	.word	0x20000118
 8004ce8:	20000014 	.word	0x20000014

08004cec <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004cec:	b480      	push	{r7}
 8004cee:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8004cf0:	4b04      	ldr	r3, [pc, #16]	; (8004d04 <vTaskSuspendAll+0x18>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	3301      	adds	r3, #1
 8004cf6:	4a03      	ldr	r2, [pc, #12]	; (8004d04 <vTaskSuspendAll+0x18>)
 8004cf8:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8004cfa:	bf00      	nop
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d02:	4770      	bx	lr
 8004d04:	2000013c 	.word	0x2000013c

08004d08 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b084      	sub	sp, #16
 8004d0c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8004d0e:	2300      	movs	r3, #0
 8004d10:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8004d12:	2300      	movs	r3, #0
 8004d14:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8004d16:	4b41      	ldr	r3, [pc, #260]	; (8004e1c <xTaskResumeAll+0x114>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d109      	bne.n	8004d32 <xTaskResumeAll+0x2a>
 8004d1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d22:	f383 8811 	msr	BASEPRI, r3
 8004d26:	f3bf 8f6f 	isb	sy
 8004d2a:	f3bf 8f4f 	dsb	sy
 8004d2e:	603b      	str	r3, [r7, #0]
 8004d30:	e7fe      	b.n	8004d30 <xTaskResumeAll+0x28>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8004d32:	f001 fb75 	bl	8006420 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8004d36:	4b39      	ldr	r3, [pc, #228]	; (8004e1c <xTaskResumeAll+0x114>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	3b01      	subs	r3, #1
 8004d3c:	4a37      	ldr	r2, [pc, #220]	; (8004e1c <xTaskResumeAll+0x114>)
 8004d3e:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004d40:	4b36      	ldr	r3, [pc, #216]	; (8004e1c <xTaskResumeAll+0x114>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d161      	bne.n	8004e0c <xTaskResumeAll+0x104>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004d48:	4b35      	ldr	r3, [pc, #212]	; (8004e20 <xTaskResumeAll+0x118>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d05d      	beq.n	8004e0c <xTaskResumeAll+0x104>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004d50:	e02e      	b.n	8004db0 <xTaskResumeAll+0xa8>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d52:	4b34      	ldr	r3, [pc, #208]	; (8004e24 <xTaskResumeAll+0x11c>)
 8004d54:	68db      	ldr	r3, [r3, #12]
 8004d56:	68db      	ldr	r3, [r3, #12]
 8004d58:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	3318      	adds	r3, #24
 8004d5e:	4618      	mov	r0, r3
 8004d60:	f7ff f868 	bl	8003e34 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	3304      	adds	r3, #4
 8004d68:	4618      	mov	r0, r3
 8004d6a:	f7ff f863 	bl	8003e34 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d72:	2201      	movs	r2, #1
 8004d74:	409a      	lsls	r2, r3
 8004d76:	4b2c      	ldr	r3, [pc, #176]	; (8004e28 <xTaskResumeAll+0x120>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	4a2a      	ldr	r2, [pc, #168]	; (8004e28 <xTaskResumeAll+0x120>)
 8004d7e:	6013      	str	r3, [r2, #0]
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d84:	4613      	mov	r3, r2
 8004d86:	009b      	lsls	r3, r3, #2
 8004d88:	4413      	add	r3, r2
 8004d8a:	009b      	lsls	r3, r3, #2
 8004d8c:	4a27      	ldr	r2, [pc, #156]	; (8004e2c <xTaskResumeAll+0x124>)
 8004d8e:	441a      	add	r2, r3
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	3304      	adds	r3, #4
 8004d94:	4619      	mov	r1, r3
 8004d96:	4610      	mov	r0, r2
 8004d98:	f7fe ffef 	bl	8003d7a <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004da0:	4b23      	ldr	r3, [pc, #140]	; (8004e30 <xTaskResumeAll+0x128>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004da6:	429a      	cmp	r2, r3
 8004da8:	d302      	bcc.n	8004db0 <xTaskResumeAll+0xa8>
                    {
                        xYieldPending = pdTRUE;
 8004daa:	4b22      	ldr	r3, [pc, #136]	; (8004e34 <xTaskResumeAll+0x12c>)
 8004dac:	2201      	movs	r2, #1
 8004dae:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004db0:	4b1c      	ldr	r3, [pc, #112]	; (8004e24 <xTaskResumeAll+0x11c>)
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d1cc      	bne.n	8004d52 <xTaskResumeAll+0x4a>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d001      	beq.n	8004dc2 <xTaskResumeAll+0xba>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8004dbe:	f000 fb2b 	bl	8005418 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004dc2:	4b1d      	ldr	r3, [pc, #116]	; (8004e38 <xTaskResumeAll+0x130>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d010      	beq.n	8004df0 <xTaskResumeAll+0xe8>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8004dce:	f000 f847 	bl	8004e60 <xTaskIncrementTick>
 8004dd2:	4603      	mov	r3, r0
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d002      	beq.n	8004dde <xTaskResumeAll+0xd6>
                            {
                                xYieldPending = pdTRUE;
 8004dd8:	4b16      	ldr	r3, [pc, #88]	; (8004e34 <xTaskResumeAll+0x12c>)
 8004dda:	2201      	movs	r2, #1
 8004ddc:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	3b01      	subs	r3, #1
 8004de2:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d1f1      	bne.n	8004dce <xTaskResumeAll+0xc6>

                        xPendedTicks = 0;
 8004dea:	4b13      	ldr	r3, [pc, #76]	; (8004e38 <xTaskResumeAll+0x130>)
 8004dec:	2200      	movs	r2, #0
 8004dee:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8004df0:	4b10      	ldr	r3, [pc, #64]	; (8004e34 <xTaskResumeAll+0x12c>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d009      	beq.n	8004e0c <xTaskResumeAll+0x104>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8004df8:	2301      	movs	r3, #1
 8004dfa:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8004dfc:	4b0f      	ldr	r3, [pc, #60]	; (8004e3c <xTaskResumeAll+0x134>)
 8004dfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e02:	601a      	str	r2, [r3, #0]
 8004e04:	f3bf 8f4f 	dsb	sy
 8004e08:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8004e0c:	f001 fb36 	bl	800647c <vPortExitCritical>

    return xAlreadyYielded;
 8004e10:	68bb      	ldr	r3, [r7, #8]
}
 8004e12:	4618      	mov	r0, r3
 8004e14:	3710      	adds	r7, #16
 8004e16:	46bd      	mov	sp, r7
 8004e18:	bd80      	pop	{r7, pc}
 8004e1a:	bf00      	nop
 8004e1c:	2000013c 	.word	0x2000013c
 8004e20:	20000114 	.word	0x20000114
 8004e24:	200000d4 	.word	0x200000d4
 8004e28:	2000011c 	.word	0x2000011c
 8004e2c:	20000040 	.word	0x20000040
 8004e30:	2000003c 	.word	0x2000003c
 8004e34:	20000128 	.word	0x20000128
 8004e38:	20000124 	.word	0x20000124
 8004e3c:	e000ed04 	.word	0xe000ed04

08004e40 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004e40:	b480      	push	{r7}
 8004e42:	b083      	sub	sp, #12
 8004e44:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8004e46:	4b05      	ldr	r3, [pc, #20]	; (8004e5c <xTaskGetTickCount+0x1c>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8004e4c:	687b      	ldr	r3, [r7, #4]
}
 8004e4e:	4618      	mov	r0, r3
 8004e50:	370c      	adds	r7, #12
 8004e52:	46bd      	mov	sp, r7
 8004e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e58:	4770      	bx	lr
 8004e5a:	bf00      	nop
 8004e5c:	20000118 	.word	0x20000118

08004e60 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b086      	sub	sp, #24
 8004e64:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8004e66:	2300      	movs	r3, #0
 8004e68:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004e6a:	4b4e      	ldr	r3, [pc, #312]	; (8004fa4 <xTaskIncrementTick+0x144>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	f040 808d 	bne.w	8004f8e <xTaskIncrementTick+0x12e>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004e74:	4b4c      	ldr	r3, [pc, #304]	; (8004fa8 <xTaskIncrementTick+0x148>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	3301      	adds	r3, #1
 8004e7a:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8004e7c:	4a4a      	ldr	r2, [pc, #296]	; (8004fa8 <xTaskIncrementTick+0x148>)
 8004e7e:	693b      	ldr	r3, [r7, #16]
 8004e80:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004e82:	693b      	ldr	r3, [r7, #16]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d11f      	bne.n	8004ec8 <xTaskIncrementTick+0x68>
        {
            taskSWITCH_DELAYED_LISTS();
 8004e88:	4b48      	ldr	r3, [pc, #288]	; (8004fac <xTaskIncrementTick+0x14c>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d009      	beq.n	8004ea6 <xTaskIncrementTick+0x46>
 8004e92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e96:	f383 8811 	msr	BASEPRI, r3
 8004e9a:	f3bf 8f6f 	isb	sy
 8004e9e:	f3bf 8f4f 	dsb	sy
 8004ea2:	603b      	str	r3, [r7, #0]
 8004ea4:	e7fe      	b.n	8004ea4 <xTaskIncrementTick+0x44>
 8004ea6:	4b41      	ldr	r3, [pc, #260]	; (8004fac <xTaskIncrementTick+0x14c>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	60fb      	str	r3, [r7, #12]
 8004eac:	4b40      	ldr	r3, [pc, #256]	; (8004fb0 <xTaskIncrementTick+0x150>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4a3e      	ldr	r2, [pc, #248]	; (8004fac <xTaskIncrementTick+0x14c>)
 8004eb2:	6013      	str	r3, [r2, #0]
 8004eb4:	4a3e      	ldr	r2, [pc, #248]	; (8004fb0 <xTaskIncrementTick+0x150>)
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	6013      	str	r3, [r2, #0]
 8004eba:	4b3e      	ldr	r3, [pc, #248]	; (8004fb4 <xTaskIncrementTick+0x154>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	3301      	adds	r3, #1
 8004ec0:	4a3c      	ldr	r2, [pc, #240]	; (8004fb4 <xTaskIncrementTick+0x154>)
 8004ec2:	6013      	str	r3, [r2, #0]
 8004ec4:	f000 faa8 	bl	8005418 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8004ec8:	4b3b      	ldr	r3, [pc, #236]	; (8004fb8 <xTaskIncrementTick+0x158>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	693a      	ldr	r2, [r7, #16]
 8004ece:	429a      	cmp	r2, r3
 8004ed0:	d348      	bcc.n	8004f64 <xTaskIncrementTick+0x104>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004ed2:	4b36      	ldr	r3, [pc, #216]	; (8004fac <xTaskIncrementTick+0x14c>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d104      	bne.n	8004ee6 <xTaskIncrementTick+0x86>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004edc:	4b36      	ldr	r3, [pc, #216]	; (8004fb8 <xTaskIncrementTick+0x158>)
 8004ede:	f04f 32ff 	mov.w	r2, #4294967295
 8004ee2:	601a      	str	r2, [r3, #0]
                    break;
 8004ee4:	e03e      	b.n	8004f64 <xTaskIncrementTick+0x104>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ee6:	4b31      	ldr	r3, [pc, #196]	; (8004fac <xTaskIncrementTick+0x14c>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	68db      	ldr	r3, [r3, #12]
 8004eec:	68db      	ldr	r3, [r3, #12]
 8004eee:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8004ef6:	693a      	ldr	r2, [r7, #16]
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	429a      	cmp	r2, r3
 8004efc:	d203      	bcs.n	8004f06 <xTaskIncrementTick+0xa6>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8004efe:	4a2e      	ldr	r2, [pc, #184]	; (8004fb8 <xTaskIncrementTick+0x158>)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004f04:	e02e      	b.n	8004f64 <xTaskIncrementTick+0x104>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004f06:	68bb      	ldr	r3, [r7, #8]
 8004f08:	3304      	adds	r3, #4
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	f7fe ff92 	bl	8003e34 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d004      	beq.n	8004f22 <xTaskIncrementTick+0xc2>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004f18:	68bb      	ldr	r3, [r7, #8]
 8004f1a:	3318      	adds	r3, #24
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	f7fe ff89 	bl	8003e34 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8004f22:	68bb      	ldr	r3, [r7, #8]
 8004f24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f26:	2201      	movs	r2, #1
 8004f28:	409a      	lsls	r2, r3
 8004f2a:	4b24      	ldr	r3, [pc, #144]	; (8004fbc <xTaskIncrementTick+0x15c>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	4313      	orrs	r3, r2
 8004f30:	4a22      	ldr	r2, [pc, #136]	; (8004fbc <xTaskIncrementTick+0x15c>)
 8004f32:	6013      	str	r3, [r2, #0]
 8004f34:	68bb      	ldr	r3, [r7, #8]
 8004f36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f38:	4613      	mov	r3, r2
 8004f3a:	009b      	lsls	r3, r3, #2
 8004f3c:	4413      	add	r3, r2
 8004f3e:	009b      	lsls	r3, r3, #2
 8004f40:	4a1f      	ldr	r2, [pc, #124]	; (8004fc0 <xTaskIncrementTick+0x160>)
 8004f42:	441a      	add	r2, r3
 8004f44:	68bb      	ldr	r3, [r7, #8]
 8004f46:	3304      	adds	r3, #4
 8004f48:	4619      	mov	r1, r3
 8004f4a:	4610      	mov	r0, r2
 8004f4c:	f7fe ff15 	bl	8003d7a <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f54:	4b1b      	ldr	r3, [pc, #108]	; (8004fc4 <xTaskIncrementTick+0x164>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f5a:	429a      	cmp	r2, r3
 8004f5c:	d3b9      	bcc.n	8004ed2 <xTaskIncrementTick+0x72>
                            {
                                xSwitchRequired = pdTRUE;
 8004f5e:	2301      	movs	r3, #1
 8004f60:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004f62:	e7b6      	b.n	8004ed2 <xTaskIncrementTick+0x72>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004f64:	4b17      	ldr	r3, [pc, #92]	; (8004fc4 <xTaskIncrementTick+0x164>)
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f6a:	4915      	ldr	r1, [pc, #84]	; (8004fc0 <xTaskIncrementTick+0x160>)
 8004f6c:	4613      	mov	r3, r2
 8004f6e:	009b      	lsls	r3, r3, #2
 8004f70:	4413      	add	r3, r2
 8004f72:	009b      	lsls	r3, r3, #2
 8004f74:	440b      	add	r3, r1
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	2b01      	cmp	r3, #1
 8004f7a:	d901      	bls.n	8004f80 <xTaskIncrementTick+0x120>
                {
                    xSwitchRequired = pdTRUE;
 8004f7c:	2301      	movs	r3, #1
 8004f7e:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8004f80:	4b11      	ldr	r3, [pc, #68]	; (8004fc8 <xTaskIncrementTick+0x168>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d007      	beq.n	8004f98 <xTaskIncrementTick+0x138>
                {
                    xSwitchRequired = pdTRUE;
 8004f88:	2301      	movs	r3, #1
 8004f8a:	617b      	str	r3, [r7, #20]
 8004f8c:	e004      	b.n	8004f98 <xTaskIncrementTick+0x138>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8004f8e:	4b0f      	ldr	r3, [pc, #60]	; (8004fcc <xTaskIncrementTick+0x16c>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	3301      	adds	r3, #1
 8004f94:	4a0d      	ldr	r2, [pc, #52]	; (8004fcc <xTaskIncrementTick+0x16c>)
 8004f96:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8004f98:	697b      	ldr	r3, [r7, #20]
}
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	3718      	adds	r7, #24
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bd80      	pop	{r7, pc}
 8004fa2:	bf00      	nop
 8004fa4:	2000013c 	.word	0x2000013c
 8004fa8:	20000118 	.word	0x20000118
 8004fac:	200000cc 	.word	0x200000cc
 8004fb0:	200000d0 	.word	0x200000d0
 8004fb4:	2000012c 	.word	0x2000012c
 8004fb8:	20000134 	.word	0x20000134
 8004fbc:	2000011c 	.word	0x2000011c
 8004fc0:	20000040 	.word	0x20000040
 8004fc4:	2000003c 	.word	0x2000003c
 8004fc8:	20000128 	.word	0x20000128
 8004fcc:	20000124 	.word	0x20000124

08004fd0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	b087      	sub	sp, #28
 8004fd4:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004fd6:	4b26      	ldr	r3, [pc, #152]	; (8005070 <vTaskSwitchContext+0xa0>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d003      	beq.n	8004fe6 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8004fde:	4b25      	ldr	r3, [pc, #148]	; (8005074 <vTaskSwitchContext+0xa4>)
 8004fe0:	2201      	movs	r2, #1
 8004fe2:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8004fe4:	e03e      	b.n	8005064 <vTaskSwitchContext+0x94>
        xYieldPending = pdFALSE;
 8004fe6:	4b23      	ldr	r3, [pc, #140]	; (8005074 <vTaskSwitchContext+0xa4>)
 8004fe8:	2200      	movs	r2, #0
 8004fea:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004fec:	4b22      	ldr	r3, [pc, #136]	; (8005078 <vTaskSwitchContext+0xa8>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	fab3 f383 	clz	r3, r3
 8004ff8:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8004ffa:	7afb      	ldrb	r3, [r7, #11]
 8004ffc:	f1c3 031f 	rsb	r3, r3, #31
 8005000:	617b      	str	r3, [r7, #20]
 8005002:	491e      	ldr	r1, [pc, #120]	; (800507c <vTaskSwitchContext+0xac>)
 8005004:	697a      	ldr	r2, [r7, #20]
 8005006:	4613      	mov	r3, r2
 8005008:	009b      	lsls	r3, r3, #2
 800500a:	4413      	add	r3, r2
 800500c:	009b      	lsls	r3, r3, #2
 800500e:	440b      	add	r3, r1
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d109      	bne.n	800502a <vTaskSwitchContext+0x5a>
        __asm volatile
 8005016:	f04f 0350 	mov.w	r3, #80	; 0x50
 800501a:	f383 8811 	msr	BASEPRI, r3
 800501e:	f3bf 8f6f 	isb	sy
 8005022:	f3bf 8f4f 	dsb	sy
 8005026:	607b      	str	r3, [r7, #4]
 8005028:	e7fe      	b.n	8005028 <vTaskSwitchContext+0x58>
 800502a:	697a      	ldr	r2, [r7, #20]
 800502c:	4613      	mov	r3, r2
 800502e:	009b      	lsls	r3, r3, #2
 8005030:	4413      	add	r3, r2
 8005032:	009b      	lsls	r3, r3, #2
 8005034:	4a11      	ldr	r2, [pc, #68]	; (800507c <vTaskSwitchContext+0xac>)
 8005036:	4413      	add	r3, r2
 8005038:	613b      	str	r3, [r7, #16]
 800503a:	693b      	ldr	r3, [r7, #16]
 800503c:	685b      	ldr	r3, [r3, #4]
 800503e:	685a      	ldr	r2, [r3, #4]
 8005040:	693b      	ldr	r3, [r7, #16]
 8005042:	605a      	str	r2, [r3, #4]
 8005044:	693b      	ldr	r3, [r7, #16]
 8005046:	685a      	ldr	r2, [r3, #4]
 8005048:	693b      	ldr	r3, [r7, #16]
 800504a:	3308      	adds	r3, #8
 800504c:	429a      	cmp	r2, r3
 800504e:	d104      	bne.n	800505a <vTaskSwitchContext+0x8a>
 8005050:	693b      	ldr	r3, [r7, #16]
 8005052:	685b      	ldr	r3, [r3, #4]
 8005054:	685a      	ldr	r2, [r3, #4]
 8005056:	693b      	ldr	r3, [r7, #16]
 8005058:	605a      	str	r2, [r3, #4]
 800505a:	693b      	ldr	r3, [r7, #16]
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	68db      	ldr	r3, [r3, #12]
 8005060:	4a07      	ldr	r2, [pc, #28]	; (8005080 <vTaskSwitchContext+0xb0>)
 8005062:	6013      	str	r3, [r2, #0]
}
 8005064:	bf00      	nop
 8005066:	371c      	adds	r7, #28
 8005068:	46bd      	mov	sp, r7
 800506a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506e:	4770      	bx	lr
 8005070:	2000013c 	.word	0x2000013c
 8005074:	20000128 	.word	0x20000128
 8005078:	2000011c 	.word	0x2000011c
 800507c:	20000040 	.word	0x20000040
 8005080:	2000003c 	.word	0x2000003c

08005084 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b084      	sub	sp, #16
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
 800508c:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d109      	bne.n	80050a8 <vTaskPlaceOnEventList+0x24>
 8005094:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005098:	f383 8811 	msr	BASEPRI, r3
 800509c:	f3bf 8f6f 	isb	sy
 80050a0:	f3bf 8f4f 	dsb	sy
 80050a4:	60fb      	str	r3, [r7, #12]
 80050a6:	e7fe      	b.n	80050a6 <vTaskPlaceOnEventList+0x22>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80050a8:	4b07      	ldr	r3, [pc, #28]	; (80050c8 <vTaskPlaceOnEventList+0x44>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	3318      	adds	r3, #24
 80050ae:	4619      	mov	r1, r3
 80050b0:	6878      	ldr	r0, [r7, #4]
 80050b2:	f7fe fe86 	bl	8003dc2 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80050b6:	2101      	movs	r1, #1
 80050b8:	6838      	ldr	r0, [r7, #0]
 80050ba:	f000 fcb7 	bl	8005a2c <prvAddCurrentTaskToDelayedList>
}
 80050be:	bf00      	nop
 80050c0:	3710      	adds	r7, #16
 80050c2:	46bd      	mov	sp, r7
 80050c4:	bd80      	pop	{r7, pc}
 80050c6:	bf00      	nop
 80050c8:	2000003c 	.word	0x2000003c

080050cc <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b086      	sub	sp, #24
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	60f8      	str	r0, [r7, #12]
 80050d4:	60b9      	str	r1, [r7, #8]
 80050d6:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d109      	bne.n	80050f2 <vTaskPlaceOnEventListRestricted+0x26>
 80050de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050e2:	f383 8811 	msr	BASEPRI, r3
 80050e6:	f3bf 8f6f 	isb	sy
 80050ea:	f3bf 8f4f 	dsb	sy
 80050ee:	617b      	str	r3, [r7, #20]
 80050f0:	e7fe      	b.n	80050f0 <vTaskPlaceOnEventListRestricted+0x24>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80050f2:	4b0a      	ldr	r3, [pc, #40]	; (800511c <vTaskPlaceOnEventListRestricted+0x50>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	3318      	adds	r3, #24
 80050f8:	4619      	mov	r1, r3
 80050fa:	68f8      	ldr	r0, [r7, #12]
 80050fc:	f7fe fe3d 	bl	8003d7a <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d002      	beq.n	800510c <vTaskPlaceOnEventListRestricted+0x40>
        {
            xTicksToWait = portMAX_DELAY;
 8005106:	f04f 33ff 	mov.w	r3, #4294967295
 800510a:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800510c:	6879      	ldr	r1, [r7, #4]
 800510e:	68b8      	ldr	r0, [r7, #8]
 8005110:	f000 fc8c 	bl	8005a2c <prvAddCurrentTaskToDelayedList>
    }
 8005114:	bf00      	nop
 8005116:	3718      	adds	r7, #24
 8005118:	46bd      	mov	sp, r7
 800511a:	bd80      	pop	{r7, pc}
 800511c:	2000003c 	.word	0x2000003c

08005120 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b086      	sub	sp, #24
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	68db      	ldr	r3, [r3, #12]
 800512c:	68db      	ldr	r3, [r3, #12]
 800512e:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8005130:	693b      	ldr	r3, [r7, #16]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d109      	bne.n	800514a <xTaskRemoveFromEventList+0x2a>
 8005136:	f04f 0350 	mov.w	r3, #80	; 0x50
 800513a:	f383 8811 	msr	BASEPRI, r3
 800513e:	f3bf 8f6f 	isb	sy
 8005142:	f3bf 8f4f 	dsb	sy
 8005146:	60fb      	str	r3, [r7, #12]
 8005148:	e7fe      	b.n	8005148 <xTaskRemoveFromEventList+0x28>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800514a:	693b      	ldr	r3, [r7, #16]
 800514c:	3318      	adds	r3, #24
 800514e:	4618      	mov	r0, r3
 8005150:	f7fe fe70 	bl	8003e34 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005154:	4b1d      	ldr	r3, [pc, #116]	; (80051cc <xTaskRemoveFromEventList+0xac>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d11c      	bne.n	8005196 <xTaskRemoveFromEventList+0x76>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800515c:	693b      	ldr	r3, [r7, #16]
 800515e:	3304      	adds	r3, #4
 8005160:	4618      	mov	r0, r3
 8005162:	f7fe fe67 	bl	8003e34 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8005166:	693b      	ldr	r3, [r7, #16]
 8005168:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800516a:	2201      	movs	r2, #1
 800516c:	409a      	lsls	r2, r3
 800516e:	4b18      	ldr	r3, [pc, #96]	; (80051d0 <xTaskRemoveFromEventList+0xb0>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4313      	orrs	r3, r2
 8005174:	4a16      	ldr	r2, [pc, #88]	; (80051d0 <xTaskRemoveFromEventList+0xb0>)
 8005176:	6013      	str	r3, [r2, #0]
 8005178:	693b      	ldr	r3, [r7, #16]
 800517a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800517c:	4613      	mov	r3, r2
 800517e:	009b      	lsls	r3, r3, #2
 8005180:	4413      	add	r3, r2
 8005182:	009b      	lsls	r3, r3, #2
 8005184:	4a13      	ldr	r2, [pc, #76]	; (80051d4 <xTaskRemoveFromEventList+0xb4>)
 8005186:	441a      	add	r2, r3
 8005188:	693b      	ldr	r3, [r7, #16]
 800518a:	3304      	adds	r3, #4
 800518c:	4619      	mov	r1, r3
 800518e:	4610      	mov	r0, r2
 8005190:	f7fe fdf3 	bl	8003d7a <vListInsertEnd>
 8005194:	e005      	b.n	80051a2 <xTaskRemoveFromEventList+0x82>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005196:	693b      	ldr	r3, [r7, #16]
 8005198:	3318      	adds	r3, #24
 800519a:	4619      	mov	r1, r3
 800519c:	480e      	ldr	r0, [pc, #56]	; (80051d8 <xTaskRemoveFromEventList+0xb8>)
 800519e:	f7fe fdec 	bl	8003d7a <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80051a2:	693b      	ldr	r3, [r7, #16]
 80051a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051a6:	4b0d      	ldr	r3, [pc, #52]	; (80051dc <xTaskRemoveFromEventList+0xbc>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051ac:	429a      	cmp	r2, r3
 80051ae:	d905      	bls.n	80051bc <xTaskRemoveFromEventList+0x9c>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80051b0:	2301      	movs	r3, #1
 80051b2:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80051b4:	4b0a      	ldr	r3, [pc, #40]	; (80051e0 <xTaskRemoveFromEventList+0xc0>)
 80051b6:	2201      	movs	r2, #1
 80051b8:	601a      	str	r2, [r3, #0]
 80051ba:	e001      	b.n	80051c0 <xTaskRemoveFromEventList+0xa0>
    }
    else
    {
        xReturn = pdFALSE;
 80051bc:	2300      	movs	r3, #0
 80051be:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 80051c0:	697b      	ldr	r3, [r7, #20]
}
 80051c2:	4618      	mov	r0, r3
 80051c4:	3718      	adds	r7, #24
 80051c6:	46bd      	mov	sp, r7
 80051c8:	bd80      	pop	{r7, pc}
 80051ca:	bf00      	nop
 80051cc:	2000013c 	.word	0x2000013c
 80051d0:	2000011c 	.word	0x2000011c
 80051d4:	20000040 	.word	0x20000040
 80051d8:	200000d4 	.word	0x200000d4
 80051dc:	2000003c 	.word	0x2000003c
 80051e0:	20000128 	.word	0x20000128

080051e4 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80051e4:	b480      	push	{r7}
 80051e6:	b083      	sub	sp, #12
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80051ec:	4b06      	ldr	r3, [pc, #24]	; (8005208 <vTaskInternalSetTimeOutState+0x24>)
 80051ee:	681a      	ldr	r2, [r3, #0]
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80051f4:	4b05      	ldr	r3, [pc, #20]	; (800520c <vTaskInternalSetTimeOutState+0x28>)
 80051f6:	681a      	ldr	r2, [r3, #0]
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	605a      	str	r2, [r3, #4]
}
 80051fc:	bf00      	nop
 80051fe:	370c      	adds	r7, #12
 8005200:	46bd      	mov	sp, r7
 8005202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005206:	4770      	bx	lr
 8005208:	2000012c 	.word	0x2000012c
 800520c:	20000118 	.word	0x20000118

08005210 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b088      	sub	sp, #32
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
 8005218:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d109      	bne.n	8005234 <xTaskCheckForTimeOut+0x24>
 8005220:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005224:	f383 8811 	msr	BASEPRI, r3
 8005228:	f3bf 8f6f 	isb	sy
 800522c:	f3bf 8f4f 	dsb	sy
 8005230:	613b      	str	r3, [r7, #16]
 8005232:	e7fe      	b.n	8005232 <xTaskCheckForTimeOut+0x22>
    configASSERT( pxTicksToWait );
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d109      	bne.n	800524e <xTaskCheckForTimeOut+0x3e>
 800523a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800523e:	f383 8811 	msr	BASEPRI, r3
 8005242:	f3bf 8f6f 	isb	sy
 8005246:	f3bf 8f4f 	dsb	sy
 800524a:	60fb      	str	r3, [r7, #12]
 800524c:	e7fe      	b.n	800524c <xTaskCheckForTimeOut+0x3c>

    taskENTER_CRITICAL();
 800524e:	f001 f8e7 	bl	8006420 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8005252:	4b1f      	ldr	r3, [pc, #124]	; (80052d0 <xTaskCheckForTimeOut+0xc0>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	685b      	ldr	r3, [r3, #4]
 800525c:	69ba      	ldr	r2, [r7, #24]
 800525e:	1ad3      	subs	r3, r2, r3
 8005260:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f1b3 3fff 	cmp.w	r3, #4294967295
 800526a:	d102      	bne.n	8005272 <xTaskCheckForTimeOut+0x62>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 800526c:	2300      	movs	r3, #0
 800526e:	61fb      	str	r3, [r7, #28]
 8005270:	e026      	b.n	80052c0 <xTaskCheckForTimeOut+0xb0>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681a      	ldr	r2, [r3, #0]
 8005276:	4b17      	ldr	r3, [pc, #92]	; (80052d4 <xTaskCheckForTimeOut+0xc4>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	429a      	cmp	r2, r3
 800527c:	d00a      	beq.n	8005294 <xTaskCheckForTimeOut+0x84>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	685b      	ldr	r3, [r3, #4]
 8005282:	69ba      	ldr	r2, [r7, #24]
 8005284:	429a      	cmp	r2, r3
 8005286:	d305      	bcc.n	8005294 <xTaskCheckForTimeOut+0x84>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8005288:	2301      	movs	r3, #1
 800528a:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	2200      	movs	r2, #0
 8005290:	601a      	str	r2, [r3, #0]
 8005292:	e015      	b.n	80052c0 <xTaskCheckForTimeOut+0xb0>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	697a      	ldr	r2, [r7, #20]
 800529a:	429a      	cmp	r2, r3
 800529c:	d20b      	bcs.n	80052b6 <xTaskCheckForTimeOut+0xa6>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	681a      	ldr	r2, [r3, #0]
 80052a2:	697b      	ldr	r3, [r7, #20]
 80052a4:	1ad2      	subs	r2, r2, r3
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80052aa:	6878      	ldr	r0, [r7, #4]
 80052ac:	f7ff ff9a 	bl	80051e4 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80052b0:	2300      	movs	r3, #0
 80052b2:	61fb      	str	r3, [r7, #28]
 80052b4:	e004      	b.n	80052c0 <xTaskCheckForTimeOut+0xb0>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	2200      	movs	r2, #0
 80052ba:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80052bc:	2301      	movs	r3, #1
 80052be:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 80052c0:	f001 f8dc 	bl	800647c <vPortExitCritical>

    return xReturn;
 80052c4:	69fb      	ldr	r3, [r7, #28]
}
 80052c6:	4618      	mov	r0, r3
 80052c8:	3720      	adds	r7, #32
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bd80      	pop	{r7, pc}
 80052ce:	bf00      	nop
 80052d0:	20000118 	.word	0x20000118
 80052d4:	2000012c 	.word	0x2000012c

080052d8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80052d8:	b480      	push	{r7}
 80052da:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80052dc:	4b03      	ldr	r3, [pc, #12]	; (80052ec <vTaskMissedYield+0x14>)
 80052de:	2201      	movs	r2, #1
 80052e0:	601a      	str	r2, [r3, #0]
}
 80052e2:	bf00      	nop
 80052e4:	46bd      	mov	sp, r7
 80052e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ea:	4770      	bx	lr
 80052ec:	20000128 	.word	0x20000128

080052f0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b082      	sub	sp, #8
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80052f8:	f000 f852 	bl	80053a0 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80052fc:	4b06      	ldr	r3, [pc, #24]	; (8005318 <prvIdleTask+0x28>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	2b01      	cmp	r3, #1
 8005302:	d9f9      	bls.n	80052f8 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8005304:	4b05      	ldr	r3, [pc, #20]	; (800531c <prvIdleTask+0x2c>)
 8005306:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800530a:	601a      	str	r2, [r3, #0]
 800530c:	f3bf 8f4f 	dsb	sy
 8005310:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8005314:	e7f0      	b.n	80052f8 <prvIdleTask+0x8>
 8005316:	bf00      	nop
 8005318:	20000040 	.word	0x20000040
 800531c:	e000ed04 	.word	0xe000ed04

08005320 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b082      	sub	sp, #8
 8005324:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005326:	2300      	movs	r3, #0
 8005328:	607b      	str	r3, [r7, #4]
 800532a:	e00c      	b.n	8005346 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800532c:	687a      	ldr	r2, [r7, #4]
 800532e:	4613      	mov	r3, r2
 8005330:	009b      	lsls	r3, r3, #2
 8005332:	4413      	add	r3, r2
 8005334:	009b      	lsls	r3, r3, #2
 8005336:	4a12      	ldr	r2, [pc, #72]	; (8005380 <prvInitialiseTaskLists+0x60>)
 8005338:	4413      	add	r3, r2
 800533a:	4618      	mov	r0, r3
 800533c:	f7fe fcf0 	bl	8003d20 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	3301      	adds	r3, #1
 8005344:	607b      	str	r3, [r7, #4]
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2b04      	cmp	r3, #4
 800534a:	d9ef      	bls.n	800532c <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 800534c:	480d      	ldr	r0, [pc, #52]	; (8005384 <prvInitialiseTaskLists+0x64>)
 800534e:	f7fe fce7 	bl	8003d20 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8005352:	480d      	ldr	r0, [pc, #52]	; (8005388 <prvInitialiseTaskLists+0x68>)
 8005354:	f7fe fce4 	bl	8003d20 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8005358:	480c      	ldr	r0, [pc, #48]	; (800538c <prvInitialiseTaskLists+0x6c>)
 800535a:	f7fe fce1 	bl	8003d20 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 800535e:	480c      	ldr	r0, [pc, #48]	; (8005390 <prvInitialiseTaskLists+0x70>)
 8005360:	f7fe fcde 	bl	8003d20 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8005364:	480b      	ldr	r0, [pc, #44]	; (8005394 <prvInitialiseTaskLists+0x74>)
 8005366:	f7fe fcdb 	bl	8003d20 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800536a:	4b0b      	ldr	r3, [pc, #44]	; (8005398 <prvInitialiseTaskLists+0x78>)
 800536c:	4a05      	ldr	r2, [pc, #20]	; (8005384 <prvInitialiseTaskLists+0x64>)
 800536e:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005370:	4b0a      	ldr	r3, [pc, #40]	; (800539c <prvInitialiseTaskLists+0x7c>)
 8005372:	4a05      	ldr	r2, [pc, #20]	; (8005388 <prvInitialiseTaskLists+0x68>)
 8005374:	601a      	str	r2, [r3, #0]
}
 8005376:	bf00      	nop
 8005378:	3708      	adds	r7, #8
 800537a:	46bd      	mov	sp, r7
 800537c:	bd80      	pop	{r7, pc}
 800537e:	bf00      	nop
 8005380:	20000040 	.word	0x20000040
 8005384:	200000a4 	.word	0x200000a4
 8005388:	200000b8 	.word	0x200000b8
 800538c:	200000d4 	.word	0x200000d4
 8005390:	200000e8 	.word	0x200000e8
 8005394:	20000100 	.word	0x20000100
 8005398:	200000cc 	.word	0x200000cc
 800539c:	200000d0 	.word	0x200000d0

080053a0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b082      	sub	sp, #8
 80053a4:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80053a6:	e019      	b.n	80053dc <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 80053a8:	f001 f83a 	bl	8006420 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80053ac:	4b0f      	ldr	r3, [pc, #60]	; (80053ec <prvCheckTasksWaitingTermination+0x4c>)
 80053ae:	68db      	ldr	r3, [r3, #12]
 80053b0:	68db      	ldr	r3, [r3, #12]
 80053b2:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	3304      	adds	r3, #4
 80053b8:	4618      	mov	r0, r3
 80053ba:	f7fe fd3b 	bl	8003e34 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 80053be:	4b0c      	ldr	r3, [pc, #48]	; (80053f0 <prvCheckTasksWaitingTermination+0x50>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	3b01      	subs	r3, #1
 80053c4:	4a0a      	ldr	r2, [pc, #40]	; (80053f0 <prvCheckTasksWaitingTermination+0x50>)
 80053c6:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 80053c8:	4b0a      	ldr	r3, [pc, #40]	; (80053f4 <prvCheckTasksWaitingTermination+0x54>)
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	3b01      	subs	r3, #1
 80053ce:	4a09      	ldr	r2, [pc, #36]	; (80053f4 <prvCheckTasksWaitingTermination+0x54>)
 80053d0:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 80053d2:	f001 f853 	bl	800647c <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 80053d6:	6878      	ldr	r0, [r7, #4]
 80053d8:	f000 f80e 	bl	80053f8 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80053dc:	4b05      	ldr	r3, [pc, #20]	; (80053f4 <prvCheckTasksWaitingTermination+0x54>)
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d1e1      	bne.n	80053a8 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 80053e4:	bf00      	nop
 80053e6:	3708      	adds	r7, #8
 80053e8:	46bd      	mov	sp, r7
 80053ea:	bd80      	pop	{r7, pc}
 80053ec:	200000e8 	.word	0x200000e8
 80053f0:	20000114 	.word	0x20000114
 80053f4:	200000fc 	.word	0x200000fc

080053f8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b082      	sub	sp, #8
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005404:	4618      	mov	r0, r3
 8005406:	f001 fa01 	bl	800680c <vPortFree>
                vPortFree( pxTCB );
 800540a:	6878      	ldr	r0, [r7, #4]
 800540c:	f001 f9fe 	bl	800680c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8005410:	bf00      	nop
 8005412:	3708      	adds	r7, #8
 8005414:	46bd      	mov	sp, r7
 8005416:	bd80      	pop	{r7, pc}

08005418 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005418:	b480      	push	{r7}
 800541a:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800541c:	4b0a      	ldr	r3, [pc, #40]	; (8005448 <prvResetNextTaskUnblockTime+0x30>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d104      	bne.n	8005430 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8005426:	4b09      	ldr	r3, [pc, #36]	; (800544c <prvResetNextTaskUnblockTime+0x34>)
 8005428:	f04f 32ff 	mov.w	r2, #4294967295
 800542c:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800542e:	e005      	b.n	800543c <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005430:	4b05      	ldr	r3, [pc, #20]	; (8005448 <prvResetNextTaskUnblockTime+0x30>)
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	68db      	ldr	r3, [r3, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4a04      	ldr	r2, [pc, #16]	; (800544c <prvResetNextTaskUnblockTime+0x34>)
 800543a:	6013      	str	r3, [r2, #0]
}
 800543c:	bf00      	nop
 800543e:	46bd      	mov	sp, r7
 8005440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005444:	4770      	bx	lr
 8005446:	bf00      	nop
 8005448:	200000cc 	.word	0x200000cc
 800544c:	20000134 	.word	0x20000134

08005450 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8005450:	b480      	push	{r7}
 8005452:	b083      	sub	sp, #12
 8005454:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8005456:	4b0b      	ldr	r3, [pc, #44]	; (8005484 <xTaskGetSchedulerState+0x34>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d102      	bne.n	8005464 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800545e:	2301      	movs	r3, #1
 8005460:	607b      	str	r3, [r7, #4]
 8005462:	e008      	b.n	8005476 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005464:	4b08      	ldr	r3, [pc, #32]	; (8005488 <xTaskGetSchedulerState+0x38>)
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d102      	bne.n	8005472 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 800546c:	2302      	movs	r3, #2
 800546e:	607b      	str	r3, [r7, #4]
 8005470:	e001      	b.n	8005476 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8005472:	2300      	movs	r3, #0
 8005474:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8005476:	687b      	ldr	r3, [r7, #4]
    }
 8005478:	4618      	mov	r0, r3
 800547a:	370c      	adds	r7, #12
 800547c:	46bd      	mov	sp, r7
 800547e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005482:	4770      	bx	lr
 8005484:	20000120 	.word	0x20000120
 8005488:	2000013c 	.word	0x2000013c

0800548c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 800548c:	b580      	push	{r7, lr}
 800548e:	b086      	sub	sp, #24
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8005498:	2300      	movs	r3, #0
 800549a:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d061      	beq.n	8005566 <xTaskPriorityDisinherit+0xda>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 80054a2:	4b33      	ldr	r3, [pc, #204]	; (8005570 <xTaskPriorityDisinherit+0xe4>)
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	693a      	ldr	r2, [r7, #16]
 80054a8:	429a      	cmp	r2, r3
 80054aa:	d009      	beq.n	80054c0 <xTaskPriorityDisinherit+0x34>
 80054ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054b0:	f383 8811 	msr	BASEPRI, r3
 80054b4:	f3bf 8f6f 	isb	sy
 80054b8:	f3bf 8f4f 	dsb	sy
 80054bc:	60fb      	str	r3, [r7, #12]
 80054be:	e7fe      	b.n	80054be <xTaskPriorityDisinherit+0x32>
            configASSERT( pxTCB->uxMutexesHeld );
 80054c0:	693b      	ldr	r3, [r7, #16]
 80054c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d109      	bne.n	80054dc <xTaskPriorityDisinherit+0x50>
 80054c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054cc:	f383 8811 	msr	BASEPRI, r3
 80054d0:	f3bf 8f6f 	isb	sy
 80054d4:	f3bf 8f4f 	dsb	sy
 80054d8:	60bb      	str	r3, [r7, #8]
 80054da:	e7fe      	b.n	80054da <xTaskPriorityDisinherit+0x4e>
            ( pxTCB->uxMutexesHeld )--;
 80054dc:	693b      	ldr	r3, [r7, #16]
 80054de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054e0:	1e5a      	subs	r2, r3, #1
 80054e2:	693b      	ldr	r3, [r7, #16]
 80054e4:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80054e6:	693b      	ldr	r3, [r7, #16]
 80054e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054ea:	693b      	ldr	r3, [r7, #16]
 80054ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054ee:	429a      	cmp	r2, r3
 80054f0:	d039      	beq.n	8005566 <xTaskPriorityDisinherit+0xda>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80054f2:	693b      	ldr	r3, [r7, #16]
 80054f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d135      	bne.n	8005566 <xTaskPriorityDisinherit+0xda>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80054fa:	693b      	ldr	r3, [r7, #16]
 80054fc:	3304      	adds	r3, #4
 80054fe:	4618      	mov	r0, r3
 8005500:	f7fe fc98 	bl	8003e34 <uxListRemove>
 8005504:	4603      	mov	r3, r0
 8005506:	2b00      	cmp	r3, #0
 8005508:	d10a      	bne.n	8005520 <xTaskPriorityDisinherit+0x94>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800550a:	693b      	ldr	r3, [r7, #16]
 800550c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800550e:	2201      	movs	r2, #1
 8005510:	fa02 f303 	lsl.w	r3, r2, r3
 8005514:	43da      	mvns	r2, r3
 8005516:	4b17      	ldr	r3, [pc, #92]	; (8005574 <xTaskPriorityDisinherit+0xe8>)
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4013      	ands	r3, r2
 800551c:	4a15      	ldr	r2, [pc, #84]	; (8005574 <xTaskPriorityDisinherit+0xe8>)
 800551e:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005520:	693b      	ldr	r3, [r7, #16]
 8005522:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005524:	693b      	ldr	r3, [r7, #16]
 8005526:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005528:	693b      	ldr	r3, [r7, #16]
 800552a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800552c:	f1c3 0205 	rsb	r2, r3, #5
 8005530:	693b      	ldr	r3, [r7, #16]
 8005532:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 8005534:	693b      	ldr	r3, [r7, #16]
 8005536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005538:	2201      	movs	r2, #1
 800553a:	409a      	lsls	r2, r3
 800553c:	4b0d      	ldr	r3, [pc, #52]	; (8005574 <xTaskPriorityDisinherit+0xe8>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	4313      	orrs	r3, r2
 8005542:	4a0c      	ldr	r2, [pc, #48]	; (8005574 <xTaskPriorityDisinherit+0xe8>)
 8005544:	6013      	str	r3, [r2, #0]
 8005546:	693b      	ldr	r3, [r7, #16]
 8005548:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800554a:	4613      	mov	r3, r2
 800554c:	009b      	lsls	r3, r3, #2
 800554e:	4413      	add	r3, r2
 8005550:	009b      	lsls	r3, r3, #2
 8005552:	4a09      	ldr	r2, [pc, #36]	; (8005578 <xTaskPriorityDisinherit+0xec>)
 8005554:	441a      	add	r2, r3
 8005556:	693b      	ldr	r3, [r7, #16]
 8005558:	3304      	adds	r3, #4
 800555a:	4619      	mov	r1, r3
 800555c:	4610      	mov	r0, r2
 800555e:	f7fe fc0c 	bl	8003d7a <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8005562:	2301      	movs	r3, #1
 8005564:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8005566:	697b      	ldr	r3, [r7, #20]
    }
 8005568:	4618      	mov	r0, r3
 800556a:	3718      	adds	r7, #24
 800556c:	46bd      	mov	sp, r7
 800556e:	bd80      	pop	{r7, pc}
 8005570:	2000003c 	.word	0x2000003c
 8005574:	2000011c 	.word	0x2000011c
 8005578:	20000040 	.word	0x20000040

0800557c <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 800557c:	b580      	push	{r7, lr}
 800557e:	b086      	sub	sp, #24
 8005580:	af00      	add	r7, sp, #0
 8005582:	60f8      	str	r0, [r7, #12]
 8005584:	60b9      	str	r1, [r7, #8]
 8005586:	607a      	str	r2, [r7, #4]
 8005588:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d009      	beq.n	80055a4 <xTaskGenericNotifyWait+0x28>
 8005590:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005594:	f383 8811 	msr	BASEPRI, r3
 8005598:	f3bf 8f6f 	isb	sy
 800559c:	f3bf 8f4f 	dsb	sy
 80055a0:	613b      	str	r3, [r7, #16]
 80055a2:	e7fe      	b.n	80055a2 <xTaskGenericNotifyWait+0x26>

        taskENTER_CRITICAL();
 80055a4:	f000 ff3c 	bl	8006420 <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 80055a8:	4b31      	ldr	r3, [pc, #196]	; (8005670 <xTaskGenericNotifyWait+0xf4>)
 80055aa:	681a      	ldr	r2, [r3, #0]
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	4413      	add	r3, r2
 80055b0:	3354      	adds	r3, #84	; 0x54
 80055b2:	781b      	ldrb	r3, [r3, #0]
 80055b4:	b2db      	uxtb	r3, r3
 80055b6:	2b02      	cmp	r3, #2
 80055b8:	d022      	beq.n	8005600 <xTaskGenericNotifyWait+0x84>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 80055ba:	4b2d      	ldr	r3, [pc, #180]	; (8005670 <xTaskGenericNotifyWait+0xf4>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	68fa      	ldr	r2, [r7, #12]
 80055c0:	3214      	adds	r2, #20
 80055c2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80055c6:	68ba      	ldr	r2, [r7, #8]
 80055c8:	43d2      	mvns	r2, r2
 80055ca:	4011      	ands	r1, r2
 80055cc:	68fa      	ldr	r2, [r7, #12]
 80055ce:	3214      	adds	r2, #20
 80055d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 80055d4:	4b26      	ldr	r3, [pc, #152]	; (8005670 <xTaskGenericNotifyWait+0xf4>)
 80055d6:	681a      	ldr	r2, [r3, #0]
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	4413      	add	r3, r2
 80055dc:	3354      	adds	r3, #84	; 0x54
 80055de:	2201      	movs	r2, #1
 80055e0:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 80055e2:	6a3b      	ldr	r3, [r7, #32]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d00b      	beq.n	8005600 <xTaskGenericNotifyWait+0x84>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80055e8:	2101      	movs	r1, #1
 80055ea:	6a38      	ldr	r0, [r7, #32]
 80055ec:	f000 fa1e 	bl	8005a2c <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 80055f0:	4b20      	ldr	r3, [pc, #128]	; (8005674 <xTaskGenericNotifyWait+0xf8>)
 80055f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055f6:	601a      	str	r2, [r3, #0]
 80055f8:	f3bf 8f4f 	dsb	sy
 80055fc:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8005600:	f000 ff3c 	bl	800647c <vPortExitCritical>

        taskENTER_CRITICAL();
 8005604:	f000 ff0c 	bl	8006420 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );

            if( pulNotificationValue != NULL )
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d007      	beq.n	800561e <xTaskGenericNotifyWait+0xa2>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 800560e:	4b18      	ldr	r3, [pc, #96]	; (8005670 <xTaskGenericNotifyWait+0xf4>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	68fa      	ldr	r2, [r7, #12]
 8005614:	3214      	adds	r2, #20
 8005616:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 800561e:	4b14      	ldr	r3, [pc, #80]	; (8005670 <xTaskGenericNotifyWait+0xf4>)
 8005620:	681a      	ldr	r2, [r3, #0]
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	4413      	add	r3, r2
 8005626:	3354      	adds	r3, #84	; 0x54
 8005628:	781b      	ldrb	r3, [r3, #0]
 800562a:	b2db      	uxtb	r3, r3
 800562c:	2b02      	cmp	r3, #2
 800562e:	d002      	beq.n	8005636 <xTaskGenericNotifyWait+0xba>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 8005630:	2300      	movs	r3, #0
 8005632:	617b      	str	r3, [r7, #20]
 8005634:	e00e      	b.n	8005654 <xTaskGenericNotifyWait+0xd8>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 8005636:	4b0e      	ldr	r3, [pc, #56]	; (8005670 <xTaskGenericNotifyWait+0xf4>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	68fa      	ldr	r2, [r7, #12]
 800563c:	3214      	adds	r2, #20
 800563e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005642:	687a      	ldr	r2, [r7, #4]
 8005644:	43d2      	mvns	r2, r2
 8005646:	4011      	ands	r1, r2
 8005648:	68fa      	ldr	r2, [r7, #12]
 800564a:	3214      	adds	r2, #20
 800564c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 8005650:	2301      	movs	r3, #1
 8005652:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 8005654:	4b06      	ldr	r3, [pc, #24]	; (8005670 <xTaskGenericNotifyWait+0xf4>)
 8005656:	681a      	ldr	r2, [r3, #0]
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	4413      	add	r3, r2
 800565c:	3354      	adds	r3, #84	; 0x54
 800565e:	2200      	movs	r2, #0
 8005660:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8005662:	f000 ff0b 	bl	800647c <vPortExitCritical>

        return xReturn;
 8005666:	697b      	ldr	r3, [r7, #20]
    }
 8005668:	4618      	mov	r0, r3
 800566a:	3718      	adds	r7, #24
 800566c:	46bd      	mov	sp, r7
 800566e:	bd80      	pop	{r7, pc}
 8005670:	2000003c 	.word	0x2000003c
 8005674:	e000ed04 	.word	0xe000ed04

08005678 <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 8005678:	b580      	push	{r7, lr}
 800567a:	b08c      	sub	sp, #48	; 0x30
 800567c:	af00      	add	r7, sp, #0
 800567e:	60f8      	str	r0, [r7, #12]
 8005680:	60b9      	str	r1, [r7, #8]
 8005682:	607a      	str	r2, [r7, #4]
 8005684:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 8005686:	2301      	movs	r3, #1
 8005688:	62fb      	str	r3, [r7, #44]	; 0x2c
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 800568a:	68bb      	ldr	r3, [r7, #8]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d009      	beq.n	80056a4 <xTaskGenericNotify+0x2c>
 8005690:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005694:	f383 8811 	msr	BASEPRI, r3
 8005698:	f3bf 8f6f 	isb	sy
 800569c:	f3bf 8f4f 	dsb	sy
 80056a0:	623b      	str	r3, [r7, #32]
 80056a2:	e7fe      	b.n	80056a2 <xTaskGenericNotify+0x2a>
        configASSERT( xTaskToNotify );
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d109      	bne.n	80056be <xTaskGenericNotify+0x46>
 80056aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056ae:	f383 8811 	msr	BASEPRI, r3
 80056b2:	f3bf 8f6f 	isb	sy
 80056b6:	f3bf 8f4f 	dsb	sy
 80056ba:	61fb      	str	r3, [r7, #28]
 80056bc:	e7fe      	b.n	80056bc <xTaskGenericNotify+0x44>
        pxTCB = xTaskToNotify;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	62bb      	str	r3, [r7, #40]	; 0x28

        taskENTER_CRITICAL();
 80056c2:	f000 fead 	bl	8006420 <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 80056c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d006      	beq.n	80056da <xTaskGenericNotify+0x62>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 80056cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056ce:	68ba      	ldr	r2, [r7, #8]
 80056d0:	3214      	adds	r2, #20
 80056d2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80056d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056d8:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 80056da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	4413      	add	r3, r2
 80056e0:	3354      	adds	r3, #84	; 0x54
 80056e2:	781b      	ldrb	r3, [r3, #0]
 80056e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 80056e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80056ea:	68bb      	ldr	r3, [r7, #8]
 80056ec:	4413      	add	r3, r2
 80056ee:	3354      	adds	r3, #84	; 0x54
 80056f0:	2202      	movs	r2, #2
 80056f2:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 80056f4:	78fb      	ldrb	r3, [r7, #3]
 80056f6:	2b04      	cmp	r3, #4
 80056f8:	d83b      	bhi.n	8005772 <xTaskGenericNotify+0xfa>
 80056fa:	a201      	add	r2, pc, #4	; (adr r2, 8005700 <xTaskGenericNotify+0x88>)
 80056fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005700:	0800578f 	.word	0x0800578f
 8005704:	08005715 	.word	0x08005715
 8005708:	08005731 	.word	0x08005731
 800570c:	08005749 	.word	0x08005749
 8005710:	08005757 	.word	0x08005757
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8005714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005716:	68ba      	ldr	r2, [r7, #8]
 8005718:	3214      	adds	r2, #20
 800571a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	ea42 0103 	orr.w	r1, r2, r3
 8005724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005726:	68ba      	ldr	r2, [r7, #8]
 8005728:	3214      	adds	r2, #20
 800572a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800572e:	e031      	b.n	8005794 <xTaskGenericNotify+0x11c>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8005730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005732:	68ba      	ldr	r2, [r7, #8]
 8005734:	3214      	adds	r2, #20
 8005736:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800573a:	1c59      	adds	r1, r3, #1
 800573c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800573e:	68ba      	ldr	r2, [r7, #8]
 8005740:	3214      	adds	r2, #20
 8005742:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8005746:	e025      	b.n	8005794 <xTaskGenericNotify+0x11c>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8005748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800574a:	68ba      	ldr	r2, [r7, #8]
 800574c:	3214      	adds	r2, #20
 800574e:	6879      	ldr	r1, [r7, #4]
 8005750:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8005754:	e01e      	b.n	8005794 <xTaskGenericNotify+0x11c>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8005756:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800575a:	2b02      	cmp	r3, #2
 800575c:	d006      	beq.n	800576c <xTaskGenericNotify+0xf4>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 800575e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005760:	68ba      	ldr	r2, [r7, #8]
 8005762:	3214      	adds	r2, #20
 8005764:	6879      	ldr	r1, [r7, #4]
 8005766:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 800576a:	e013      	b.n	8005794 <xTaskGenericNotify+0x11c>
                        xReturn = pdFAIL;
 800576c:	2300      	movs	r3, #0
 800576e:	62fb      	str	r3, [r7, #44]	; 0x2c
                    break;
 8005770:	e010      	b.n	8005794 <xTaskGenericNotify+0x11c>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8005772:	4b2a      	ldr	r3, [pc, #168]	; (800581c <xTaskGenericNotify+0x1a4>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d00b      	beq.n	8005792 <xTaskGenericNotify+0x11a>
 800577a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800577e:	f383 8811 	msr	BASEPRI, r3
 8005782:	f3bf 8f6f 	isb	sy
 8005786:	f3bf 8f4f 	dsb	sy
 800578a:	61bb      	str	r3, [r7, #24]
 800578c:	e7fe      	b.n	800578c <xTaskGenericNotify+0x114>
                    break;
 800578e:	bf00      	nop
 8005790:	e000      	b.n	8005794 <xTaskGenericNotify+0x11c>

                    break;
 8005792:	bf00      	nop

            traceTASK_NOTIFY(  );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8005794:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005798:	2b01      	cmp	r3, #1
 800579a:	d138      	bne.n	800580e <xTaskGenericNotify+0x196>
            {
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800579c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800579e:	3304      	adds	r3, #4
 80057a0:	4618      	mov	r0, r3
 80057a2:	f7fe fb47 	bl	8003e34 <uxListRemove>
                prvAddTaskToReadyList( pxTCB );
 80057a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057aa:	2201      	movs	r2, #1
 80057ac:	409a      	lsls	r2, r3
 80057ae:	4b1c      	ldr	r3, [pc, #112]	; (8005820 <xTaskGenericNotify+0x1a8>)
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	4313      	orrs	r3, r2
 80057b4:	4a1a      	ldr	r2, [pc, #104]	; (8005820 <xTaskGenericNotify+0x1a8>)
 80057b6:	6013      	str	r3, [r2, #0]
 80057b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057bc:	4613      	mov	r3, r2
 80057be:	009b      	lsls	r3, r3, #2
 80057c0:	4413      	add	r3, r2
 80057c2:	009b      	lsls	r3, r3, #2
 80057c4:	4a17      	ldr	r2, [pc, #92]	; (8005824 <xTaskGenericNotify+0x1ac>)
 80057c6:	441a      	add	r2, r3
 80057c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057ca:	3304      	adds	r3, #4
 80057cc:	4619      	mov	r1, r3
 80057ce:	4610      	mov	r0, r2
 80057d0:	f7fe fad3 	bl	8003d7a <vListInsertEnd>

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80057d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d009      	beq.n	80057f0 <xTaskGenericNotify+0x178>
 80057dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057e0:	f383 8811 	msr	BASEPRI, r3
 80057e4:	f3bf 8f6f 	isb	sy
 80057e8:	f3bf 8f4f 	dsb	sy
 80057ec:	617b      	str	r3, [r7, #20]
 80057ee:	e7fe      	b.n	80057ee <xTaskGenericNotify+0x176>
                         * earliest possible time. */
                        prvResetNextTaskUnblockTime();
                    }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80057f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057f4:	4b0c      	ldr	r3, [pc, #48]	; (8005828 <xTaskGenericNotify+0x1b0>)
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057fa:	429a      	cmp	r2, r3
 80057fc:	d907      	bls.n	800580e <xTaskGenericNotify+0x196>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    taskYIELD_IF_USING_PREEMPTION();
 80057fe:	4b0b      	ldr	r3, [pc, #44]	; (800582c <xTaskGenericNotify+0x1b4>)
 8005800:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005804:	601a      	str	r2, [r3, #0]
 8005806:	f3bf 8f4f 	dsb	sy
 800580a:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800580e:	f000 fe35 	bl	800647c <vPortExitCritical>

        return xReturn;
 8005812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 8005814:	4618      	mov	r0, r3
 8005816:	3730      	adds	r7, #48	; 0x30
 8005818:	46bd      	mov	sp, r7
 800581a:	bd80      	pop	{r7, pc}
 800581c:	20000118 	.word	0x20000118
 8005820:	2000011c 	.word	0x2000011c
 8005824:	20000040 	.word	0x20000040
 8005828:	2000003c 	.word	0x2000003c
 800582c:	e000ed04 	.word	0xe000ed04

08005830 <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 8005830:	b580      	push	{r7, lr}
 8005832:	b090      	sub	sp, #64	; 0x40
 8005834:	af00      	add	r7, sp, #0
 8005836:	60f8      	str	r0, [r7, #12]
 8005838:	60b9      	str	r1, [r7, #8]
 800583a:	607a      	str	r2, [r7, #4]
 800583c:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 800583e:	2301      	movs	r3, #1
 8005840:	63fb      	str	r3, [r7, #60]	; 0x3c
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToNotify );
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d109      	bne.n	800585c <xTaskGenericNotifyFromISR+0x2c>
 8005848:	f04f 0350 	mov.w	r3, #80	; 0x50
 800584c:	f383 8811 	msr	BASEPRI, r3
 8005850:	f3bf 8f6f 	isb	sy
 8005854:	f3bf 8f4f 	dsb	sy
 8005858:	62fb      	str	r3, [r7, #44]	; 0x2c
 800585a:	e7fe      	b.n	800585a <xTaskGenericNotifyFromISR+0x2a>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d009      	beq.n	8005876 <xTaskGenericNotifyFromISR+0x46>
 8005862:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005866:	f383 8811 	msr	BASEPRI, r3
 800586a:	f3bf 8f6f 	isb	sy
 800586e:	f3bf 8f4f 	dsb	sy
 8005872:	62bb      	str	r3, [r7, #40]	; 0x28
 8005874:	e7fe      	b.n	8005874 <xTaskGenericNotifyFromISR+0x44>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005876:	f000 feaf 	bl	80065d8 <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	63bb      	str	r3, [r7, #56]	; 0x38
        __asm volatile
 800587e:	f3ef 8211 	mrs	r2, BASEPRI
 8005882:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005886:	f383 8811 	msr	BASEPRI, r3
 800588a:	f3bf 8f6f 	isb	sy
 800588e:	f3bf 8f4f 	dsb	sy
 8005892:	627a      	str	r2, [r7, #36]	; 0x24
 8005894:	623b      	str	r3, [r7, #32]
        return ulOriginalBASEPRI;
 8005896:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005898:	637b      	str	r3, [r7, #52]	; 0x34
        {
            if( pulPreviousNotificationValue != NULL )
 800589a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800589c:	2b00      	cmp	r3, #0
 800589e:	d006      	beq.n	80058ae <xTaskGenericNotifyFromISR+0x7e>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 80058a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058a2:	68ba      	ldr	r2, [r7, #8]
 80058a4:	3214      	adds	r2, #20
 80058a6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80058aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80058ac:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 80058ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	4413      	add	r3, r2
 80058b4:	3354      	adds	r3, #84	; 0x54
 80058b6:	781b      	ldrb	r3, [r3, #0]
 80058b8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 80058bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80058be:	68bb      	ldr	r3, [r7, #8]
 80058c0:	4413      	add	r3, r2
 80058c2:	3354      	adds	r3, #84	; 0x54
 80058c4:	2202      	movs	r2, #2
 80058c6:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 80058c8:	78fb      	ldrb	r3, [r7, #3]
 80058ca:	2b04      	cmp	r3, #4
 80058cc:	d83b      	bhi.n	8005946 <xTaskGenericNotifyFromISR+0x116>
 80058ce:	a201      	add	r2, pc, #4	; (adr r2, 80058d4 <xTaskGenericNotifyFromISR+0xa4>)
 80058d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058d4:	08005963 	.word	0x08005963
 80058d8:	080058e9 	.word	0x080058e9
 80058dc:	08005905 	.word	0x08005905
 80058e0:	0800591d 	.word	0x0800591d
 80058e4:	0800592b 	.word	0x0800592b
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 80058e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058ea:	68ba      	ldr	r2, [r7, #8]
 80058ec:	3214      	adds	r2, #20
 80058ee:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	ea42 0103 	orr.w	r1, r2, r3
 80058f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058fa:	68ba      	ldr	r2, [r7, #8]
 80058fc:	3214      	adds	r2, #20
 80058fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8005902:	e031      	b.n	8005968 <xTaskGenericNotifyFromISR+0x138>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8005904:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005906:	68ba      	ldr	r2, [r7, #8]
 8005908:	3214      	adds	r2, #20
 800590a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800590e:	1c59      	adds	r1, r3, #1
 8005910:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005912:	68ba      	ldr	r2, [r7, #8]
 8005914:	3214      	adds	r2, #20
 8005916:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800591a:	e025      	b.n	8005968 <xTaskGenericNotifyFromISR+0x138>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 800591c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800591e:	68ba      	ldr	r2, [r7, #8]
 8005920:	3214      	adds	r2, #20
 8005922:	6879      	ldr	r1, [r7, #4]
 8005924:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8005928:	e01e      	b.n	8005968 <xTaskGenericNotifyFromISR+0x138>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800592a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800592e:	2b02      	cmp	r3, #2
 8005930:	d006      	beq.n	8005940 <xTaskGenericNotifyFromISR+0x110>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8005932:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005934:	68ba      	ldr	r2, [r7, #8]
 8005936:	3214      	adds	r2, #20
 8005938:	6879      	ldr	r1, [r7, #4]
 800593a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 800593e:	e013      	b.n	8005968 <xTaskGenericNotifyFromISR+0x138>
                        xReturn = pdFAIL;
 8005940:	2300      	movs	r3, #0
 8005942:	63fb      	str	r3, [r7, #60]	; 0x3c
                    break;
 8005944:	e010      	b.n	8005968 <xTaskGenericNotifyFromISR+0x138>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8005946:	4b32      	ldr	r3, [pc, #200]	; (8005a10 <xTaskGenericNotifyFromISR+0x1e0>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d00b      	beq.n	8005966 <xTaskGenericNotifyFromISR+0x136>
        __asm volatile
 800594e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005952:	f383 8811 	msr	BASEPRI, r3
 8005956:	f3bf 8f6f 	isb	sy
 800595a:	f3bf 8f4f 	dsb	sy
 800595e:	61fb      	str	r3, [r7, #28]
 8005960:	e7fe      	b.n	8005960 <xTaskGenericNotifyFromISR+0x130>
                    break;
 8005962:	bf00      	nop
 8005964:	e000      	b.n	8005968 <xTaskGenericNotifyFromISR+0x138>
                    break;
 8005966:	bf00      	nop

            traceTASK_NOTIFY_FROM_ISR(  );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8005968:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800596c:	2b01      	cmp	r3, #1
 800596e:	d144      	bne.n	80059fa <xTaskGenericNotifyFromISR+0x1ca>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8005970:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005974:	2b00      	cmp	r3, #0
 8005976:	d009      	beq.n	800598c <xTaskGenericNotifyFromISR+0x15c>
 8005978:	f04f 0350 	mov.w	r3, #80	; 0x50
 800597c:	f383 8811 	msr	BASEPRI, r3
 8005980:	f3bf 8f6f 	isb	sy
 8005984:	f3bf 8f4f 	dsb	sy
 8005988:	61bb      	str	r3, [r7, #24]
 800598a:	e7fe      	b.n	800598a <xTaskGenericNotifyFromISR+0x15a>

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800598c:	4b21      	ldr	r3, [pc, #132]	; (8005a14 <xTaskGenericNotifyFromISR+0x1e4>)
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d11c      	bne.n	80059ce <xTaskGenericNotifyFromISR+0x19e>
                {
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005994:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005996:	3304      	adds	r3, #4
 8005998:	4618      	mov	r0, r3
 800599a:	f7fe fa4b 	bl	8003e34 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 800599e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059a2:	2201      	movs	r2, #1
 80059a4:	409a      	lsls	r2, r3
 80059a6:	4b1c      	ldr	r3, [pc, #112]	; (8005a18 <xTaskGenericNotifyFromISR+0x1e8>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	4313      	orrs	r3, r2
 80059ac:	4a1a      	ldr	r2, [pc, #104]	; (8005a18 <xTaskGenericNotifyFromISR+0x1e8>)
 80059ae:	6013      	str	r3, [r2, #0]
 80059b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059b4:	4613      	mov	r3, r2
 80059b6:	009b      	lsls	r3, r3, #2
 80059b8:	4413      	add	r3, r2
 80059ba:	009b      	lsls	r3, r3, #2
 80059bc:	4a17      	ldr	r2, [pc, #92]	; (8005a1c <xTaskGenericNotifyFromISR+0x1ec>)
 80059be:	441a      	add	r2, r3
 80059c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059c2:	3304      	adds	r3, #4
 80059c4:	4619      	mov	r1, r3
 80059c6:	4610      	mov	r0, r2
 80059c8:	f7fe f9d7 	bl	8003d7a <vListInsertEnd>
 80059cc:	e005      	b.n	80059da <xTaskGenericNotifyFromISR+0x1aa>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80059ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059d0:	3318      	adds	r3, #24
 80059d2:	4619      	mov	r1, r3
 80059d4:	4812      	ldr	r0, [pc, #72]	; (8005a20 <xTaskGenericNotifyFromISR+0x1f0>)
 80059d6:	f7fe f9d0 	bl	8003d7a <vListInsertEnd>
                }

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80059da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059de:	4b11      	ldr	r3, [pc, #68]	; (8005a24 <xTaskGenericNotifyFromISR+0x1f4>)
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059e4:	429a      	cmp	r2, r3
 80059e6:	d908      	bls.n	80059fa <xTaskGenericNotifyFromISR+0x1ca>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    if( pxHigherPriorityTaskWoken != NULL )
 80059e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d002      	beq.n	80059f4 <xTaskGenericNotifyFromISR+0x1c4>
                    {
                        *pxHigherPriorityTaskWoken = pdTRUE;
 80059ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059f0:	2201      	movs	r2, #1
 80059f2:	601a      	str	r2, [r3, #0]
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter to an ISR
                     * safe FreeRTOS function. */
                    xYieldPending = pdTRUE;
 80059f4:	4b0c      	ldr	r3, [pc, #48]	; (8005a28 <xTaskGenericNotifyFromISR+0x1f8>)
 80059f6:	2201      	movs	r2, #1
 80059f8:	601a      	str	r2, [r3, #0]
 80059fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059fc:	617b      	str	r3, [r7, #20]
        __asm volatile
 80059fe:	697b      	ldr	r3, [r7, #20]
 8005a00:	f383 8811 	msr	BASEPRI, r3
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

        return xReturn;
 8005a04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    }
 8005a06:	4618      	mov	r0, r3
 8005a08:	3740      	adds	r7, #64	; 0x40
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	bd80      	pop	{r7, pc}
 8005a0e:	bf00      	nop
 8005a10:	20000118 	.word	0x20000118
 8005a14:	2000013c 	.word	0x2000013c
 8005a18:	2000011c 	.word	0x2000011c
 8005a1c:	20000040 	.word	0x20000040
 8005a20:	200000d4 	.word	0x200000d4
 8005a24:	2000003c 	.word	0x2000003c
 8005a28:	20000128 	.word	0x20000128

08005a2c <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b084      	sub	sp, #16
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
 8005a34:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8005a36:	4b29      	ldr	r3, [pc, #164]	; (8005adc <prvAddCurrentTaskToDelayedList+0xb0>)
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005a3c:	4b28      	ldr	r3, [pc, #160]	; (8005ae0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	3304      	adds	r3, #4
 8005a42:	4618      	mov	r0, r3
 8005a44:	f7fe f9f6 	bl	8003e34 <uxListRemove>
 8005a48:	4603      	mov	r3, r0
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d10b      	bne.n	8005a66 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005a4e:	4b24      	ldr	r3, [pc, #144]	; (8005ae0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a54:	2201      	movs	r2, #1
 8005a56:	fa02 f303 	lsl.w	r3, r2, r3
 8005a5a:	43da      	mvns	r2, r3
 8005a5c:	4b21      	ldr	r3, [pc, #132]	; (8005ae4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	4013      	ands	r3, r2
 8005a62:	4a20      	ldr	r2, [pc, #128]	; (8005ae4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005a64:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a6c:	d10a      	bne.n	8005a84 <prvAddCurrentTaskToDelayedList+0x58>
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d007      	beq.n	8005a84 <prvAddCurrentTaskToDelayedList+0x58>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005a74:	4b1a      	ldr	r3, [pc, #104]	; (8005ae0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	3304      	adds	r3, #4
 8005a7a:	4619      	mov	r1, r3
 8005a7c:	481a      	ldr	r0, [pc, #104]	; (8005ae8 <prvAddCurrentTaskToDelayedList+0xbc>)
 8005a7e:	f7fe f97c 	bl	8003d7a <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8005a82:	e026      	b.n	8005ad2 <prvAddCurrentTaskToDelayedList+0xa6>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8005a84:	68fa      	ldr	r2, [r7, #12]
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	4413      	add	r3, r2
 8005a8a:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005a8c:	4b14      	ldr	r3, [pc, #80]	; (8005ae0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	68ba      	ldr	r2, [r7, #8]
 8005a92:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8005a94:	68ba      	ldr	r2, [r7, #8]
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	429a      	cmp	r2, r3
 8005a9a:	d209      	bcs.n	8005ab0 <prvAddCurrentTaskToDelayedList+0x84>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005a9c:	4b13      	ldr	r3, [pc, #76]	; (8005aec <prvAddCurrentTaskToDelayedList+0xc0>)
 8005a9e:	681a      	ldr	r2, [r3, #0]
 8005aa0:	4b0f      	ldr	r3, [pc, #60]	; (8005ae0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	3304      	adds	r3, #4
 8005aa6:	4619      	mov	r1, r3
 8005aa8:	4610      	mov	r0, r2
 8005aaa:	f7fe f98a 	bl	8003dc2 <vListInsert>
}
 8005aae:	e010      	b.n	8005ad2 <prvAddCurrentTaskToDelayedList+0xa6>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005ab0:	4b0f      	ldr	r3, [pc, #60]	; (8005af0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005ab2:	681a      	ldr	r2, [r3, #0]
 8005ab4:	4b0a      	ldr	r3, [pc, #40]	; (8005ae0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	3304      	adds	r3, #4
 8005aba:	4619      	mov	r1, r3
 8005abc:	4610      	mov	r0, r2
 8005abe:	f7fe f980 	bl	8003dc2 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8005ac2:	4b0c      	ldr	r3, [pc, #48]	; (8005af4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	68ba      	ldr	r2, [r7, #8]
 8005ac8:	429a      	cmp	r2, r3
 8005aca:	d202      	bcs.n	8005ad2 <prvAddCurrentTaskToDelayedList+0xa6>
                        xNextTaskUnblockTime = xTimeToWake;
 8005acc:	4a09      	ldr	r2, [pc, #36]	; (8005af4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005ace:	68bb      	ldr	r3, [r7, #8]
 8005ad0:	6013      	str	r3, [r2, #0]
}
 8005ad2:	bf00      	nop
 8005ad4:	3710      	adds	r7, #16
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	bd80      	pop	{r7, pc}
 8005ada:	bf00      	nop
 8005adc:	20000118 	.word	0x20000118
 8005ae0:	2000003c 	.word	0x2000003c
 8005ae4:	2000011c 	.word	0x2000011c
 8005ae8:	20000100 	.word	0x20000100
 8005aec:	200000d0 	.word	0x200000d0
 8005af0:	200000cc 	.word	0x200000cc
 8005af4:	20000134 	.word	0x20000134

08005af8 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b084      	sub	sp, #16
 8005afc:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8005afe:	2300      	movs	r3, #0
 8005b00:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8005b02:	f000 fb2d 	bl	8006160 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8005b06:	4b11      	ldr	r3, [pc, #68]	; (8005b4c <xTimerCreateTimerTask+0x54>)
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d00b      	beq.n	8005b26 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8005b0e:	4b10      	ldr	r3, [pc, #64]	; (8005b50 <xTimerCreateTimerTask+0x58>)
 8005b10:	9301      	str	r3, [sp, #4]
 8005b12:	2302      	movs	r3, #2
 8005b14:	9300      	str	r3, [sp, #0]
 8005b16:	2300      	movs	r3, #0
 8005b18:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005b1c:	490d      	ldr	r1, [pc, #52]	; (8005b54 <xTimerCreateTimerTask+0x5c>)
 8005b1e:	480e      	ldr	r0, [pc, #56]	; (8005b58 <xTimerCreateTimerTask+0x60>)
 8005b20:	f7fe ff50 	bl	80049c4 <xTaskCreate>
 8005b24:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d109      	bne.n	8005b40 <xTimerCreateTimerTask+0x48>
        __asm volatile
 8005b2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b30:	f383 8811 	msr	BASEPRI, r3
 8005b34:	f3bf 8f6f 	isb	sy
 8005b38:	f3bf 8f4f 	dsb	sy
 8005b3c:	603b      	str	r3, [r7, #0]
 8005b3e:	e7fe      	b.n	8005b3e <xTimerCreateTimerTask+0x46>
        return xReturn;
 8005b40:	687b      	ldr	r3, [r7, #4]
    }
 8005b42:	4618      	mov	r0, r3
 8005b44:	3708      	adds	r7, #8
 8005b46:	46bd      	mov	sp, r7
 8005b48:	bd80      	pop	{r7, pc}
 8005b4a:	bf00      	nop
 8005b4c:	20000170 	.word	0x20000170
 8005b50:	20000174 	.word	0x20000174
 8005b54:	08006c58 	.word	0x08006c58
 8005b58:	08005d45 	.word	0x08005d45

08005b5c <xTimerCreate>:
        TimerHandle_t xTimerCreate( const char * const pcTimerName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                                    const TickType_t xTimerPeriodInTicks,
                                    const UBaseType_t uxAutoReload,
                                    void * const pvTimerID,
                                    TimerCallbackFunction_t pxCallbackFunction )
        {
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b088      	sub	sp, #32
 8005b60:	af02      	add	r7, sp, #8
 8005b62:	60f8      	str	r0, [r7, #12]
 8005b64:	60b9      	str	r1, [r7, #8]
 8005b66:	607a      	str	r2, [r7, #4]
 8005b68:	603b      	str	r3, [r7, #0]
            Timer_t * pxNewTimer;

            pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8005b6a:	202c      	movs	r0, #44	; 0x2c
 8005b6c:	f000 fd72 	bl	8006654 <pvPortMalloc>
 8005b70:	6178      	str	r0, [r7, #20]

            if( pxNewTimer != NULL )
 8005b72:	697b      	ldr	r3, [r7, #20]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d00d      	beq.n	8005b94 <xTimerCreate+0x38>
            {
                /* Status is thus far zero as the timer is not created statically
                 * and has not been started.  The auto-reload bit may get set in
                 * prvInitialiseNewTimer. */
                pxNewTimer->ucStatus = 0x00;
 8005b78:	697b      	ldr	r3, [r7, #20]
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8005b80:	697b      	ldr	r3, [r7, #20]
 8005b82:	9301      	str	r3, [sp, #4]
 8005b84:	6a3b      	ldr	r3, [r7, #32]
 8005b86:	9300      	str	r3, [sp, #0]
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	687a      	ldr	r2, [r7, #4]
 8005b8c:	68b9      	ldr	r1, [r7, #8]
 8005b8e:	68f8      	ldr	r0, [r7, #12]
 8005b90:	f000 f805 	bl	8005b9e <prvInitialiseNewTimer>
            }

            return pxNewTimer;
 8005b94:	697b      	ldr	r3, [r7, #20]
        }
 8005b96:	4618      	mov	r0, r3
 8005b98:	3718      	adds	r7, #24
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	bd80      	pop	{r7, pc}

08005b9e <prvInitialiseNewTimer>:
                                       const TickType_t xTimerPeriodInTicks,
                                       const UBaseType_t uxAutoReload,
                                       void * const pvTimerID,
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer )
    {
 8005b9e:	b580      	push	{r7, lr}
 8005ba0:	b086      	sub	sp, #24
 8005ba2:	af00      	add	r7, sp, #0
 8005ba4:	60f8      	str	r0, [r7, #12]
 8005ba6:	60b9      	str	r1, [r7, #8]
 8005ba8:	607a      	str	r2, [r7, #4]
 8005baa:	603b      	str	r3, [r7, #0]
        /* 0 is not a valid value for xTimerPeriodInTicks. */
        configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8005bac:	68bb      	ldr	r3, [r7, #8]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d109      	bne.n	8005bc6 <prvInitialiseNewTimer+0x28>
 8005bb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bb6:	f383 8811 	msr	BASEPRI, r3
 8005bba:	f3bf 8f6f 	isb	sy
 8005bbe:	f3bf 8f4f 	dsb	sy
 8005bc2:	617b      	str	r3, [r7, #20]
 8005bc4:	e7fe      	b.n	8005bc4 <prvInitialiseNewTimer+0x26>

        if( pxNewTimer != NULL )
 8005bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d01e      	beq.n	8005c0a <prvInitialiseNewTimer+0x6c>
        {
            /* Ensure the infrastructure used by the timer service task has been
             * created/initialised. */
            prvCheckForValidListAndQueue();
 8005bcc:	f000 fac8 	bl	8006160 <prvCheckForValidListAndQueue>

            /* Initialise the timer structure members using the function
             * parameters. */
            pxNewTimer->pcTimerName = pcTimerName;
 8005bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bd2:	68fa      	ldr	r2, [r7, #12]
 8005bd4:	601a      	str	r2, [r3, #0]
            pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8005bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bd8:	68ba      	ldr	r2, [r7, #8]
 8005bda:	619a      	str	r2, [r3, #24]
            pxNewTimer->pvTimerID = pvTimerID;
 8005bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bde:	683a      	ldr	r2, [r7, #0]
 8005be0:	61da      	str	r2, [r3, #28]
            pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8005be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005be4:	6a3a      	ldr	r2, [r7, #32]
 8005be6:	621a      	str	r2, [r3, #32]
            vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8005be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bea:	3304      	adds	r3, #4
 8005bec:	4618      	mov	r0, r3
 8005bee:	f7fe f8b7 	bl	8003d60 <vListInitialiseItem>

            if( uxAutoReload != pdFALSE )
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d008      	beq.n	8005c0a <prvInitialiseNewTimer+0x6c>
            {
                pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8005bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bfa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005bfe:	f043 0304 	orr.w	r3, r3, #4
 8005c02:	b2da      	uxtb	r2, r3
 8005c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c06:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            }

            traceTIMER_CREATE( pxNewTimer );
        }
    }
 8005c0a:	bf00      	nop
 8005c0c:	3718      	adds	r7, #24
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	bd80      	pop	{r7, pc}
	...

08005c14 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b08a      	sub	sp, #40	; 0x28
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	60f8      	str	r0, [r7, #12]
 8005c1c:	60b9      	str	r1, [r7, #8]
 8005c1e:	607a      	str	r2, [r7, #4]
 8005c20:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8005c22:	2300      	movs	r3, #0
 8005c24:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d109      	bne.n	8005c40 <xTimerGenericCommand+0x2c>
 8005c2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c30:	f383 8811 	msr	BASEPRI, r3
 8005c34:	f3bf 8f6f 	isb	sy
 8005c38:	f3bf 8f4f 	dsb	sy
 8005c3c:	623b      	str	r3, [r7, #32]
 8005c3e:	e7fe      	b.n	8005c3e <xTimerGenericCommand+0x2a>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8005c40:	4b19      	ldr	r3, [pc, #100]	; (8005ca8 <xTimerGenericCommand+0x94>)
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d02a      	beq.n	8005c9e <xTimerGenericCommand+0x8a>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8005c48:	68bb      	ldr	r3, [r7, #8]
 8005c4a:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005c54:	68bb      	ldr	r3, [r7, #8]
 8005c56:	2b05      	cmp	r3, #5
 8005c58:	dc18      	bgt.n	8005c8c <xTimerGenericCommand+0x78>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005c5a:	f7ff fbf9 	bl	8005450 <xTaskGetSchedulerState>
 8005c5e:	4603      	mov	r3, r0
 8005c60:	2b02      	cmp	r3, #2
 8005c62:	d109      	bne.n	8005c78 <xTimerGenericCommand+0x64>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005c64:	4b10      	ldr	r3, [pc, #64]	; (8005ca8 <xTimerGenericCommand+0x94>)
 8005c66:	6818      	ldr	r0, [r3, #0]
 8005c68:	f107 0114 	add.w	r1, r7, #20
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c70:	f7fe f9f2 	bl	8004058 <xQueueGenericSend>
 8005c74:	6278      	str	r0, [r7, #36]	; 0x24
 8005c76:	e012      	b.n	8005c9e <xTimerGenericCommand+0x8a>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005c78:	4b0b      	ldr	r3, [pc, #44]	; (8005ca8 <xTimerGenericCommand+0x94>)
 8005c7a:	6818      	ldr	r0, [r3, #0]
 8005c7c:	f107 0114 	add.w	r1, r7, #20
 8005c80:	2300      	movs	r3, #0
 8005c82:	2200      	movs	r2, #0
 8005c84:	f7fe f9e8 	bl	8004058 <xQueueGenericSend>
 8005c88:	6278      	str	r0, [r7, #36]	; 0x24
 8005c8a:	e008      	b.n	8005c9e <xTimerGenericCommand+0x8a>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005c8c:	4b06      	ldr	r3, [pc, #24]	; (8005ca8 <xTimerGenericCommand+0x94>)
 8005c8e:	6818      	ldr	r0, [r3, #0]
 8005c90:	f107 0114 	add.w	r1, r7, #20
 8005c94:	2300      	movs	r3, #0
 8005c96:	683a      	ldr	r2, [r7, #0]
 8005c98:	f7fe fad8 	bl	800424c <xQueueGenericSendFromISR>
 8005c9c:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8005c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	3728      	adds	r7, #40	; 0x28
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	bd80      	pop	{r7, pc}
 8005ca8:	20000170 	.word	0x20000170

08005cac <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b088      	sub	sp, #32
 8005cb0:	af02      	add	r7, sp, #8
 8005cb2:	6078      	str	r0, [r7, #4]
 8005cb4:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005cb6:	4b22      	ldr	r3, [pc, #136]	; (8005d40 <prvProcessExpiredTimer+0x94>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	68db      	ldr	r3, [r3, #12]
 8005cbc:	68db      	ldr	r3, [r3, #12]
 8005cbe:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005cc0:	697b      	ldr	r3, [r7, #20]
 8005cc2:	3304      	adds	r3, #4
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	f7fe f8b5 	bl	8003e34 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005cca:	697b      	ldr	r3, [r7, #20]
 8005ccc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005cd0:	f003 0304 	and.w	r3, r3, #4
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d021      	beq.n	8005d1c <prvProcessExpiredTimer+0x70>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005cd8:	697b      	ldr	r3, [r7, #20]
 8005cda:	699a      	ldr	r2, [r3, #24]
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	18d1      	adds	r1, r2, r3
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	683a      	ldr	r2, [r7, #0]
 8005ce4:	6978      	ldr	r0, [r7, #20]
 8005ce6:	f000 f8d1 	bl	8005e8c <prvInsertTimerInActiveList>
 8005cea:	4603      	mov	r3, r0
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d01e      	beq.n	8005d2e <prvProcessExpiredTimer+0x82>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	9300      	str	r3, [sp, #0]
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	687a      	ldr	r2, [r7, #4]
 8005cf8:	2100      	movs	r1, #0
 8005cfa:	6978      	ldr	r0, [r7, #20]
 8005cfc:	f7ff ff8a 	bl	8005c14 <xTimerGenericCommand>
 8005d00:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 8005d02:	693b      	ldr	r3, [r7, #16]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d112      	bne.n	8005d2e <prvProcessExpiredTimer+0x82>
 8005d08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d0c:	f383 8811 	msr	BASEPRI, r3
 8005d10:	f3bf 8f6f 	isb	sy
 8005d14:	f3bf 8f4f 	dsb	sy
 8005d18:	60fb      	str	r3, [r7, #12]
 8005d1a:	e7fe      	b.n	8005d1a <prvProcessExpiredTimer+0x6e>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005d1c:	697b      	ldr	r3, [r7, #20]
 8005d1e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005d22:	f023 0301 	bic.w	r3, r3, #1
 8005d26:	b2da      	uxtb	r2, r3
 8005d28:	697b      	ldr	r3, [r7, #20]
 8005d2a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005d2e:	697b      	ldr	r3, [r7, #20]
 8005d30:	6a1b      	ldr	r3, [r3, #32]
 8005d32:	6978      	ldr	r0, [r7, #20]
 8005d34:	4798      	blx	r3
    }
 8005d36:	bf00      	nop
 8005d38:	3718      	adds	r7, #24
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	bd80      	pop	{r7, pc}
 8005d3e:	bf00      	nop
 8005d40:	20000168 	.word	0x20000168

08005d44 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b084      	sub	sp, #16
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005d4c:	f107 0308 	add.w	r3, r7, #8
 8005d50:	4618      	mov	r0, r3
 8005d52:	f000 f857 	bl	8005e04 <prvGetNextExpireTime>
 8005d56:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005d58:	68bb      	ldr	r3, [r7, #8]
 8005d5a:	4619      	mov	r1, r3
 8005d5c:	68f8      	ldr	r0, [r7, #12]
 8005d5e:	f000 f803 	bl	8005d68 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8005d62:	f000 f8d5 	bl	8005f10 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005d66:	e7f1      	b.n	8005d4c <prvTimerTask+0x8>

08005d68 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b084      	sub	sp, #16
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
 8005d70:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8005d72:	f7fe ffbb 	bl	8004cec <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005d76:	f107 0308 	add.w	r3, r7, #8
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	f000 f866 	bl	8005e4c <prvSampleTimeNow>
 8005d80:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8005d82:	68bb      	ldr	r3, [r7, #8]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d130      	bne.n	8005dea <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d10a      	bne.n	8005da4 <prvProcessTimerOrBlockTask+0x3c>
 8005d8e:	687a      	ldr	r2, [r7, #4]
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	429a      	cmp	r2, r3
 8005d94:	d806      	bhi.n	8005da4 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8005d96:	f7fe ffb7 	bl	8004d08 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005d9a:	68f9      	ldr	r1, [r7, #12]
 8005d9c:	6878      	ldr	r0, [r7, #4]
 8005d9e:	f7ff ff85 	bl	8005cac <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8005da2:	e024      	b.n	8005dee <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d008      	beq.n	8005dbc <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005daa:	4b13      	ldr	r3, [pc, #76]	; (8005df8 <prvProcessTimerOrBlockTask+0x90>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d101      	bne.n	8005db8 <prvProcessTimerOrBlockTask+0x50>
 8005db4:	2301      	movs	r3, #1
 8005db6:	e000      	b.n	8005dba <prvProcessTimerOrBlockTask+0x52>
 8005db8:	2300      	movs	r3, #0
 8005dba:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005dbc:	4b0f      	ldr	r3, [pc, #60]	; (8005dfc <prvProcessTimerOrBlockTask+0x94>)
 8005dbe:	6818      	ldr	r0, [r3, #0]
 8005dc0:	687a      	ldr	r2, [r7, #4]
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	1ad3      	subs	r3, r2, r3
 8005dc6:	683a      	ldr	r2, [r7, #0]
 8005dc8:	4619      	mov	r1, r3
 8005dca:	f7fe fdc7 	bl	800495c <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8005dce:	f7fe ff9b 	bl	8004d08 <xTaskResumeAll>
 8005dd2:	4603      	mov	r3, r0
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d10a      	bne.n	8005dee <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8005dd8:	4b09      	ldr	r3, [pc, #36]	; (8005e00 <prvProcessTimerOrBlockTask+0x98>)
 8005dda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005dde:	601a      	str	r2, [r3, #0]
 8005de0:	f3bf 8f4f 	dsb	sy
 8005de4:	f3bf 8f6f 	isb	sy
    }
 8005de8:	e001      	b.n	8005dee <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8005dea:	f7fe ff8d 	bl	8004d08 <xTaskResumeAll>
    }
 8005dee:	bf00      	nop
 8005df0:	3710      	adds	r7, #16
 8005df2:	46bd      	mov	sp, r7
 8005df4:	bd80      	pop	{r7, pc}
 8005df6:	bf00      	nop
 8005df8:	2000016c 	.word	0x2000016c
 8005dfc:	20000170 	.word	0x20000170
 8005e00:	e000ed04 	.word	0xe000ed04

08005e04 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8005e04:	b480      	push	{r7}
 8005e06:	b085      	sub	sp, #20
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005e0c:	4b0e      	ldr	r3, [pc, #56]	; (8005e48 <prvGetNextExpireTime+0x44>)
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d101      	bne.n	8005e1a <prvGetNextExpireTime+0x16>
 8005e16:	2201      	movs	r2, #1
 8005e18:	e000      	b.n	8005e1c <prvGetNextExpireTime+0x18>
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d105      	bne.n	8005e34 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005e28:	4b07      	ldr	r3, [pc, #28]	; (8005e48 <prvGetNextExpireTime+0x44>)
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	68db      	ldr	r3, [r3, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	60fb      	str	r3, [r7, #12]
 8005e32:	e001      	b.n	8005e38 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8005e34:	2300      	movs	r3, #0
 8005e36:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8005e38:	68fb      	ldr	r3, [r7, #12]
    }
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	3714      	adds	r7, #20
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e44:	4770      	bx	lr
 8005e46:	bf00      	nop
 8005e48:	20000168 	.word	0x20000168

08005e4c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b084      	sub	sp, #16
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8005e54:	f7fe fff4 	bl	8004e40 <xTaskGetTickCount>
 8005e58:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8005e5a:	4b0b      	ldr	r3, [pc, #44]	; (8005e88 <prvSampleTimeNow+0x3c>)
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	68fa      	ldr	r2, [r7, #12]
 8005e60:	429a      	cmp	r2, r3
 8005e62:	d205      	bcs.n	8005e70 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8005e64:	f000 f918 	bl	8006098 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2201      	movs	r2, #1
 8005e6c:	601a      	str	r2, [r3, #0]
 8005e6e:	e002      	b.n	8005e76 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2200      	movs	r2, #0
 8005e74:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8005e76:	4a04      	ldr	r2, [pc, #16]	; (8005e88 <prvSampleTimeNow+0x3c>)
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
    }
 8005e7e:	4618      	mov	r0, r3
 8005e80:	3710      	adds	r7, #16
 8005e82:	46bd      	mov	sp, r7
 8005e84:	bd80      	pop	{r7, pc}
 8005e86:	bf00      	nop
 8005e88:	20000178 	.word	0x20000178

08005e8c <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b086      	sub	sp, #24
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	60f8      	str	r0, [r7, #12]
 8005e94:	60b9      	str	r1, [r7, #8]
 8005e96:	607a      	str	r2, [r7, #4]
 8005e98:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	68ba      	ldr	r2, [r7, #8]
 8005ea2:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	68fa      	ldr	r2, [r7, #12]
 8005ea8:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8005eaa:	68ba      	ldr	r2, [r7, #8]
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	429a      	cmp	r2, r3
 8005eb0:	d812      	bhi.n	8005ed8 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005eb2:	687a      	ldr	r2, [r7, #4]
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	1ad2      	subs	r2, r2, r3
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	699b      	ldr	r3, [r3, #24]
 8005ebc:	429a      	cmp	r2, r3
 8005ebe:	d302      	bcc.n	8005ec6 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8005ec0:	2301      	movs	r3, #1
 8005ec2:	617b      	str	r3, [r7, #20]
 8005ec4:	e01b      	b.n	8005efe <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005ec6:	4b10      	ldr	r3, [pc, #64]	; (8005f08 <prvInsertTimerInActiveList+0x7c>)
 8005ec8:	681a      	ldr	r2, [r3, #0]
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	3304      	adds	r3, #4
 8005ece:	4619      	mov	r1, r3
 8005ed0:	4610      	mov	r0, r2
 8005ed2:	f7fd ff76 	bl	8003dc2 <vListInsert>
 8005ed6:	e012      	b.n	8005efe <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005ed8:	687a      	ldr	r2, [r7, #4]
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	429a      	cmp	r2, r3
 8005ede:	d206      	bcs.n	8005eee <prvInsertTimerInActiveList+0x62>
 8005ee0:	68ba      	ldr	r2, [r7, #8]
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	429a      	cmp	r2, r3
 8005ee6:	d302      	bcc.n	8005eee <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8005ee8:	2301      	movs	r3, #1
 8005eea:	617b      	str	r3, [r7, #20]
 8005eec:	e007      	b.n	8005efe <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005eee:	4b07      	ldr	r3, [pc, #28]	; (8005f0c <prvInsertTimerInActiveList+0x80>)
 8005ef0:	681a      	ldr	r2, [r3, #0]
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	3304      	adds	r3, #4
 8005ef6:	4619      	mov	r1, r3
 8005ef8:	4610      	mov	r0, r2
 8005efa:	f7fd ff62 	bl	8003dc2 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8005efe:	697b      	ldr	r3, [r7, #20]
    }
 8005f00:	4618      	mov	r0, r3
 8005f02:	3718      	adds	r7, #24
 8005f04:	46bd      	mov	sp, r7
 8005f06:	bd80      	pop	{r7, pc}
 8005f08:	2000016c 	.word	0x2000016c
 8005f0c:	20000168 	.word	0x20000168

08005f10 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b08c      	sub	sp, #48	; 0x30
 8005f14:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005f16:	e0ac      	b.n	8006072 <prvProcessReceivedCommands+0x162>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005f18:	68bb      	ldr	r3, [r7, #8]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	f2c0 80a8 	blt.w	8006070 <prvProcessReceivedCommands+0x160>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005f20:	693b      	ldr	r3, [r7, #16]
 8005f22:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f26:	695b      	ldr	r3, [r3, #20]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d004      	beq.n	8005f36 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f2e:	3304      	adds	r3, #4
 8005f30:	4618      	mov	r0, r3
 8005f32:	f7fd ff7f 	bl	8003e34 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005f36:	1d3b      	adds	r3, r7, #4
 8005f38:	4618      	mov	r0, r3
 8005f3a:	f7ff ff87 	bl	8005e4c <prvSampleTimeNow>
 8005f3e:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8005f40:	68bb      	ldr	r3, [r7, #8]
 8005f42:	2b09      	cmp	r3, #9
 8005f44:	f200 8095 	bhi.w	8006072 <prvProcessReceivedCommands+0x162>
 8005f48:	a201      	add	r2, pc, #4	; (adr r2, 8005f50 <prvProcessReceivedCommands+0x40>)
 8005f4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f4e:	bf00      	nop
 8005f50:	08005f79 	.word	0x08005f79
 8005f54:	08005f79 	.word	0x08005f79
 8005f58:	08005f79 	.word	0x08005f79
 8005f5c:	08005feb 	.word	0x08005feb
 8005f60:	08005fff 	.word	0x08005fff
 8005f64:	08006047 	.word	0x08006047
 8005f68:	08005f79 	.word	0x08005f79
 8005f6c:	08005f79 	.word	0x08005f79
 8005f70:	08005feb 	.word	0x08005feb
 8005f74:	08005fff 	.word	0x08005fff
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f7a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005f7e:	f043 0301 	orr.w	r3, r3, #1
 8005f82:	b2da      	uxtb	r2, r3
 8005f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f86:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005f8a:	68fa      	ldr	r2, [r7, #12]
 8005f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f8e:	699b      	ldr	r3, [r3, #24]
 8005f90:	18d1      	adds	r1, r2, r3
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	6a3a      	ldr	r2, [r7, #32]
 8005f96:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005f98:	f7ff ff78 	bl	8005e8c <prvInsertTimerInActiveList>
 8005f9c:	4603      	mov	r3, r0
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d067      	beq.n	8006072 <prvProcessReceivedCommands+0x162>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fa4:	6a1b      	ldr	r3, [r3, #32]
 8005fa6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005fa8:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005fb0:	f003 0304 	and.w	r3, r3, #4
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d05c      	beq.n	8006072 <prvProcessReceivedCommands+0x162>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005fb8:	68fa      	ldr	r2, [r7, #12]
 8005fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fbc:	699b      	ldr	r3, [r3, #24]
 8005fbe:	441a      	add	r2, r3
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	9300      	str	r3, [sp, #0]
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	2100      	movs	r1, #0
 8005fc8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005fca:	f7ff fe23 	bl	8005c14 <xTimerGenericCommand>
 8005fce:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8005fd0:	69fb      	ldr	r3, [r7, #28]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d14d      	bne.n	8006072 <prvProcessReceivedCommands+0x162>
 8005fd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fda:	f383 8811 	msr	BASEPRI, r3
 8005fde:	f3bf 8f6f 	isb	sy
 8005fe2:	f3bf 8f4f 	dsb	sy
 8005fe6:	61bb      	str	r3, [r7, #24]
 8005fe8:	e7fe      	b.n	8005fe8 <prvProcessReceivedCommands+0xd8>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005ff0:	f023 0301 	bic.w	r3, r3, #1
 8005ff4:	b2da      	uxtb	r2, r3
 8005ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ff8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8005ffc:	e039      	b.n	8006072 <prvProcessReceivedCommands+0x162>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006000:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006004:	f043 0301 	orr.w	r3, r3, #1
 8006008:	b2da      	uxtb	r2, r3
 800600a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800600c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006010:	68fa      	ldr	r2, [r7, #12]
 8006012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006014:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006018:	699b      	ldr	r3, [r3, #24]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d109      	bne.n	8006032 <prvProcessReceivedCommands+0x122>
 800601e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006022:	f383 8811 	msr	BASEPRI, r3
 8006026:	f3bf 8f6f 	isb	sy
 800602a:	f3bf 8f4f 	dsb	sy
 800602e:	617b      	str	r3, [r7, #20]
 8006030:	e7fe      	b.n	8006030 <prvProcessReceivedCommands+0x120>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006034:	699a      	ldr	r2, [r3, #24]
 8006036:	6a3b      	ldr	r3, [r7, #32]
 8006038:	18d1      	adds	r1, r2, r3
 800603a:	6a3b      	ldr	r3, [r7, #32]
 800603c:	6a3a      	ldr	r2, [r7, #32]
 800603e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006040:	f7ff ff24 	bl	8005e8c <prvInsertTimerInActiveList>
                        break;
 8006044:	e015      	b.n	8006072 <prvProcessReceivedCommands+0x162>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006048:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800604c:	f003 0302 	and.w	r3, r3, #2
 8006050:	2b00      	cmp	r3, #0
 8006052:	d103      	bne.n	800605c <prvProcessReceivedCommands+0x14c>
                                {
                                    vPortFree( pxTimer );
 8006054:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006056:	f000 fbd9 	bl	800680c <vPortFree>
 800605a:	e00a      	b.n	8006072 <prvProcessReceivedCommands+0x162>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800605c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800605e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006062:	f023 0301 	bic.w	r3, r3, #1
 8006066:	b2da      	uxtb	r2, r3
 8006068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800606a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 800606e:	e000      	b.n	8006072 <prvProcessReceivedCommands+0x162>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8006070:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006072:	4b08      	ldr	r3, [pc, #32]	; (8006094 <prvProcessReceivedCommands+0x184>)
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f107 0108 	add.w	r1, r7, #8
 800607a:	2200      	movs	r2, #0
 800607c:	4618      	mov	r0, r3
 800607e:	f7fe f98b 	bl	8004398 <xQueueReceive>
 8006082:	4603      	mov	r3, r0
 8006084:	2b00      	cmp	r3, #0
 8006086:	f47f af47 	bne.w	8005f18 <prvProcessReceivedCommands+0x8>
        }
    }
 800608a:	bf00      	nop
 800608c:	3728      	adds	r7, #40	; 0x28
 800608e:	46bd      	mov	sp, r7
 8006090:	bd80      	pop	{r7, pc}
 8006092:	bf00      	nop
 8006094:	20000170 	.word	0x20000170

08006098 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8006098:	b580      	push	{r7, lr}
 800609a:	b088      	sub	sp, #32
 800609c:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800609e:	e047      	b.n	8006130 <prvSwitchTimerLists+0x98>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80060a0:	4b2d      	ldr	r3, [pc, #180]	; (8006158 <prvSwitchTimerLists+0xc0>)
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	68db      	ldr	r3, [r3, #12]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80060aa:	4b2b      	ldr	r3, [pc, #172]	; (8006158 <prvSwitchTimerLists+0xc0>)
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	68db      	ldr	r3, [r3, #12]
 80060b0:	68db      	ldr	r3, [r3, #12]
 80060b2:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	3304      	adds	r3, #4
 80060b8:	4618      	mov	r0, r3
 80060ba:	f7fd febb 	bl	8003e34 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	6a1b      	ldr	r3, [r3, #32]
 80060c2:	68f8      	ldr	r0, [r7, #12]
 80060c4:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80060cc:	f003 0304 	and.w	r3, r3, #4
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d02d      	beq.n	8006130 <prvSwitchTimerLists+0x98>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	699b      	ldr	r3, [r3, #24]
 80060d8:	693a      	ldr	r2, [r7, #16]
 80060da:	4413      	add	r3, r2
 80060dc:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 80060de:	68ba      	ldr	r2, [r7, #8]
 80060e0:	693b      	ldr	r3, [r7, #16]
 80060e2:	429a      	cmp	r2, r3
 80060e4:	d90e      	bls.n	8006104 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	68ba      	ldr	r2, [r7, #8]
 80060ea:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	68fa      	ldr	r2, [r7, #12]
 80060f0:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80060f2:	4b19      	ldr	r3, [pc, #100]	; (8006158 <prvSwitchTimerLists+0xc0>)
 80060f4:	681a      	ldr	r2, [r3, #0]
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	3304      	adds	r3, #4
 80060fa:	4619      	mov	r1, r3
 80060fc:	4610      	mov	r0, r2
 80060fe:	f7fd fe60 	bl	8003dc2 <vListInsert>
 8006102:	e015      	b.n	8006130 <prvSwitchTimerLists+0x98>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006104:	2300      	movs	r3, #0
 8006106:	9300      	str	r3, [sp, #0]
 8006108:	2300      	movs	r3, #0
 800610a:	693a      	ldr	r2, [r7, #16]
 800610c:	2100      	movs	r1, #0
 800610e:	68f8      	ldr	r0, [r7, #12]
 8006110:	f7ff fd80 	bl	8005c14 <xTimerGenericCommand>
 8006114:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d109      	bne.n	8006130 <prvSwitchTimerLists+0x98>
 800611c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006120:	f383 8811 	msr	BASEPRI, r3
 8006124:	f3bf 8f6f 	isb	sy
 8006128:	f3bf 8f4f 	dsb	sy
 800612c:	603b      	str	r3, [r7, #0]
 800612e:	e7fe      	b.n	800612e <prvSwitchTimerLists+0x96>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006130:	4b09      	ldr	r3, [pc, #36]	; (8006158 <prvSwitchTimerLists+0xc0>)
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d1b2      	bne.n	80060a0 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 800613a:	4b07      	ldr	r3, [pc, #28]	; (8006158 <prvSwitchTimerLists+0xc0>)
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 8006140:	4b06      	ldr	r3, [pc, #24]	; (800615c <prvSwitchTimerLists+0xc4>)
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	4a04      	ldr	r2, [pc, #16]	; (8006158 <prvSwitchTimerLists+0xc0>)
 8006146:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8006148:	4a04      	ldr	r2, [pc, #16]	; (800615c <prvSwitchTimerLists+0xc4>)
 800614a:	697b      	ldr	r3, [r7, #20]
 800614c:	6013      	str	r3, [r2, #0]
    }
 800614e:	bf00      	nop
 8006150:	3718      	adds	r7, #24
 8006152:	46bd      	mov	sp, r7
 8006154:	bd80      	pop	{r7, pc}
 8006156:	bf00      	nop
 8006158:	20000168 	.word	0x20000168
 800615c:	2000016c 	.word	0x2000016c

08006160 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8006160:	b580      	push	{r7, lr}
 8006162:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8006164:	f000 f95c 	bl	8006420 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8006168:	4b12      	ldr	r3, [pc, #72]	; (80061b4 <prvCheckForValidListAndQueue+0x54>)
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d11d      	bne.n	80061ac <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8006170:	4811      	ldr	r0, [pc, #68]	; (80061b8 <prvCheckForValidListAndQueue+0x58>)
 8006172:	f7fd fdd5 	bl	8003d20 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8006176:	4811      	ldr	r0, [pc, #68]	; (80061bc <prvCheckForValidListAndQueue+0x5c>)
 8006178:	f7fd fdd2 	bl	8003d20 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 800617c:	4b10      	ldr	r3, [pc, #64]	; (80061c0 <prvCheckForValidListAndQueue+0x60>)
 800617e:	4a0e      	ldr	r2, [pc, #56]	; (80061b8 <prvCheckForValidListAndQueue+0x58>)
 8006180:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8006182:	4b10      	ldr	r3, [pc, #64]	; (80061c4 <prvCheckForValidListAndQueue+0x64>)
 8006184:	4a0d      	ldr	r2, [pc, #52]	; (80061bc <prvCheckForValidListAndQueue+0x5c>)
 8006186:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8006188:	2200      	movs	r2, #0
 800618a:	210c      	movs	r1, #12
 800618c:	200a      	movs	r0, #10
 800618e:	f7fd fee3 	bl	8003f58 <xQueueGenericCreate>
 8006192:	4602      	mov	r2, r0
 8006194:	4b07      	ldr	r3, [pc, #28]	; (80061b4 <prvCheckForValidListAndQueue+0x54>)
 8006196:	601a      	str	r2, [r3, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8006198:	4b06      	ldr	r3, [pc, #24]	; (80061b4 <prvCheckForValidListAndQueue+0x54>)
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d005      	beq.n	80061ac <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80061a0:	4b04      	ldr	r3, [pc, #16]	; (80061b4 <prvCheckForValidListAndQueue+0x54>)
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	4908      	ldr	r1, [pc, #32]	; (80061c8 <prvCheckForValidListAndQueue+0x68>)
 80061a6:	4618      	mov	r0, r3
 80061a8:	f7fe fbb0 	bl	800490c <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80061ac:	f000 f966 	bl	800647c <vPortExitCritical>
    }
 80061b0:	bf00      	nop
 80061b2:	bd80      	pop	{r7, pc}
 80061b4:	20000170 	.word	0x20000170
 80061b8:	20000140 	.word	0x20000140
 80061bc:	20000154 	.word	0x20000154
 80061c0:	20000168 	.word	0x20000168
 80061c4:	2000016c 	.word	0x2000016c
 80061c8:	08006c60 	.word	0x08006c60

080061cc <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80061cc:	b480      	push	{r7}
 80061ce:	b085      	sub	sp, #20
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	60f8      	str	r0, [r7, #12]
 80061d4:	60b9      	str	r1, [r7, #8]
 80061d6:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	3b04      	subs	r3, #4
 80061dc:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80061e4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	3b04      	subs	r3, #4
 80061ea:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80061ec:	68bb      	ldr	r3, [r7, #8]
 80061ee:	f023 0201 	bic.w	r2, r3, #1
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	3b04      	subs	r3, #4
 80061fa:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80061fc:	4a0c      	ldr	r2, [pc, #48]	; (8006230 <pxPortInitialiseStack+0x64>)
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	3b14      	subs	r3, #20
 8006206:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8006208:	687a      	ldr	r2, [r7, #4]
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	3b04      	subs	r3, #4
 8006212:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	f06f 0202 	mvn.w	r2, #2
 800621a:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	3b20      	subs	r3, #32
 8006220:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8006222:	68fb      	ldr	r3, [r7, #12]
}
 8006224:	4618      	mov	r0, r3
 8006226:	3714      	adds	r7, #20
 8006228:	46bd      	mov	sp, r7
 800622a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622e:	4770      	bx	lr
 8006230:	08006235 	.word	0x08006235

08006234 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006234:	b480      	push	{r7}
 8006236:	b085      	sub	sp, #20
 8006238:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800623a:	2300      	movs	r3, #0
 800623c:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800623e:	4b11      	ldr	r3, [pc, #68]	; (8006284 <prvTaskExitError+0x50>)
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006246:	d009      	beq.n	800625c <prvTaskExitError+0x28>
 8006248:	f04f 0350 	mov.w	r3, #80	; 0x50
 800624c:	f383 8811 	msr	BASEPRI, r3
 8006250:	f3bf 8f6f 	isb	sy
 8006254:	f3bf 8f4f 	dsb	sy
 8006258:	60fb      	str	r3, [r7, #12]
 800625a:	e7fe      	b.n	800625a <prvTaskExitError+0x26>
 800625c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006260:	f383 8811 	msr	BASEPRI, r3
 8006264:	f3bf 8f6f 	isb	sy
 8006268:	f3bf 8f4f 	dsb	sy
 800626c:	60bb      	str	r3, [r7, #8]
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800626e:	bf00      	nop
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d0fc      	beq.n	8006270 <prvTaskExitError+0x3c>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8006276:	bf00      	nop
 8006278:	3714      	adds	r7, #20
 800627a:	46bd      	mov	sp, r7
 800627c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006280:	4770      	bx	lr
 8006282:	bf00      	nop
 8006284:	20000018 	.word	0x20000018
	...

08006290 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8006290:	4b07      	ldr	r3, [pc, #28]	; (80062b0 <pxCurrentTCBConst2>)
 8006292:	6819      	ldr	r1, [r3, #0]
 8006294:	6808      	ldr	r0, [r1, #0]
 8006296:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800629a:	f380 8809 	msr	PSP, r0
 800629e:	f3bf 8f6f 	isb	sy
 80062a2:	f04f 0000 	mov.w	r0, #0
 80062a6:	f380 8811 	msr	BASEPRI, r0
 80062aa:	4770      	bx	lr
 80062ac:	f3af 8000 	nop.w

080062b0 <pxCurrentTCBConst2>:
 80062b0:	2000003c 	.word	0x2000003c
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80062b4:	bf00      	nop
 80062b6:	bf00      	nop

080062b8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80062b8:	4808      	ldr	r0, [pc, #32]	; (80062dc <prvPortStartFirstTask+0x24>)
 80062ba:	6800      	ldr	r0, [r0, #0]
 80062bc:	6800      	ldr	r0, [r0, #0]
 80062be:	f380 8808 	msr	MSP, r0
 80062c2:	f04f 0000 	mov.w	r0, #0
 80062c6:	f380 8814 	msr	CONTROL, r0
 80062ca:	b662      	cpsie	i
 80062cc:	b661      	cpsie	f
 80062ce:	f3bf 8f4f 	dsb	sy
 80062d2:	f3bf 8f6f 	isb	sy
 80062d6:	df00      	svc	0
 80062d8:	bf00      	nop
 80062da:	0000      	.short	0x0000
 80062dc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 80062e0:	bf00      	nop
 80062e2:	bf00      	nop

080062e4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b086      	sub	sp, #24
 80062e8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80062ea:	4b44      	ldr	r3, [pc, #272]	; (80063fc <xPortStartScheduler+0x118>)
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	4a44      	ldr	r2, [pc, #272]	; (8006400 <xPortStartScheduler+0x11c>)
 80062f0:	4293      	cmp	r3, r2
 80062f2:	d109      	bne.n	8006308 <xPortStartScheduler+0x24>
 80062f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062f8:	f383 8811 	msr	BASEPRI, r3
 80062fc:	f3bf 8f6f 	isb	sy
 8006300:	f3bf 8f4f 	dsb	sy
 8006304:	613b      	str	r3, [r7, #16]
 8006306:	e7fe      	b.n	8006306 <xPortStartScheduler+0x22>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006308:	4b3c      	ldr	r3, [pc, #240]	; (80063fc <xPortStartScheduler+0x118>)
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	4a3d      	ldr	r2, [pc, #244]	; (8006404 <xPortStartScheduler+0x120>)
 800630e:	4293      	cmp	r3, r2
 8006310:	d109      	bne.n	8006326 <xPortStartScheduler+0x42>
 8006312:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006316:	f383 8811 	msr	BASEPRI, r3
 800631a:	f3bf 8f6f 	isb	sy
 800631e:	f3bf 8f4f 	dsb	sy
 8006322:	60fb      	str	r3, [r7, #12]
 8006324:	e7fe      	b.n	8006324 <xPortStartScheduler+0x40>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006326:	4b38      	ldr	r3, [pc, #224]	; (8006408 <xPortStartScheduler+0x124>)
 8006328:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800632a:	697b      	ldr	r3, [r7, #20]
 800632c:	781b      	ldrb	r3, [r3, #0]
 800632e:	b2db      	uxtb	r3, r3
 8006330:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006332:	697b      	ldr	r3, [r7, #20]
 8006334:	22ff      	movs	r2, #255	; 0xff
 8006336:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006338:	697b      	ldr	r3, [r7, #20]
 800633a:	781b      	ldrb	r3, [r3, #0]
 800633c:	b2db      	uxtb	r3, r3
 800633e:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006340:	78fb      	ldrb	r3, [r7, #3]
 8006342:	b2db      	uxtb	r3, r3
 8006344:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006348:	b2da      	uxtb	r2, r3
 800634a:	4b30      	ldr	r3, [pc, #192]	; (800640c <xPortStartScheduler+0x128>)
 800634c:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800634e:	4b30      	ldr	r3, [pc, #192]	; (8006410 <xPortStartScheduler+0x12c>)
 8006350:	2207      	movs	r2, #7
 8006352:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006354:	e009      	b.n	800636a <xPortStartScheduler+0x86>
            {
                ulMaxPRIGROUPValue--;
 8006356:	4b2e      	ldr	r3, [pc, #184]	; (8006410 <xPortStartScheduler+0x12c>)
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	3b01      	subs	r3, #1
 800635c:	4a2c      	ldr	r2, [pc, #176]	; (8006410 <xPortStartScheduler+0x12c>)
 800635e:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006360:	78fb      	ldrb	r3, [r7, #3]
 8006362:	b2db      	uxtb	r3, r3
 8006364:	005b      	lsls	r3, r3, #1
 8006366:	b2db      	uxtb	r3, r3
 8006368:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800636a:	78fb      	ldrb	r3, [r7, #3]
 800636c:	b2db      	uxtb	r3, r3
 800636e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006372:	2b80      	cmp	r3, #128	; 0x80
 8006374:	d0ef      	beq.n	8006356 <xPortStartScheduler+0x72>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006376:	4b26      	ldr	r3, [pc, #152]	; (8006410 <xPortStartScheduler+0x12c>)
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f1c3 0307 	rsb	r3, r3, #7
 800637e:	2b04      	cmp	r3, #4
 8006380:	d009      	beq.n	8006396 <xPortStartScheduler+0xb2>
 8006382:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006386:	f383 8811 	msr	BASEPRI, r3
 800638a:	f3bf 8f6f 	isb	sy
 800638e:	f3bf 8f4f 	dsb	sy
 8006392:	60bb      	str	r3, [r7, #8]
 8006394:	e7fe      	b.n	8006394 <xPortStartScheduler+0xb0>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006396:	4b1e      	ldr	r3, [pc, #120]	; (8006410 <xPortStartScheduler+0x12c>)
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	021b      	lsls	r3, r3, #8
 800639c:	4a1c      	ldr	r2, [pc, #112]	; (8006410 <xPortStartScheduler+0x12c>)
 800639e:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80063a0:	4b1b      	ldr	r3, [pc, #108]	; (8006410 <xPortStartScheduler+0x12c>)
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80063a8:	4a19      	ldr	r2, [pc, #100]	; (8006410 <xPortStartScheduler+0x12c>)
 80063aa:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	b2da      	uxtb	r2, r3
 80063b0:	697b      	ldr	r3, [r7, #20]
 80063b2:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80063b4:	4b17      	ldr	r3, [pc, #92]	; (8006414 <xPortStartScheduler+0x130>)
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	4a16      	ldr	r2, [pc, #88]	; (8006414 <xPortStartScheduler+0x130>)
 80063ba:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80063be:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80063c0:	4b14      	ldr	r3, [pc, #80]	; (8006414 <xPortStartScheduler+0x130>)
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	4a13      	ldr	r2, [pc, #76]	; (8006414 <xPortStartScheduler+0x130>)
 80063c6:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80063ca:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80063cc:	f000 f8d4 	bl	8006578 <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80063d0:	4b11      	ldr	r3, [pc, #68]	; (8006418 <xPortStartScheduler+0x134>)
 80063d2:	2200      	movs	r2, #0
 80063d4:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80063d6:	f000 f8f3 	bl	80065c0 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80063da:	4b10      	ldr	r3, [pc, #64]	; (800641c <xPortStartScheduler+0x138>)
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	4a0f      	ldr	r2, [pc, #60]	; (800641c <xPortStartScheduler+0x138>)
 80063e0:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80063e4:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80063e6:	f7ff ff67 	bl	80062b8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80063ea:	f7fe fdf1 	bl	8004fd0 <vTaskSwitchContext>
    prvTaskExitError();
 80063ee:	f7ff ff21 	bl	8006234 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80063f2:	2300      	movs	r3, #0
}
 80063f4:	4618      	mov	r0, r3
 80063f6:	3718      	adds	r7, #24
 80063f8:	46bd      	mov	sp, r7
 80063fa:	bd80      	pop	{r7, pc}
 80063fc:	e000ed00 	.word	0xe000ed00
 8006400:	410fc271 	.word	0x410fc271
 8006404:	410fc270 	.word	0x410fc270
 8006408:	e000e400 	.word	0xe000e400
 800640c:	2000017c 	.word	0x2000017c
 8006410:	20000180 	.word	0x20000180
 8006414:	e000ed20 	.word	0xe000ed20
 8006418:	20000018 	.word	0x20000018
 800641c:	e000ef34 	.word	0xe000ef34

08006420 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006420:	b480      	push	{r7}
 8006422:	b083      	sub	sp, #12
 8006424:	af00      	add	r7, sp, #0
 8006426:	f04f 0350 	mov.w	r3, #80	; 0x50
 800642a:	f383 8811 	msr	BASEPRI, r3
 800642e:	f3bf 8f6f 	isb	sy
 8006432:	f3bf 8f4f 	dsb	sy
 8006436:	607b      	str	r3, [r7, #4]
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8006438:	4b0e      	ldr	r3, [pc, #56]	; (8006474 <vPortEnterCritical+0x54>)
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	3301      	adds	r3, #1
 800643e:	4a0d      	ldr	r2, [pc, #52]	; (8006474 <vPortEnterCritical+0x54>)
 8006440:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8006442:	4b0c      	ldr	r3, [pc, #48]	; (8006474 <vPortEnterCritical+0x54>)
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	2b01      	cmp	r3, #1
 8006448:	d10e      	bne.n	8006468 <vPortEnterCritical+0x48>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800644a:	4b0b      	ldr	r3, [pc, #44]	; (8006478 <vPortEnterCritical+0x58>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	b2db      	uxtb	r3, r3
 8006450:	2b00      	cmp	r3, #0
 8006452:	d009      	beq.n	8006468 <vPortEnterCritical+0x48>
 8006454:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006458:	f383 8811 	msr	BASEPRI, r3
 800645c:	f3bf 8f6f 	isb	sy
 8006460:	f3bf 8f4f 	dsb	sy
 8006464:	603b      	str	r3, [r7, #0]
 8006466:	e7fe      	b.n	8006466 <vPortEnterCritical+0x46>
    }
}
 8006468:	bf00      	nop
 800646a:	370c      	adds	r7, #12
 800646c:	46bd      	mov	sp, r7
 800646e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006472:	4770      	bx	lr
 8006474:	20000018 	.word	0x20000018
 8006478:	e000ed04 	.word	0xe000ed04

0800647c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800647c:	b480      	push	{r7}
 800647e:	b083      	sub	sp, #12
 8006480:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8006482:	4b11      	ldr	r3, [pc, #68]	; (80064c8 <vPortExitCritical+0x4c>)
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d109      	bne.n	800649e <vPortExitCritical+0x22>
 800648a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800648e:	f383 8811 	msr	BASEPRI, r3
 8006492:	f3bf 8f6f 	isb	sy
 8006496:	f3bf 8f4f 	dsb	sy
 800649a:	607b      	str	r3, [r7, #4]
 800649c:	e7fe      	b.n	800649c <vPortExitCritical+0x20>
    uxCriticalNesting--;
 800649e:	4b0a      	ldr	r3, [pc, #40]	; (80064c8 <vPortExitCritical+0x4c>)
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	3b01      	subs	r3, #1
 80064a4:	4a08      	ldr	r2, [pc, #32]	; (80064c8 <vPortExitCritical+0x4c>)
 80064a6:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80064a8:	4b07      	ldr	r3, [pc, #28]	; (80064c8 <vPortExitCritical+0x4c>)
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d104      	bne.n	80064ba <vPortExitCritical+0x3e>
 80064b0:	2300      	movs	r3, #0
 80064b2:	603b      	str	r3, [r7, #0]
        __asm volatile
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	f383 8811 	msr	BASEPRI, r3
    {
        portENABLE_INTERRUPTS();
    }
}
 80064ba:	bf00      	nop
 80064bc:	370c      	adds	r7, #12
 80064be:	46bd      	mov	sp, r7
 80064c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c4:	4770      	bx	lr
 80064c6:	bf00      	nop
 80064c8:	20000018 	.word	0x20000018
 80064cc:	00000000 	.word	0x00000000

080064d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80064d0:	f3ef 8009 	mrs	r0, PSP
 80064d4:	f3bf 8f6f 	isb	sy
 80064d8:	4b15      	ldr	r3, [pc, #84]	; (8006530 <pxCurrentTCBConst>)
 80064da:	681a      	ldr	r2, [r3, #0]
 80064dc:	f01e 0f10 	tst.w	lr, #16
 80064e0:	bf08      	it	eq
 80064e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80064e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064ea:	6010      	str	r0, [r2, #0]
 80064ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80064f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80064f4:	f380 8811 	msr	BASEPRI, r0
 80064f8:	f3bf 8f4f 	dsb	sy
 80064fc:	f3bf 8f6f 	isb	sy
 8006500:	f7fe fd66 	bl	8004fd0 <vTaskSwitchContext>
 8006504:	f04f 0000 	mov.w	r0, #0
 8006508:	f380 8811 	msr	BASEPRI, r0
 800650c:	bc09      	pop	{r0, r3}
 800650e:	6819      	ldr	r1, [r3, #0]
 8006510:	6808      	ldr	r0, [r1, #0]
 8006512:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006516:	f01e 0f10 	tst.w	lr, #16
 800651a:	bf08      	it	eq
 800651c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006520:	f380 8809 	msr	PSP, r0
 8006524:	f3bf 8f6f 	isb	sy
 8006528:	4770      	bx	lr
 800652a:	bf00      	nop
 800652c:	f3af 8000 	nop.w

08006530 <pxCurrentTCBConst>:
 8006530:	2000003c 	.word	0x2000003c
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8006534:	bf00      	nop
 8006536:	bf00      	nop

08006538 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006538:	b580      	push	{r7, lr}
 800653a:	b082      	sub	sp, #8
 800653c:	af00      	add	r7, sp, #0
        __asm volatile
 800653e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006542:	f383 8811 	msr	BASEPRI, r3
 8006546:	f3bf 8f6f 	isb	sy
 800654a:	f3bf 8f4f 	dsb	sy
 800654e:	607b      	str	r3, [r7, #4]
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8006550:	f7fe fc86 	bl	8004e60 <xTaskIncrementTick>
 8006554:	4603      	mov	r3, r0
 8006556:	2b00      	cmp	r3, #0
 8006558:	d003      	beq.n	8006562 <SysTick_Handler+0x2a>
        {
			traceISR_EXIT_TO_SCHEDULER();
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800655a:	4b06      	ldr	r3, [pc, #24]	; (8006574 <SysTick_Handler+0x3c>)
 800655c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006560:	601a      	str	r2, [r3, #0]
 8006562:	2300      	movs	r3, #0
 8006564:	603b      	str	r3, [r7, #0]
        __asm volatile
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	f383 8811 	msr	BASEPRI, r3
		{
			traceISR_EXIT();
		}
    }
    portENABLE_INTERRUPTS();
}
 800656c:	bf00      	nop
 800656e:	3708      	adds	r7, #8
 8006570:	46bd      	mov	sp, r7
 8006572:	bd80      	pop	{r7, pc}
 8006574:	e000ed04 	.word	0xe000ed04

08006578 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8006578:	b480      	push	{r7}
 800657a:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 800657c:	4b0b      	ldr	r3, [pc, #44]	; (80065ac <vPortSetupTimerInterrupt+0x34>)
 800657e:	2200      	movs	r2, #0
 8006580:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006582:	4b0b      	ldr	r3, [pc, #44]	; (80065b0 <vPortSetupTimerInterrupt+0x38>)
 8006584:	2200      	movs	r2, #0
 8006586:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006588:	4b0a      	ldr	r3, [pc, #40]	; (80065b4 <vPortSetupTimerInterrupt+0x3c>)
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	4a0a      	ldr	r2, [pc, #40]	; (80065b8 <vPortSetupTimerInterrupt+0x40>)
 800658e:	fba2 2303 	umull	r2, r3, r2, r3
 8006592:	099b      	lsrs	r3, r3, #6
 8006594:	4a09      	ldr	r2, [pc, #36]	; (80065bc <vPortSetupTimerInterrupt+0x44>)
 8006596:	3b01      	subs	r3, #1
 8006598:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800659a:	4b04      	ldr	r3, [pc, #16]	; (80065ac <vPortSetupTimerInterrupt+0x34>)
 800659c:	2207      	movs	r2, #7
 800659e:	601a      	str	r2, [r3, #0]
}
 80065a0:	bf00      	nop
 80065a2:	46bd      	mov	sp, r7
 80065a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a8:	4770      	bx	lr
 80065aa:	bf00      	nop
 80065ac:	e000e010 	.word	0xe000e010
 80065b0:	e000e018 	.word	0xe000e018
 80065b4:	20000004 	.word	0x20000004
 80065b8:	10624dd3 	.word	0x10624dd3
 80065bc:	e000e014 	.word	0xe000e014

080065c0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80065c0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80065d0 <vPortEnableVFP+0x10>
 80065c4:	6801      	ldr	r1, [r0, #0]
 80065c6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80065ca:	6001      	str	r1, [r0, #0]
 80065cc:	4770      	bx	lr
 80065ce:	0000      	.short	0x0000
 80065d0:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 80065d4:	bf00      	nop
 80065d6:	bf00      	nop

080065d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 80065d8:	b480      	push	{r7}
 80065da:	b085      	sub	sp, #20
 80065dc:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80065de:	f3ef 8305 	mrs	r3, IPSR
 80065e2:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	2b0f      	cmp	r3, #15
 80065e8:	d913      	bls.n	8006612 <vPortValidateInterruptPriority+0x3a>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80065ea:	4a16      	ldr	r2, [pc, #88]	; (8006644 <vPortValidateInterruptPriority+0x6c>)
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	4413      	add	r3, r2
 80065f0:	781b      	ldrb	r3, [r3, #0]
 80065f2:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80065f4:	4b14      	ldr	r3, [pc, #80]	; (8006648 <vPortValidateInterruptPriority+0x70>)
 80065f6:	781b      	ldrb	r3, [r3, #0]
 80065f8:	7afa      	ldrb	r2, [r7, #11]
 80065fa:	429a      	cmp	r2, r3
 80065fc:	d209      	bcs.n	8006612 <vPortValidateInterruptPriority+0x3a>
        __asm volatile
 80065fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006602:	f383 8811 	msr	BASEPRI, r3
 8006606:	f3bf 8f6f 	isb	sy
 800660a:	f3bf 8f4f 	dsb	sy
 800660e:	607b      	str	r3, [r7, #4]
 8006610:	e7fe      	b.n	8006610 <vPortValidateInterruptPriority+0x38>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006612:	4b0e      	ldr	r3, [pc, #56]	; (800664c <vPortValidateInterruptPriority+0x74>)
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800661a:	4b0d      	ldr	r3, [pc, #52]	; (8006650 <vPortValidateInterruptPriority+0x78>)
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	429a      	cmp	r2, r3
 8006620:	d909      	bls.n	8006636 <vPortValidateInterruptPriority+0x5e>
 8006622:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006626:	f383 8811 	msr	BASEPRI, r3
 800662a:	f3bf 8f6f 	isb	sy
 800662e:	f3bf 8f4f 	dsb	sy
 8006632:	603b      	str	r3, [r7, #0]
 8006634:	e7fe      	b.n	8006634 <vPortValidateInterruptPriority+0x5c>
    }
 8006636:	bf00      	nop
 8006638:	3714      	adds	r7, #20
 800663a:	46bd      	mov	sp, r7
 800663c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006640:	4770      	bx	lr
 8006642:	bf00      	nop
 8006644:	e000e3f0 	.word	0xe000e3f0
 8006648:	2000017c 	.word	0x2000017c
 800664c:	e000ed0c 	.word	0xe000ed0c
 8006650:	20000180 	.word	0x20000180

08006654 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8006654:	b580      	push	{r7, lr}
 8006656:	b08a      	sub	sp, #40	; 0x28
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 800665c:	2300      	movs	r3, #0
 800665e:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8006660:	f7fe fb44 	bl	8004cec <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8006664:	4b63      	ldr	r3, [pc, #396]	; (80067f4 <pvPortMalloc+0x1a0>)
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d101      	bne.n	8006670 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 800666c:	f000 f92e 	bl	80068cc <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006670:	4b61      	ldr	r3, [pc, #388]	; (80067f8 <pvPortMalloc+0x1a4>)
 8006672:	681a      	ldr	r2, [r3, #0]
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	4013      	ands	r3, r2
 8006678:	2b00      	cmp	r3, #0
 800667a:	f040 80a5 	bne.w	80067c8 <pvPortMalloc+0x174>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d02c      	beq.n	80066de <pvPortMalloc+0x8a>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8006684:	2208      	movs	r2, #8
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 800668a:	687a      	ldr	r2, [r7, #4]
 800668c:	429a      	cmp	r2, r3
 800668e:	d226      	bcs.n	80066de <pvPortMalloc+0x8a>
            {
                xWantedSize += xHeapStructSize;
 8006690:	2208      	movs	r2, #8
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	4413      	add	r3, r2
 8006696:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	f003 0307 	and.w	r3, r3, #7
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d020      	beq.n	80066e4 <pvPortMalloc+0x90>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	f023 0307 	bic.w	r3, r3, #7
 80066a8:	3308      	adds	r3, #8
 80066aa:	687a      	ldr	r2, [r7, #4]
 80066ac:	429a      	cmp	r2, r3
 80066ae:	d213      	bcs.n	80066d8 <pvPortMalloc+0x84>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	f023 0307 	bic.w	r3, r3, #7
 80066b6:	3308      	adds	r3, #8
 80066b8:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	f003 0307 	and.w	r3, r3, #7
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d00f      	beq.n	80066e4 <pvPortMalloc+0x90>
 80066c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066c8:	f383 8811 	msr	BASEPRI, r3
 80066cc:	f3bf 8f6f 	isb	sy
 80066d0:	f3bf 8f4f 	dsb	sy
 80066d4:	617b      	str	r3, [r7, #20]
 80066d6:	e7fe      	b.n	80066d6 <pvPortMalloc+0x82>
                    }
                    else
                    {
                        xWantedSize = 0;
 80066d8:	2300      	movs	r3, #0
 80066da:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80066dc:	e002      	b.n	80066e4 <pvPortMalloc+0x90>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 80066de:	2300      	movs	r3, #0
 80066e0:	607b      	str	r3, [r7, #4]
 80066e2:	e000      	b.n	80066e6 <pvPortMalloc+0x92>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80066e4:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d06d      	beq.n	80067c8 <pvPortMalloc+0x174>
 80066ec:	4b43      	ldr	r3, [pc, #268]	; (80067fc <pvPortMalloc+0x1a8>)
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	687a      	ldr	r2, [r7, #4]
 80066f2:	429a      	cmp	r2, r3
 80066f4:	d868      	bhi.n	80067c8 <pvPortMalloc+0x174>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80066f6:	4b42      	ldr	r3, [pc, #264]	; (8006800 <pvPortMalloc+0x1ac>)
 80066f8:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80066fa:	4b41      	ldr	r3, [pc, #260]	; (8006800 <pvPortMalloc+0x1ac>)
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006700:	e004      	b.n	800670c <pvPortMalloc+0xb8>
                {
                    pxPreviousBlock = pxBlock;
 8006702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006704:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8006706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800670c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800670e:	685b      	ldr	r3, [r3, #4]
 8006710:	687a      	ldr	r2, [r7, #4]
 8006712:	429a      	cmp	r2, r3
 8006714:	d903      	bls.n	800671e <pvPortMalloc+0xca>
 8006716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d1f1      	bne.n	8006702 <pvPortMalloc+0xae>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 800671e:	4b35      	ldr	r3, [pc, #212]	; (80067f4 <pvPortMalloc+0x1a0>)
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006724:	429a      	cmp	r2, r3
 8006726:	d04f      	beq.n	80067c8 <pvPortMalloc+0x174>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006728:	6a3b      	ldr	r3, [r7, #32]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	2208      	movs	r2, #8
 800672e:	4413      	add	r3, r2
 8006730:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006734:	681a      	ldr	r2, [r3, #0]
 8006736:	6a3b      	ldr	r3, [r7, #32]
 8006738:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800673a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800673c:	685a      	ldr	r2, [r3, #4]
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	1ad2      	subs	r2, r2, r3
 8006742:	2308      	movs	r3, #8
 8006744:	005b      	lsls	r3, r3, #1
 8006746:	429a      	cmp	r2, r3
 8006748:	d91e      	bls.n	8006788 <pvPortMalloc+0x134>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800674a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	4413      	add	r3, r2
 8006750:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006752:	69bb      	ldr	r3, [r7, #24]
 8006754:	f003 0307 	and.w	r3, r3, #7
 8006758:	2b00      	cmp	r3, #0
 800675a:	d009      	beq.n	8006770 <pvPortMalloc+0x11c>
 800675c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006760:	f383 8811 	msr	BASEPRI, r3
 8006764:	f3bf 8f6f 	isb	sy
 8006768:	f3bf 8f4f 	dsb	sy
 800676c:	613b      	str	r3, [r7, #16]
 800676e:	e7fe      	b.n	800676e <pvPortMalloc+0x11a>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006772:	685a      	ldr	r2, [r3, #4]
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	1ad2      	subs	r2, r2, r3
 8006778:	69bb      	ldr	r3, [r7, #24]
 800677a:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 800677c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800677e:	687a      	ldr	r2, [r7, #4]
 8006780:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006782:	69b8      	ldr	r0, [r7, #24]
 8006784:	f000 f904 	bl	8006990 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006788:	4b1c      	ldr	r3, [pc, #112]	; (80067fc <pvPortMalloc+0x1a8>)
 800678a:	681a      	ldr	r2, [r3, #0]
 800678c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800678e:	685b      	ldr	r3, [r3, #4]
 8006790:	1ad3      	subs	r3, r2, r3
 8006792:	4a1a      	ldr	r2, [pc, #104]	; (80067fc <pvPortMalloc+0x1a8>)
 8006794:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006796:	4b19      	ldr	r3, [pc, #100]	; (80067fc <pvPortMalloc+0x1a8>)
 8006798:	681a      	ldr	r2, [r3, #0]
 800679a:	4b1a      	ldr	r3, [pc, #104]	; (8006804 <pvPortMalloc+0x1b0>)
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	429a      	cmp	r2, r3
 80067a0:	d203      	bcs.n	80067aa <pvPortMalloc+0x156>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80067a2:	4b16      	ldr	r3, [pc, #88]	; (80067fc <pvPortMalloc+0x1a8>)
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	4a17      	ldr	r2, [pc, #92]	; (8006804 <pvPortMalloc+0x1b0>)
 80067a8:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 80067aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ac:	685a      	ldr	r2, [r3, #4]
 80067ae:	4b12      	ldr	r3, [pc, #72]	; (80067f8 <pvPortMalloc+0x1a4>)
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	431a      	orrs	r2, r3
 80067b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067b6:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80067b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ba:	2200      	movs	r2, #0
 80067bc:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80067be:	4b12      	ldr	r3, [pc, #72]	; (8006808 <pvPortMalloc+0x1b4>)
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	3301      	adds	r3, #1
 80067c4:	4a10      	ldr	r2, [pc, #64]	; (8006808 <pvPortMalloc+0x1b4>)
 80067c6:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80067c8:	f7fe fa9e 	bl	8004d08 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80067cc:	69fb      	ldr	r3, [r7, #28]
 80067ce:	f003 0307 	and.w	r3, r3, #7
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d009      	beq.n	80067ea <pvPortMalloc+0x196>
 80067d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067da:	f383 8811 	msr	BASEPRI, r3
 80067de:	f3bf 8f6f 	isb	sy
 80067e2:	f3bf 8f4f 	dsb	sy
 80067e6:	60fb      	str	r3, [r7, #12]
 80067e8:	e7fe      	b.n	80067e8 <pvPortMalloc+0x194>
    return pvReturn;
 80067ea:	69fb      	ldr	r3, [r7, #28]
}
 80067ec:	4618      	mov	r0, r3
 80067ee:	3728      	adds	r7, #40	; 0x28
 80067f0:	46bd      	mov	sp, r7
 80067f2:	bd80      	pop	{r7, pc}
 80067f4:	20012d8c 	.word	0x20012d8c
 80067f8:	20012da0 	.word	0x20012da0
 80067fc:	20012d90 	.word	0x20012d90
 8006800:	20012d84 	.word	0x20012d84
 8006804:	20012d94 	.word	0x20012d94
 8006808:	20012d98 	.word	0x20012d98

0800680c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800680c:	b580      	push	{r7, lr}
 800680e:	b086      	sub	sp, #24
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d04b      	beq.n	80068b6 <vPortFree+0xaa>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800681e:	2308      	movs	r3, #8
 8006820:	425b      	negs	r3, r3
 8006822:	697a      	ldr	r2, [r7, #20]
 8006824:	4413      	add	r3, r2
 8006826:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8006828:	697b      	ldr	r3, [r7, #20]
 800682a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800682c:	693b      	ldr	r3, [r7, #16]
 800682e:	685a      	ldr	r2, [r3, #4]
 8006830:	4b23      	ldr	r3, [pc, #140]	; (80068c0 <vPortFree+0xb4>)
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	4013      	ands	r3, r2
 8006836:	2b00      	cmp	r3, #0
 8006838:	d109      	bne.n	800684e <vPortFree+0x42>
 800683a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800683e:	f383 8811 	msr	BASEPRI, r3
 8006842:	f3bf 8f6f 	isb	sy
 8006846:	f3bf 8f4f 	dsb	sy
 800684a:	60fb      	str	r3, [r7, #12]
 800684c:	e7fe      	b.n	800684c <vPortFree+0x40>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800684e:	693b      	ldr	r3, [r7, #16]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d009      	beq.n	800686a <vPortFree+0x5e>
 8006856:	f04f 0350 	mov.w	r3, #80	; 0x50
 800685a:	f383 8811 	msr	BASEPRI, r3
 800685e:	f3bf 8f6f 	isb	sy
 8006862:	f3bf 8f4f 	dsb	sy
 8006866:	60bb      	str	r3, [r7, #8]
 8006868:	e7fe      	b.n	8006868 <vPortFree+0x5c>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800686a:	693b      	ldr	r3, [r7, #16]
 800686c:	685a      	ldr	r2, [r3, #4]
 800686e:	4b14      	ldr	r3, [pc, #80]	; (80068c0 <vPortFree+0xb4>)
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	4013      	ands	r3, r2
 8006874:	2b00      	cmp	r3, #0
 8006876:	d01e      	beq.n	80068b6 <vPortFree+0xaa>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8006878:	693b      	ldr	r3, [r7, #16]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d11a      	bne.n	80068b6 <vPortFree+0xaa>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006880:	693b      	ldr	r3, [r7, #16]
 8006882:	685a      	ldr	r2, [r3, #4]
 8006884:	4b0e      	ldr	r3, [pc, #56]	; (80068c0 <vPortFree+0xb4>)
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	43db      	mvns	r3, r3
 800688a:	401a      	ands	r2, r3
 800688c:	693b      	ldr	r3, [r7, #16]
 800688e:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8006890:	f7fe fa2c 	bl	8004cec <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8006894:	693b      	ldr	r3, [r7, #16]
 8006896:	685a      	ldr	r2, [r3, #4]
 8006898:	4b0a      	ldr	r3, [pc, #40]	; (80068c4 <vPortFree+0xb8>)
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	4413      	add	r3, r2
 800689e:	4a09      	ldr	r2, [pc, #36]	; (80068c4 <vPortFree+0xb8>)
 80068a0:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80068a2:	6938      	ldr	r0, [r7, #16]
 80068a4:	f000 f874 	bl	8006990 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80068a8:	4b07      	ldr	r3, [pc, #28]	; (80068c8 <vPortFree+0xbc>)
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	3301      	adds	r3, #1
 80068ae:	4a06      	ldr	r2, [pc, #24]	; (80068c8 <vPortFree+0xbc>)
 80068b0:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80068b2:	f7fe fa29 	bl	8004d08 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80068b6:	bf00      	nop
 80068b8:	3718      	adds	r7, #24
 80068ba:	46bd      	mov	sp, r7
 80068bc:	bd80      	pop	{r7, pc}
 80068be:	bf00      	nop
 80068c0:	20012da0 	.word	0x20012da0
 80068c4:	20012d90 	.word	0x20012d90
 80068c8:	20012d9c 	.word	0x20012d9c

080068cc <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80068cc:	b480      	push	{r7}
 80068ce:	b085      	sub	sp, #20
 80068d0:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80068d2:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 80068d6:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 80068d8:	4b27      	ldr	r3, [pc, #156]	; (8006978 <prvHeapInit+0xac>)
 80068da:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	f003 0307 	and.w	r3, r3, #7
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d00c      	beq.n	8006900 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	3307      	adds	r3, #7
 80068ea:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	f023 0307 	bic.w	r3, r3, #7
 80068f2:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80068f4:	68ba      	ldr	r2, [r7, #8]
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	1ad3      	subs	r3, r2, r3
 80068fa:	4a1f      	ldr	r2, [pc, #124]	; (8006978 <prvHeapInit+0xac>)
 80068fc:	4413      	add	r3, r2
 80068fe:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006904:	4a1d      	ldr	r2, [pc, #116]	; (800697c <prvHeapInit+0xb0>)
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800690a:	4b1c      	ldr	r3, [pc, #112]	; (800697c <prvHeapInit+0xb0>)
 800690c:	2200      	movs	r2, #0
 800690e:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	68ba      	ldr	r2, [r7, #8]
 8006914:	4413      	add	r3, r2
 8006916:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8006918:	2208      	movs	r2, #8
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	1a9b      	subs	r3, r3, r2
 800691e:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	f023 0307 	bic.w	r3, r3, #7
 8006926:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	4a15      	ldr	r2, [pc, #84]	; (8006980 <prvHeapInit+0xb4>)
 800692c:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800692e:	4b14      	ldr	r3, [pc, #80]	; (8006980 <prvHeapInit+0xb4>)
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	2200      	movs	r2, #0
 8006934:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8006936:	4b12      	ldr	r3, [pc, #72]	; (8006980 <prvHeapInit+0xb4>)
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	2200      	movs	r2, #0
 800693c:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	68fa      	ldr	r2, [r7, #12]
 8006946:	1ad2      	subs	r2, r2, r3
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800694c:	4b0c      	ldr	r3, [pc, #48]	; (8006980 <prvHeapInit+0xb4>)
 800694e:	681a      	ldr	r2, [r3, #0]
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	685b      	ldr	r3, [r3, #4]
 8006958:	4a0a      	ldr	r2, [pc, #40]	; (8006984 <prvHeapInit+0xb8>)
 800695a:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	685b      	ldr	r3, [r3, #4]
 8006960:	4a09      	ldr	r2, [pc, #36]	; (8006988 <prvHeapInit+0xbc>)
 8006962:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006964:	4b09      	ldr	r3, [pc, #36]	; (800698c <prvHeapInit+0xc0>)
 8006966:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800696a:	601a      	str	r2, [r3, #0]
}
 800696c:	bf00      	nop
 800696e:	3714      	adds	r7, #20
 8006970:	46bd      	mov	sp, r7
 8006972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006976:	4770      	bx	lr
 8006978:	20000184 	.word	0x20000184
 800697c:	20012d84 	.word	0x20012d84
 8006980:	20012d8c 	.word	0x20012d8c
 8006984:	20012d94 	.word	0x20012d94
 8006988:	20012d90 	.word	0x20012d90
 800698c:	20012da0 	.word	0x20012da0

08006990 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8006990:	b480      	push	{r7}
 8006992:	b085      	sub	sp, #20
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006998:	4b28      	ldr	r3, [pc, #160]	; (8006a3c <prvInsertBlockIntoFreeList+0xac>)
 800699a:	60fb      	str	r3, [r7, #12]
 800699c:	e002      	b.n	80069a4 <prvInsertBlockIntoFreeList+0x14>
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	60fb      	str	r3, [r7, #12]
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	687a      	ldr	r2, [r7, #4]
 80069aa:	429a      	cmp	r2, r3
 80069ac:	d8f7      	bhi.n	800699e <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	685b      	ldr	r3, [r3, #4]
 80069b6:	68ba      	ldr	r2, [r7, #8]
 80069b8:	4413      	add	r3, r2
 80069ba:	687a      	ldr	r2, [r7, #4]
 80069bc:	429a      	cmp	r2, r3
 80069be:	d108      	bne.n	80069d2 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	685a      	ldr	r2, [r3, #4]
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	685b      	ldr	r3, [r3, #4]
 80069c8:	441a      	add	r2, r3
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	685b      	ldr	r3, [r3, #4]
 80069da:	68ba      	ldr	r2, [r7, #8]
 80069dc:	441a      	add	r2, r3
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	429a      	cmp	r2, r3
 80069e4:	d118      	bne.n	8006a18 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	681a      	ldr	r2, [r3, #0]
 80069ea:	4b15      	ldr	r3, [pc, #84]	; (8006a40 <prvInsertBlockIntoFreeList+0xb0>)
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	429a      	cmp	r2, r3
 80069f0:	d00d      	beq.n	8006a0e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	685a      	ldr	r2, [r3, #4]
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	685b      	ldr	r3, [r3, #4]
 80069fc:	441a      	add	r2, r3
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	681a      	ldr	r2, [r3, #0]
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	601a      	str	r2, [r3, #0]
 8006a0c:	e008      	b.n	8006a20 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006a0e:	4b0c      	ldr	r3, [pc, #48]	; (8006a40 <prvInsertBlockIntoFreeList+0xb0>)
 8006a10:	681a      	ldr	r2, [r3, #0]
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	601a      	str	r2, [r3, #0]
 8006a16:	e003      	b.n	8006a20 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	681a      	ldr	r2, [r3, #0]
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8006a20:	68fa      	ldr	r2, [r7, #12]
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	429a      	cmp	r2, r3
 8006a26:	d002      	beq.n	8006a2e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	687a      	ldr	r2, [r7, #4]
 8006a2c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8006a2e:	bf00      	nop
 8006a30:	3714      	adds	r7, #20
 8006a32:	46bd      	mov	sp, r7
 8006a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a38:	4770      	bx	lr
 8006a3a:	bf00      	nop
 8006a3c:	20012d84 	.word	0x20012d84
 8006a40:	20012d8c 	.word	0x20012d8c

08006a44 <__libc_init_array>:
 8006a44:	b570      	push	{r4, r5, r6, lr}
 8006a46:	4e0d      	ldr	r6, [pc, #52]	; (8006a7c <__libc_init_array+0x38>)
 8006a48:	4c0d      	ldr	r4, [pc, #52]	; (8006a80 <__libc_init_array+0x3c>)
 8006a4a:	1ba4      	subs	r4, r4, r6
 8006a4c:	10a4      	asrs	r4, r4, #2
 8006a4e:	2500      	movs	r5, #0
 8006a50:	42a5      	cmp	r5, r4
 8006a52:	d109      	bne.n	8006a68 <__libc_init_array+0x24>
 8006a54:	4e0b      	ldr	r6, [pc, #44]	; (8006a84 <__libc_init_array+0x40>)
 8006a56:	4c0c      	ldr	r4, [pc, #48]	; (8006a88 <__libc_init_array+0x44>)
 8006a58:	f000 f82c 	bl	8006ab4 <_init>
 8006a5c:	1ba4      	subs	r4, r4, r6
 8006a5e:	10a4      	asrs	r4, r4, #2
 8006a60:	2500      	movs	r5, #0
 8006a62:	42a5      	cmp	r5, r4
 8006a64:	d105      	bne.n	8006a72 <__libc_init_array+0x2e>
 8006a66:	bd70      	pop	{r4, r5, r6, pc}
 8006a68:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006a6c:	4798      	blx	r3
 8006a6e:	3501      	adds	r5, #1
 8006a70:	e7ee      	b.n	8006a50 <__libc_init_array+0xc>
 8006a72:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006a76:	4798      	blx	r3
 8006a78:	3501      	adds	r5, #1
 8006a7a:	e7f2      	b.n	8006a62 <__libc_init_array+0x1e>
 8006a7c:	08006c88 	.word	0x08006c88
 8006a80:	08006c88 	.word	0x08006c88
 8006a84:	08006c88 	.word	0x08006c88
 8006a88:	08006c8c 	.word	0x08006c8c

08006a8c <memcpy>:
 8006a8c:	b510      	push	{r4, lr}
 8006a8e:	1e43      	subs	r3, r0, #1
 8006a90:	440a      	add	r2, r1
 8006a92:	4291      	cmp	r1, r2
 8006a94:	d100      	bne.n	8006a98 <memcpy+0xc>
 8006a96:	bd10      	pop	{r4, pc}
 8006a98:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006a9c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006aa0:	e7f7      	b.n	8006a92 <memcpy+0x6>

08006aa2 <memset>:
 8006aa2:	4402      	add	r2, r0
 8006aa4:	4603      	mov	r3, r0
 8006aa6:	4293      	cmp	r3, r2
 8006aa8:	d100      	bne.n	8006aac <memset+0xa>
 8006aaa:	4770      	bx	lr
 8006aac:	f803 1b01 	strb.w	r1, [r3], #1
 8006ab0:	e7f9      	b.n	8006aa6 <memset+0x4>
	...

08006ab4 <_init>:
 8006ab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ab6:	bf00      	nop
 8006ab8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006aba:	bc08      	pop	{r3}
 8006abc:	469e      	mov	lr, r3
 8006abe:	4770      	bx	lr

08006ac0 <_fini>:
 8006ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ac2:	bf00      	nop
 8006ac4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ac6:	bc08      	pop	{r3}
 8006ac8:	469e      	mov	lr, r3
 8006aca:	4770      	bx	lr
